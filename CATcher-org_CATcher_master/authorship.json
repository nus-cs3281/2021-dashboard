[{"path":"e2e/page-objects/bugReporting.po.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"ptvrajsk"},"content":"import { by, element } from \u0027protractor\u0027;"},{"lineNumber":2,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":3,"author":{"gitId":"ptvrajsk"},"content":"export class BugReportingPage {"},{"lineNumber":4,"author":{"gitId":"ptvrajsk"},"content":"  async getPhaseDescription() {"},{"lineNumber":5,"author":{"gitId":"ptvrajsk"},"content":"    return element(by.css(\u0027app-root\u0027)).element(by.id(\u0027phase-descriptor\u0027)).getText();"},{"lineNumber":6,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":7,"author":{"gitId":"ptvrajsk"},"content":"}"}],"authorContributionMap":{"ptvrajsk":7}},{"path":"e2e/page-objects/login.po.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"ptvrajsk"},"content":"import { browser, element, by, ExpectedConditions } from \u0027protractor\u0027;"},{"lineNumber":2,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":3,"author":{"gitId":"ptvrajsk"},"content":"export class LoginPage {"},{"lineNumber":4,"author":{"gitId":"ptvrajsk"},"content":"  navigateToRoot() {"},{"lineNumber":5,"author":{"gitId":"ptvrajsk"},"content":"    return browser.get(\u0027/\u0027);"},{"lineNumber":6,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":7,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":8,"author":{"gitId":"ptvrajsk"},"content":"  async getTitle() {"},{"lineNumber":9,"author":{"gitId":"ptvrajsk"},"content":"    return element(by.css(\u0027app-root\u0027)).element(by.css(\u0027app-layout-header\u0027)).getText();"},{"lineNumber":10,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":11,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":12,"author":{"gitId":"ptvrajsk"},"content":"  async getConfirmationScreenTitle() {"},{"lineNumber":13,"author":{"gitId":"ptvrajsk"},"content":"    return element(by.className(\u0027login-title\u0027)).getText();"},{"lineNumber":14,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":15,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":16,"author":{"gitId":"ptvrajsk"},"content":"  async login() {"},{"lineNumber":17,"author":{"gitId":"ptvrajsk"},"content":"    await this.selectSession();"},{"lineNumber":18,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":19,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":20,"author":{"gitId":"ptvrajsk"},"content":"  async confirmUser() {"},{"lineNumber":21,"author":{"gitId":"ptvrajsk"},"content":"    await browser.wait(ExpectedConditions.presenceOf(element(by.className(\u0027sign-in-button\u0027))));"},{"lineNumber":22,"author":{"gitId":"ptvrajsk"},"content":"    const confirm \u003d element(by.className(\u0027sign-in-button\u0027));"},{"lineNumber":23,"author":{"gitId":"ptvrajsk"},"content":"    await confirm.click();"},{"lineNumber":24,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":25,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":26,"author":{"gitId":"ptvrajsk"},"content":"  private async selectSession() {"},{"lineNumber":27,"author":{"gitId":"ptvrajsk"},"content":"    const profiles \u003d element(by.css(\u0027app-root\u0027)).element(by.css(\u0027app-profiles\u0027));"},{"lineNumber":28,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":29,"author":{"gitId":"ptvrajsk"},"content":"    await profiles.click();"},{"lineNumber":30,"author":{"gitId":"ptvrajsk"},"content":"    const options \u003d element.all(by.className(\u0027mat-option\u0027)).get(1);"},{"lineNumber":31,"author":{"gitId":"ptvrajsk"},"content":"    await options.click();"},{"lineNumber":32,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":33,"author":{"gitId":"ptvrajsk"},"content":"    const button \u003d element(by.className(\u0027sign-in-button\u0027));"},{"lineNumber":34,"author":{"gitId":"ptvrajsk"},"content":"    await button.click();"},{"lineNumber":35,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":36,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":37,"author":{"gitId":"ptvrajsk"},"content":"  async bypassAuthentication() {"},{"lineNumber":38,"author":{"gitId":"ptvrajsk"},"content":"    await this.login();"},{"lineNumber":39,"author":{"gitId":"ptvrajsk"},"content":"    await this.confirmUser();"},{"lineNumber":40,"author":{"gitId":"ptvrajsk"},"content":"    console.log(\u0027\\nAuthentication Bypass Complete.\\n\u0027);"},{"lineNumber":41,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":42,"author":{"gitId":"ptvrajsk"},"content":"}"}],"authorContributionMap":{"ptvrajsk":42}},{"path":"e2e/protractor.base.conf.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"ptvrajsk"},"content":"// Protractor configuration file, see link for more information"},{"lineNumber":2,"author":{"gitId":"ptvrajsk"},"content":"// https://github.com/angular/protractor/blob/master/lib/config.ts"},{"lineNumber":3,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":4,"author":{"gitId":"ptvrajsk"},"content":"const { SpecReporter } \u003d require(\u0027jasmine-spec-reporter\u0027);"},{"lineNumber":5,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":6,"author":{"gitId":"ptvrajsk"},"content":"exports.config \u003d {"},{"lineNumber":7,"author":{"gitId":"ptvrajsk"},"content":"  allScriptsTimeout: 25000,"},{"lineNumber":8,"author":{"gitId":"ptvrajsk"},"content":"  delayBrowserTimeInSeconds: 0,"},{"lineNumber":9,"author":{"gitId":"ptvrajsk"},"content":"  suites: {"},{"lineNumber":10,"author":{"gitId":"ptvrajsk"},"content":"    login: \u0027./spec/login/*.e2e-spec.ts\u0027,"},{"lineNumber":11,"author":{"gitId":"ptvrajsk"},"content":"    bugReporting: \u0027./spec/bugReporting/*.e2e-spec.ts\u0027"},{"lineNumber":12,"author":{"gitId":"ptvrajsk"},"content":"  },"},{"lineNumber":13,"author":{"gitId":"ptvrajsk"},"content":"  directConnect: true,"},{"lineNumber":14,"author":{"gitId":"ptvrajsk"},"content":"  baseUrl: \u0027http://localhost:4200/\u0027,"},{"lineNumber":15,"author":{"gitId":"ptvrajsk"},"content":"  framework: \u0027jasmine2\u0027,"},{"lineNumber":16,"author":{"gitId":"ptvrajsk"},"content":"  jasmineNodeOpts: {"},{"lineNumber":17,"author":{"gitId":"ptvrajsk"},"content":"    showColors: true,"},{"lineNumber":18,"author":{"gitId":"ptvrajsk"},"content":"    defaultTimeoutInterval: 30000,"},{"lineNumber":19,"author":{"gitId":"ptvrajsk"},"content":"    print: function () {},"},{"lineNumber":20,"author":{"gitId":"ptvrajsk"},"content":"    realtimeFailure: true"},{"lineNumber":21,"author":{"gitId":"ptvrajsk"},"content":"  },"},{"lineNumber":22,"author":{"gitId":"ptvrajsk"},"content":"  useAllAngular2AppRoots: true,"},{"lineNumber":23,"author":{"gitId":"ptvrajsk"},"content":"  random: false,"},{"lineNumber":24,"author":{"gitId":"ptvrajsk"},"content":"  onPrepare() {"},{"lineNumber":25,"author":{"gitId":"ptvrajsk"},"content":"    jasmine.getEnv().addReporter(new SpecReporter({ spec: { displayStacktrace: true } }));"},{"lineNumber":26,"author":{"gitId":"ptvrajsk"},"content":"    require(\u0027ts-node\u0027).register({"},{"lineNumber":27,"author":{"gitId":"ptvrajsk"},"content":"      project: \u0027e2e/tsconfig.e2e.json\u0027"},{"lineNumber":28,"author":{"gitId":"ptvrajsk"},"content":"    });"},{"lineNumber":29,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":30,"author":{"gitId":"ptvrajsk"},"content":"};"}],"authorContributionMap":{"ptvrajsk":30}},{"path":"e2e/protractor.conf.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"// Protractor configuration file, see link for more information"},{"lineNumber":2,"author":{"gitId":"-"},"content":"// https://github.com/angular/protractor/blob/master/lib/config.ts"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"ptvrajsk"},"content":"protractorBaseConfig \u003d require(\u0027./protractor.base.conf\u0027);"},{"lineNumber":5,"author":{"gitId":"ptvrajsk"},"content":"const config \u003d protractorBaseConfig.config;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"ptvrajsk"},"content":"config.capabilities \u003d {"},{"lineNumber":8,"author":{"gitId":"ptvrajsk"},"content":"  browserName: \u0027chrome\u0027,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  chromeOptions: {"},{"lineNumber":10,"author":{"gitId":"ptvrajsk"},"content":"    args: [\u0027--no-sandbox\u0027, \u0027--disable-gpu\u0027]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":12,"author":{"gitId":"-"},"content":"};"},{"lineNumber":13,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":14,"author":{"gitId":"ptvrajsk"},"content":"exports.config \u003d config;"}],"authorContributionMap":{"ptvrajsk":7,"-":7}},{"path":"e2e/protractor.firefox.conf.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"ptvrajsk"},"content":"// Protractor configuration file, see link for more information"},{"lineNumber":2,"author":{"gitId":"ptvrajsk"},"content":"// https://github.com/angular/protractor/blob/master/lib/config.ts"},{"lineNumber":3,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":4,"author":{"gitId":"ptvrajsk"},"content":"protractorBaseConfig \u003d require(\u0027./protractor.base.conf\u0027);"},{"lineNumber":5,"author":{"gitId":"ptvrajsk"},"content":"const config \u003d protractorBaseConfig.config;"},{"lineNumber":6,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":7,"author":{"gitId":"ptvrajsk"},"content":"config.capabilities \u003d {"},{"lineNumber":8,"author":{"gitId":"dingyuchen"},"content":"  browserName: \u0027firefox\u0027"},{"lineNumber":9,"author":{"gitId":"ptvrajsk"},"content":"};"},{"lineNumber":10,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":11,"author":{"gitId":"ptvrajsk"},"content":"exports.config \u003d config;"}],"authorContributionMap":{"dingyuchen":1,"ptvrajsk":10}},{"path":"e2e/protractor.gh-actions.conf.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"ptvrajsk"},"content":"// Protractor configuration file, see link for more information"},{"lineNumber":2,"author":{"gitId":"ptvrajsk"},"content":"// https://github.com/angular/protractor/blob/master/lib/config.ts"},{"lineNumber":3,"author":{"gitId":"ptvrajsk"},"content":"// Browser Setup information can be found in the link below"},{"lineNumber":4,"author":{"gitId":"ptvrajsk"},"content":"// https://github.com/angular/protractor/blob/master/docs/browser-setup.md"},{"lineNumber":5,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":6,"author":{"gitId":"ptvrajsk"},"content":"// Used to run E2E tests with GH Actions (in Headless Mode)"},{"lineNumber":7,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":8,"author":{"gitId":"ptvrajsk"},"content":"protractorBaseConfig \u003d require(\u0027./protractor.base.conf\u0027);"},{"lineNumber":9,"author":{"gitId":"ptvrajsk"},"content":"const config \u003d protractorBaseConfig.config;"},{"lineNumber":10,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":11,"author":{"gitId":"ptvrajsk"},"content":"config.multiCapabilities \u003d ["},{"lineNumber":12,"author":{"gitId":"ptvrajsk"},"content":"  {"},{"lineNumber":13,"author":{"gitId":"ptvrajsk"},"content":"    browserName: \u0027chrome\u0027,"},{"lineNumber":14,"author":{"gitId":"ptvrajsk"},"content":"    chromeOptions: {"},{"lineNumber":15,"author":{"gitId":"ptvrajsk"},"content":"      args: [\u0027--headless\u0027, \u0027--no-sandbox\u0027, \u0027--disable-gpu\u0027]"},{"lineNumber":16,"author":{"gitId":"ptvrajsk"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"ptvrajsk"},"content":"  },"},{"lineNumber":18,"author":{"gitId":"ptvrajsk"},"content":"  {"},{"lineNumber":19,"author":{"gitId":"ptvrajsk"},"content":"    browserName: \u0027firefox\u0027,"},{"lineNumber":20,"author":{"gitId":"ptvrajsk"},"content":"    \u0027moz:firefoxOptions\u0027: {"},{"lineNumber":21,"author":{"gitId":"ptvrajsk"},"content":"      args: [\u0027--headless\u0027]"},{"lineNumber":22,"author":{"gitId":"ptvrajsk"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":24,"author":{"gitId":"ptvrajsk"},"content":"];"},{"lineNumber":25,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":26,"author":{"gitId":"ptvrajsk"},"content":"exports.config \u003d config;"}],"authorContributionMap":{"ptvrajsk":26}},{"path":"e2e/spec/bugReporting/bugReporting.e2e-spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"ptvrajsk"},"content":"import { BugReportingPage } from \u0027../../page-objects/bugReporting.po\u0027;"},{"lineNumber":2,"author":{"gitId":"ptvrajsk"},"content":"import { PhaseDescription } from \u0027../../../src/app/core/services/phase.service\u0027;"},{"lineNumber":3,"author":{"gitId":"ptvrajsk"},"content":"import { Phase } from \u0027../../../src/app/core/models/phase.model\u0027;"},{"lineNumber":4,"author":{"gitId":"ptvrajsk"},"content":"import { LoginPage } from \u0027../../page-objects/login.po\u0027;"},{"lineNumber":5,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":6,"author":{"gitId":"dingyuchen"},"content":"describe(\"CATcher\u0027s Bug Reporting Page\", () \u003d\u003e {"},{"lineNumber":7,"author":{"gitId":"ptvrajsk"},"content":"  let bugReportingPage: BugReportingPage;"},{"lineNumber":8,"author":{"gitId":"ptvrajsk"},"content":"  let loginPage: LoginPage;"},{"lineNumber":9,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":10,"author":{"gitId":"ptvrajsk"},"content":"  beforeEach(() \u003d\u003e {"},{"lineNumber":11,"author":{"gitId":"ptvrajsk"},"content":"    loginPage \u003d new LoginPage();"},{"lineNumber":12,"author":{"gitId":"ptvrajsk"},"content":"    bugReportingPage \u003d new BugReportingPage();"},{"lineNumber":13,"author":{"gitId":"ptvrajsk"},"content":"    loginPage.navigateToRoot();"},{"lineNumber":14,"author":{"gitId":"ptvrajsk"},"content":"  });"},{"lineNumber":15,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":16,"author":{"gitId":"ptvrajsk"},"content":"  it(`displays \"${PhaseDescription[Phase.phaseBugReporting]}\" in header bar`, async () \u003d\u003e {"},{"lineNumber":17,"author":{"gitId":"ptvrajsk"},"content":"    await loginPage.bypassAuthentication();"},{"lineNumber":18,"author":{"gitId":"ptvrajsk"},"content":"    expect(await bugReportingPage.getPhaseDescription()).toContain(PhaseDescription[Phase.phaseBugReporting]);"},{"lineNumber":19,"author":{"gitId":"ptvrajsk"},"content":"  });"},{"lineNumber":20,"author":{"gitId":"ptvrajsk"},"content":"});"}],"authorContributionMap":{"dingyuchen":1,"ptvrajsk":19}},{"path":"e2e/spec/login/login.e2e-spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"ptvrajsk"},"content":"import { LoginPage } from \u0027../../page-objects/login.po\u0027;"},{"lineNumber":2,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":3,"author":{"gitId":"dingyuchen"},"content":"describe(\"CATcher\u0027s Login Page\", () \u003d\u003e {"},{"lineNumber":4,"author":{"gitId":"ptvrajsk"},"content":"  let page: LoginPage;"},{"lineNumber":5,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":6,"author":{"gitId":"ptvrajsk"},"content":"  beforeAll(() \u003d\u003e {"},{"lineNumber":7,"author":{"gitId":"ptvrajsk"},"content":"    page \u003d new LoginPage();"},{"lineNumber":8,"author":{"gitId":"ptvrajsk"},"content":"    page.navigateToRoot();"},{"lineNumber":9,"author":{"gitId":"ptvrajsk"},"content":"  });"},{"lineNumber":10,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":11,"author":{"gitId":"ptvrajsk"},"content":"  it(\u0027displays \"CATcher\" in header bar\u0027, async () \u003d\u003e {"},{"lineNumber":12,"author":{"gitId":"ptvrajsk"},"content":"    expect(await page.getTitle()).toEqual(\u0027CATcher\u0027);"},{"lineNumber":13,"author":{"gitId":"ptvrajsk"},"content":"  });"},{"lineNumber":14,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":15,"author":{"gitId":"ptvrajsk"},"content":"  it(\u0027allows users to authenticate themselves\u0027, async () \u003d\u003e {"},{"lineNumber":16,"author":{"gitId":"ptvrajsk"},"content":"    await page.login();"},{"lineNumber":17,"author":{"gitId":"ptvrajsk"},"content":"    expect(await page.getConfirmationScreenTitle()).toEqual(\u0027Confirm Login Account\u0027);"},{"lineNumber":18,"author":{"gitId":"ptvrajsk"},"content":"    await page.confirmUser();"},{"lineNumber":19,"author":{"gitId":"ptvrajsk"},"content":"  });"},{"lineNumber":20,"author":{"gitId":"ptvrajsk"},"content":"});"}],"authorContributionMap":{"dingyuchen":1,"ptvrajsk":19}},{"path":"electron-utils/menu-bar.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"kkangs0226"},"content":"import { app, MenuItemConstructorOptions } from \u0027electron\u0027;"},{"lineNumber":2,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":3,"author":{"gitId":"kkangs0226"},"content":"// Edited version of a template menu-bar provided by the electron API,"},{"lineNumber":4,"author":{"gitId":"kkangs0226"},"content":"// refer to https://electronjs.org/docs/api/menu for more information."},{"lineNumber":5,"author":{"gitId":"kkangs0226"},"content":"const fileMenu: MenuItemConstructorOptions \u003d {"},{"lineNumber":6,"author":{"gitId":"kkangs0226"},"content":"  label: \u0027File\u0027,"},{"lineNumber":7,"author":{"gitId":"kkangs0226"},"content":"  submenu: ["},{"lineNumber":8,"author":{"gitId":"kkangs0226"},"content":"    {"},{"lineNumber":9,"author":{"gitId":"kkangs0226"},"content":"      label: \u0027Quit CATcher\u0027, accelerator: \u0027CmdOrCtrl+Q\u0027, click() { app.quit(); }"},{"lineNumber":10,"author":{"gitId":"kkangs0226"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"kkangs0226"},"content":"  ]"},{"lineNumber":12,"author":{"gitId":"kkangs0226"},"content":"};"},{"lineNumber":13,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":14,"author":{"gitId":"kkangs0226"},"content":"const editMenu: MenuItemConstructorOptions \u003d {"},{"lineNumber":15,"author":{"gitId":"kkangs0226"},"content":"  label: \u0027Edit\u0027,"},{"lineNumber":16,"author":{"gitId":"kkangs0226"},"content":"  submenu: ["},{"lineNumber":17,"author":{"gitId":"kkangs0226"},"content":"    { role: \u0027undo\u0027 },"},{"lineNumber":18,"author":{"gitId":"kkangs0226"},"content":"    { role: \u0027redo\u0027 },"},{"lineNumber":19,"author":{"gitId":"kkangs0226"},"content":"    { type: \u0027separator\u0027 },"},{"lineNumber":20,"author":{"gitId":"kkangs0226"},"content":"    { role: \u0027selectAll\u0027 },"},{"lineNumber":21,"author":{"gitId":"kkangs0226"},"content":"    { role: \u0027cut\u0027 },"},{"lineNumber":22,"author":{"gitId":"kkangs0226"},"content":"    { role: \u0027copy\u0027 },"},{"lineNumber":23,"author":{"gitId":"kkangs0226"},"content":"    { role: \u0027paste\u0027 },"},{"lineNumber":24,"author":{"gitId":"kkangs0226"},"content":"    { role: \u0027delete\u0027 },"},{"lineNumber":25,"author":{"gitId":"kkangs0226"},"content":"  ]"},{"lineNumber":26,"author":{"gitId":"kkangs0226"},"content":"};"},{"lineNumber":27,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":28,"author":{"gitId":"kkangs0226"},"content":"const viewMenu: MenuItemConstructorOptions \u003d {"},{"lineNumber":29,"author":{"gitId":"kkangs0226"},"content":"  label: \u0027View\u0027,"},{"lineNumber":30,"author":{"gitId":"kkangs0226"},"content":"  submenu: ["},{"lineNumber":31,"author":{"gitId":"kkangs0226"},"content":"    { role: \u0027resetZoom\u0027 },"},{"lineNumber":32,"author":{"gitId":"kkangs0226"},"content":"    { role: \u0027zoomIn\u0027 },"},{"lineNumber":33,"author":{"gitId":"kkangs0226"},"content":"    { role: \u0027zoomOut\u0027 },"},{"lineNumber":34,"author":{"gitId":"kkangs0226"},"content":"    { type: \u0027separator\u0027 },"},{"lineNumber":35,"author":{"gitId":"kkangs0226"},"content":"    { role: \u0027togglefullscreen\u0027 }"},{"lineNumber":36,"author":{"gitId":"kkangs0226"},"content":"  ]"},{"lineNumber":37,"author":{"gitId":"kkangs0226"},"content":"};"},{"lineNumber":38,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":39,"author":{"gitId":"kkangs0226"},"content":"export function createMenuOptions(isDevMode: boolean): MenuItemConstructorOptions[] {"},{"lineNumber":40,"author":{"gitId":"kkangs0226"},"content":"  const mainMenuTemplate: MenuItemConstructorOptions[] \u003d [fileMenu, editMenu, viewMenu];"},{"lineNumber":41,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":42,"author":{"gitId":"kkangs0226"},"content":"  if (isDevMode) {"},{"lineNumber":43,"author":{"gitId":"kkangs0226"},"content":"    let viewSubMenu: MenuItemConstructorOptions[];"},{"lineNumber":44,"author":{"gitId":"kkangs0226"},"content":"    viewSubMenu \u003d mainMenuTemplate[2].submenu as MenuItemConstructorOptions[];"},{"lineNumber":45,"author":{"gitId":"kkangs0226"},"content":"    viewSubMenu.push("},{"lineNumber":46,"author":{"gitId":"kkangs0226"},"content":"      { type: \u0027separator\u0027 },"},{"lineNumber":47,"author":{"gitId":"kkangs0226"},"content":"      { role: \u0027toggleDevTools\u0027}"},{"lineNumber":48,"author":{"gitId":"kkangs0226"},"content":"    );"},{"lineNumber":49,"author":{"gitId":"kkangs0226"},"content":"  }"},{"lineNumber":50,"author":{"gitId":"kkangs0226"},"content":"  return mainMenuTemplate;"},{"lineNumber":51,"author":{"gitId":"kkangs0226"},"content":"}"}],"authorContributionMap":{"kkangs0226":51}},{"path":"electron-utils/oauth.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { BrowserWindow, shell } from \u0027electron\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { v4 as uuid } from \u0027uuid\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"const nodeUrl \u003d require(\u0027url\u0027);"},{"lineNumber":5,"author":{"gitId":"-"},"content":"const fetch \u003d require(\u0027node-fetch\u0027);"},{"lineNumber":6,"author":{"gitId":"-"},"content":"const Logger \u003d require(\u0027electron-log\u0027);"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"const CLIENT_ID \u003d \u00276750652c0c9001314434\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"const BASE_URL \u003d \u0027https://github.com\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"const ACCESS_TOKEN_URL \u003d \u0027https://catcher-proxy.herokuapp.com/authenticate\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"const CALLBACK_URL \u003d \u0027http://localhost:4200\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"let authWindow;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Will retrieve the access token from a proxy server which acts as a intermediary to retrieve the tokens from Github."},{"lineNumber":17,"author":{"gitId":"-"},"content":" * @param window - The main window of CATcher."},{"lineNumber":18,"author":{"gitId":"-"},"content":" * @param repoPermissionLevel - The level of permission required to be granted by the user to use CATcher."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"export function getAccessToken(window: BrowserWindow, repoPermissionLevel: string): Promise\u003cany\u003e {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  return getAuthorizationCode(window, repoPermissionLevel).then((code) \u003d\u003e {"},{"lineNumber":22,"author":{"gitId":"kkangs0226"},"content":"    Logger.info(\u0027Obtained authorization code from Github\u0027);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    const accessTokenUrl \u003d `${ACCESS_TOKEN_URL}/${code}`;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    return fetch(accessTokenUrl).then(res \u003d\u003e res.json()).then(data \u003d\u003e {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      if (data.error) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        throw(new Error(data.error));"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      return data;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  }).catch(error \u003d\u003e {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    throw(error);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitId":"-"},"content":" * Get the authorization code from Github after success login."},{"lineNumber":37,"author":{"gitId":"-"},"content":" * @param parentWindow - The main window of CATcher"},{"lineNumber":38,"author":{"gitId":"-"},"content":" * @param repoPermissionLevel - The level of permission required to be granted by the user to use CATcher."},{"lineNumber":39,"author":{"gitId":"-"},"content":" */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"function getAuthorizationCode(parentWindow: BrowserWindow, repoPermissionLevel: string) {"},{"lineNumber":41,"author":{"gitId":"kkangs0226"},"content":"  let state: string;"},{"lineNumber":42,"author":{"gitId":"kkangs0226"},"content":"  state \u003d generateStateString();"},{"lineNumber":43,"author":{"gitId":"kkangs0226"},"content":"  const oauthUrl \u003d encodeURI(`${BASE_URL}/login/oauth/authorize?client_id\u003d${CLIENT_ID}\u0026scope\u003d${repoPermissionLevel},read:user\u0026state\u003d${state}`);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"  return new Promise(function (resolve, reject) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    const windowParams \u003d {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"      autoHideMenuBar: true,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"      alwaysOnTop: false,"},{"lineNumber":49,"author":{"gitId":"-"},"content":"      fullscreenable: false,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"      parent: parentWindow,"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      webPreferences: {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        nodeIntegration: true"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    authWindow \u003d new BrowserWindow(windowParams);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    authWindow.loadURL(oauthUrl);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    authWindow.show();"},{"lineNumber":58,"author":{"gitId":"kkangs0226"},"content":"    Logger.info(\u0027Opening authentication window\u0027);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    authWindow.on(\u0027closed\u0027, (event) \u003d\u003e {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      reject(new Error(\u0027WINDOW_CLOSED\u0027));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    authWindow.webContents.on(\u0027will-navigate\u0027, (event, newUrl) \u003d\u003e {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      if (newUrl.startsWith(CALLBACK_URL)) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        onCallback(newUrl);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      } else {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        event.preventDefault();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        shell.openExternal(newUrl).then(() \u003d\u003e Logger.info(\u0027External link is clicked on auth window, opening system browser...\u0027));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    authWindow.webContents.on(\u0027new-window\u0027, (event, url, frameName, disposition, options) \u003d\u003e {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"      event.preventDefault();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"      shell.openExternal(url).then(() \u003d\u003e Logger.info(\u0027External link is clicked on auth window, opening system browser...\u0027));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    authWindow.webContents.on(\u0027will-redirect\u0027, (event, newUrl) \u003d\u003e {"},{"lineNumber":79,"author":{"gitId":"kkangs0226"},"content":"      Logger.info(\u0027Received redirect in auth window\u0027);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      if (newUrl.startsWith(CALLBACK_URL)) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        onCallback(newUrl);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    function onCallback(callbackUrl: string) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"      const url_parts \u003d nodeUrl.parse(callbackUrl, true);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"      const query \u003d url_parts.query;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"      const code \u003d query.code;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"      const error \u003d query.error;"},{"lineNumber":90,"author":{"gitId":"kkangs0226"},"content":"      const returnedState \u003d query.state;"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"kkangs0226"},"content":"      if (error !\u003d\u003d undefined) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        reject(error);"},{"lineNumber":94,"author":{"gitId":"kkangs0226"},"content":"      } else if (isReturnedStateSame(state, returnedState) \u0026\u0026 code) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        resolve(code);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"      setImmediate(function () {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        authWindow.close();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        authWindow.on(\u0027closed\u0027, () \u003d\u003e {"},{"lineNumber":100,"author":{"gitId":"kkangs0226"},"content":"          Logger.info(\u0027Closing authentication window\u0027);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"          authWindow \u003d null;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":103,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":106,"author":{"gitId":"-"},"content":"}"},{"lineNumber":107,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":108,"author":{"gitId":"kkangs0226"},"content":"/**"},{"lineNumber":109,"author":{"gitId":"kkangs0226"},"content":" * Generates and assigns an unguessable random \u0027state\u0027 string to pass to Github for protection against cross-site request forgery attacks"},{"lineNumber":110,"author":{"gitId":"kkangs0226"},"content":" */"},{"lineNumber":111,"author":{"gitId":"kkangs0226"},"content":"function generateStateString(): string {"},{"lineNumber":112,"author":{"gitId":"kkangs0226"},"content":"  return uuid();"},{"lineNumber":113,"author":{"gitId":"kkangs0226"},"content":"}"},{"lineNumber":114,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":115,"author":{"gitId":"kkangs0226"},"content":"function isReturnedStateSame(state: string, returnedState: string): boolean {"},{"lineNumber":116,"author":{"gitId":"kkangs0226"},"content":"  return state \u003d\u003d\u003d returnedState;"},{"lineNumber":117,"author":{"gitId":"kkangs0226"},"content":"}"}],"authorContributionMap":{"kkangs0226":21,"-":96}},{"path":"electron-utils/supporting-logic.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"kkangs0226"},"content":"import { app } from \u0027electron\u0027;"},{"lineNumber":2,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":3,"author":{"gitId":"kkangs0226"},"content":"export function isDeveloperMode(): boolean {"},{"lineNumber":4,"author":{"gitId":"kkangs0226"},"content":"    const args \u003d process.argv.slice(1),"},{"lineNumber":5,"author":{"gitId":"kkangs0226"},"content":"    serve \u003d args.some(val \u003d\u003e val \u003d\u003d\u003d \u0027--serve\u0027);"},{"lineNumber":6,"author":{"gitId":"kkangs0226"},"content":"    return !!serve;"},{"lineNumber":7,"author":{"gitId":"kkangs0226"},"content":"}"},{"lineNumber":8,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":9,"author":{"gitId":"kkangs0226"},"content":"export function isWindowsOs(): boolean {"},{"lineNumber":10,"author":{"gitId":"kkangs0226"},"content":"    return process.platform \u003d\u003d\u003d \u0027win32\u0027;"},{"lineNumber":11,"author":{"gitId":"kkangs0226"},"content":"}"},{"lineNumber":12,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":13,"author":{"gitId":"kkangs0226"},"content":"export function isMacOs(): boolean {"},{"lineNumber":14,"author":{"gitId":"kkangs0226"},"content":"    return process.platform \u003d\u003d\u003d \u0027darwin\u0027;"},{"lineNumber":15,"author":{"gitId":"kkangs0226"},"content":"}"},{"lineNumber":16,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":17,"author":{"gitId":"kkangs0226"},"content":"export function isLinuxOs(): boolean {"},{"lineNumber":18,"author":{"gitId":"kkangs0226"},"content":"    return process.platform \u003d\u003d\u003d \u0027linux\u0027;"},{"lineNumber":19,"author":{"gitId":"kkangs0226"},"content":"}"},{"lineNumber":20,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":21,"author":{"gitId":"kkangs0226"},"content":"export function getCurrentDirectory(isWindowsOs: boolean, isDevMode: boolean): string {"},{"lineNumber":22,"author":{"gitId":"kkangs0226"},"content":"    return isWindowsOs"},{"lineNumber":23,"author":{"gitId":"kkangs0226"},"content":"    ? isDevMode"},{"lineNumber":24,"author":{"gitId":"kkangs0226"},"content":"        ? app.getAppPath()"},{"lineNumber":25,"author":{"gitId":"kkangs0226"},"content":"        : process.env.PORTABLE_EXECUTABLE_FILE"},{"lineNumber":26,"author":{"gitId":"kkangs0226"},"content":"    : app.getAppPath();"},{"lineNumber":27,"author":{"gitId":"kkangs0226"},"content":"}"},{"lineNumber":28,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":29,"author":{"gitId":"kkangs0226"},"content":"export const appTitle: string \u003d require(\u0027../package.json\u0027).name + \u0027 \u0027 + require(\u0027../package.json\u0027).version;"}],"authorContributionMap":{"kkangs0226":29}},{"path":"main.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { app, BrowserWindow, screen, Menu, nativeTheme, MenuItemConstructorOptions, ipcMain } from \u0027electron\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import * as path from \u0027path\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import * as url from \u0027url\u0027;"},{"lineNumber":4,"author":{"gitId":"kkangs0226"},"content":"import { createMenuOptions } from \u0027./electron-utils/menu-bar\u0027;"},{"lineNumber":5,"author":{"gitId":"ptvrajsk"},"content":"import { isDeveloperMode, isLinuxOs, isMacOs, appTitle } from \u0027./electron-utils/supporting-logic\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { getAccessToken } from \u0027./electron-utils/oauth\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"const Logger \u003d require(\u0027electron-log\u0027);"},{"lineNumber":9,"author":{"gitId":"-"},"content":"const ICON_PATH \u003d path.join(__dirname, \u0027dist/favicon.512x512.png\u0027);"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"let win: BrowserWindow \u003d null;"},{"lineNumber":12,"author":{"gitId":"kkangs0226"},"content":"const isDevMode \u003d isDeveloperMode();"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Will start the OAuth Web Flow and obtain the access token from Github."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"ipcMain.on(\u0027github-oauth\u0027, (event, repoPermissionLevel) \u003d\u003e {"},{"lineNumber":18,"author":{"gitId":"kkangs0226"},"content":"  Logger.info(\u0027Starting authentication\u0027);"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  getAccessToken(win, repoPermissionLevel).then((data) \u003d\u003e {"},{"lineNumber":20,"author":{"gitId":"kkangs0226"},"content":"    Logger.info(\u0027Obtained access token from Github\u0027);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    event.sender.send(\u0027github-oauth-reply\u0027, {token: data.token});"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  }).catch(error \u003d\u003e {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    event.sender.send(\u0027github-oauth-reply\u0027, {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      error: error.message,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      isWindowClosed: error.message \u003d\u003d\u003d \u0027WINDOW_CLOSED\u0027});"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":27,"author":{"gitId":"-"},"content":"});"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"function createWindow() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  Logger.info(\u0027Creating primary window.\u0027);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  const size \u003d screen.getPrimaryDisplay().workAreaSize;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  const windowOptions \u003d {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    x: 0,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    y: 0,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    width: size.width,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    height: size.height,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    webPreferences: {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"      nodeIntegration: true,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      allowRunningInsecureContent: !isDevMode,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"kkangs0226"},"content":"  if (isLinuxOs()) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    // app icon needs to be set manually on Linux platforms"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    windowOptions[\u0027icon\u0027] \u003d ICON_PATH;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"  // Create the browser window."},{"lineNumber":50,"author":{"gitId":"-"},"content":"  win \u003d new BrowserWindow(windowOptions);"},{"lineNumber":51,"author":{"gitId":"kkangs0226"},"content":"  win.setTitle(appTitle);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"  nativeTheme.themeSource \u003d \u0027light\u0027;"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"kkangs0226"},"content":"  if (isDevMode) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    require(\u0027electron-reload\u0027)(__dirname, {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      electron: require(`${__dirname}/node_modules/electron`)"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    win.loadURL(\u0027http://localhost:4200\u0027);"},{"lineNumber":60,"author":{"gitId":"kkangs0226"},"content":"    win.webContents.openDevTools();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  } else {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    win.loadURL(url.format({"},{"lineNumber":63,"author":{"gitId":"-"},"content":"      pathname: path.join(__dirname, \u0027dist/index.html\u0027),"},{"lineNumber":64,"author":{"gitId":"-"},"content":"      protocol: \u0027file:\u0027,"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      slashes: true"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"  // Emitted when the window is closed."},{"lineNumber":70,"author":{"gitId":"-"},"content":"  win.on(\u0027closed\u0027, () \u003d\u003e {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    // Dereference the window object, usually you would store window"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    // in an array if your app supports multi windows, this is the time"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    // when you should delete the corresponding element."},{"lineNumber":74,"author":{"gitId":"-"},"content":"    win \u003d null;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"try {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"  Logger.info(\u0027Initializing Electron app.\u0027);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  // This method will be called when Electron has finished"},{"lineNumber":82,"author":{"gitId":"-"},"content":"  // initialization and is ready to create browser windows."},{"lineNumber":83,"author":{"gitId":"-"},"content":"  // Some APIs can only be used after this event occurs."},{"lineNumber":84,"author":{"gitId":"-"},"content":"  app.on(\u0027ready\u0027, () \u003d\u003e {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    Logger.info(\u0027Electron app in ready state.\u0027);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    // Build and Attach Menu-bar template to application."},{"lineNumber":87,"author":{"gitId":"kkangs0226"},"content":"    const mainMenuTemplate: MenuItemConstructorOptions[] \u003d createMenuOptions(isDevMode);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    const mainMenu \u003d Menu.buildFromTemplate(mainMenuTemplate);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    Menu.setApplicationMenu(mainMenu);"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    createWindow();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"  // Quit when all windows are closed."},{"lineNumber":95,"author":{"gitId":"-"},"content":"  app.on(\u0027window-all-closed\u0027, () \u003d\u003e {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    Logger.info(\u0027Closing all windows in Electron.\u0027);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    // On OS X it is common for applications and their menu bar"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    // to stay active until the user quits explicitly with Cmd + Q"},{"lineNumber":99,"author":{"gitId":"kkangs0226"},"content":"    if (!isMacOs()) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      app.quit();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"  app.on(\u0027activate\u0027, () \u003d\u003e {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    Logger.info(\u0027Electron app is activated.\u0027);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    // On OS X it\u0027s common to re-create a window in the app when the"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    // dock icon is clicked and there are no other windows open."},{"lineNumber":108,"author":{"gitId":"-"},"content":"    if (win \u003d\u003d\u003d null) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"      createWindow();"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"} catch (e) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"  Logger.error(\u0027Something went wrong in Electron.\u0027, e);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kkangs0226":10,"ptvrajsk":1,"-":104}},{"path":"src/app/app.module.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import \u0027reflect-metadata\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import \u0027../polyfills\u0027;"},{"lineNumber":3,"author":{"gitId":"ptvrajsk"},"content":"import { BrowserModule, Title } from \u0027@angular/platform-browser\u0027;"},{"lineNumber":4,"author":{"gitId":"ptvrajsk"},"content":"import { ErrorHandler, NgModule, NgZone } from \u0027@angular/core\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { AppRoutingModule } from \u0027./app-routing.module\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { MarkdownModule, MarkedOptions } from \u0027ngx-markdown\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { AppComponent } from \u0027./app.component\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { SharedModule } from \u0027./shared/shared.module\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { HeaderComponent } from \u0027./shared/layout\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { AuthModule } from \u0027./auth/auth.module\u0027;"},{"lineNumber":11,"author":{"gitId":"ptvrajsk"},"content":"import { HttpClient, HttpClientModule } from \u0027@angular/common/http\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { PhaseTeamResponseModule } from \u0027./phase-team-response/phase-team-response.module\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { PhaseModerationModule } from \u0027./phase-moderation/phase-moderation.module\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { PhaseBugReportingModule } from \u0027./phase-bug-reporting/phase-bug-reporting.module\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { BrowserAnimationsModule } from \u0027@angular/platform-browser/animations\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import { UserConfirmationComponent } from \u0027./core/guards/user-confirmation/user-confirmation.component\u0027;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import { PhaseTesterResponseModule } from \u0027./phase-tester-response/phase-tester-response.module\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import { SessionFixConfirmationComponent } from \u0027./core/services/session-fix-confirmation/session-fix-confirmation.component\u0027;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import { HttpLink, HttpLinkModule } from \u0027apollo-angular-link-http\u0027;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import { AuthService } from \u0027./core/services/auth.service\u0027;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import { setContext } from \u0027apollo-link-context\u0027;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import { ApolloLink } from \u0027apollo-link\u0027;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import { InMemoryCache, IntrospectionFragmentMatcher } from \u0027apollo-cache-inmemory\u0027;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import { Apollo, ApolloModule } from \u0027apollo-angular\u0027;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import graphqlTypes from \u0027../../graphql/graphql-types\u0027;"},{"lineNumber":26,"author":{"gitId":"ptvrajsk"},"content":"import { GithubService } from \u0027./core/services/github.service\u0027;"},{"lineNumber":27,"author":{"gitId":"ptvrajsk"},"content":"import { ErrorHandlingService } from \u0027./core/services/error-handling.service\u0027;"},{"lineNumber":28,"author":{"gitId":"ptvrajsk"},"content":"import { ElectronService } from \u0027./core/services/electron.service\u0027;"},{"lineNumber":29,"author":{"gitId":"ptvrajsk"},"content":"import { GithubServiceFactory } from \u0027./core/services/factories/factory.github.service\u0027;"},{"lineNumber":30,"author":{"gitId":"ptvrajsk"},"content":"import { AuthServiceFactory } from \u0027./core/services/factories/factory.auth.service\u0027;"},{"lineNumber":31,"author":{"gitId":"ptvrajsk"},"content":"import { Router } from \u0027@angular/router\u0027;"},{"lineNumber":32,"author":{"gitId":"ptvrajsk"},"content":"import { UserService } from \u0027./core/services/user.service\u0027;"},{"lineNumber":33,"author":{"gitId":"ptvrajsk"},"content":"import { IssueService } from \u0027./core/services/issue.service\u0027;"},{"lineNumber":34,"author":{"gitId":"ptvrajsk"},"content":"import { PhaseService } from \u0027./core/services/phase.service\u0027;"},{"lineNumber":35,"author":{"gitId":"ptvrajsk"},"content":"import { LabelService } from \u0027./core/services/label.service\u0027;"},{"lineNumber":36,"author":{"gitId":"ptvrajsk"},"content":"import { DataService } from \u0027./core/services/data.service\u0027;"},{"lineNumber":37,"author":{"gitId":"ptvrajsk"},"content":"import { GithubEventService } from \u0027./core/services/githubevent.service\u0027;"},{"lineNumber":38,"author":{"gitId":"ptvrajsk"},"content":"import { LoggingService } from \u0027./core/services/logging.service\u0027;"},{"lineNumber":39,"author":{"gitId":"ptvrajsk"},"content":"import { IssueServiceFactory } from \u0027./core/services/factories/factory.issue.service\u0027;"},{"lineNumber":40,"author":{"gitId":"ptvrajsk"},"content":"import { PermissionService } from \u0027./core/services/permission.service\u0027;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"@NgModule({"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  declarations: ["},{"lineNumber":44,"author":{"gitId":"-"},"content":"    AppComponent,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    HeaderComponent,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    UserConfirmationComponent,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    SessionFixConfirmationComponent"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  ],"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  imports: ["},{"lineNumber":50,"author":{"gitId":"-"},"content":"    BrowserModule,"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    PhaseTesterResponseModule,"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    BrowserAnimationsModule,"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    AuthModule,"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    PhaseBugReportingModule,"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    PhaseTeamResponseModule,"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    PhaseModerationModule,"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    SharedModule,"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    HttpClientModule,"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    MarkdownModule.forRoot({"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      markedOptions: {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        provide: MarkedOptions,"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        useValue: {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"          gfm: true,"},{"lineNumber":64,"author":{"gitId":"-"},"content":"          tables: true,"},{"lineNumber":65,"author":{"gitId":"-"},"content":"          breaks: true,"},{"lineNumber":66,"author":{"gitId":"-"},"content":"          pedantic: false,"},{"lineNumber":67,"author":{"gitId":"-"},"content":"          sanitize: false,"},{"lineNumber":68,"author":{"gitId":"-"},"content":"          smartLists: true,"},{"lineNumber":69,"author":{"gitId":"-"},"content":"          smartypants: true,"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }),"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    AppRoutingModule,"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    ApolloModule,"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    HttpLinkModule,"},{"lineNumber":76,"author":{"gitId":"-"},"content":"  ],"},{"lineNumber":77,"author":{"gitId":"ptvrajsk"},"content":"  providers: ["},{"lineNumber":78,"author":{"gitId":"ptvrajsk"},"content":"    {"},{"lineNumber":79,"author":{"gitId":"ptvrajsk"},"content":"      provide: GithubService,"},{"lineNumber":80,"author":{"gitId":"ptvrajsk"},"content":"      useFactory: GithubServiceFactory,"},{"lineNumber":81,"author":{"gitId":"ptvrajsk"},"content":"      deps: [ErrorHandlingService, Apollo, ElectronService]"},{"lineNumber":82,"author":{"gitId":"ptvrajsk"},"content":"    },"},{"lineNumber":83,"author":{"gitId":"ptvrajsk"},"content":"    {"},{"lineNumber":84,"author":{"gitId":"ptvrajsk"},"content":"      provide: AuthService,"},{"lineNumber":85,"author":{"gitId":"ptvrajsk"},"content":"      useFactory: AuthServiceFactory,"},{"lineNumber":86,"author":{"gitId":"ptvrajsk"},"content":"      deps: [ElectronService, Router, NgZone, HttpClient,"},{"lineNumber":87,"author":{"gitId":"ptvrajsk"},"content":"      ErrorHandlingService, GithubService, UserService,"},{"lineNumber":88,"author":{"gitId":"ptvrajsk"},"content":"      IssueService, PhaseService, LabelService, DataService,"},{"lineNumber":89,"author":{"gitId":"ptvrajsk"},"content":"      GithubEventService, Title, LoggingService]"},{"lineNumber":90,"author":{"gitId":"ptvrajsk"},"content":"    },"},{"lineNumber":91,"author":{"gitId":"ptvrajsk"},"content":"    {"},{"lineNumber":92,"author":{"gitId":"ptvrajsk"},"content":"      provide: IssueService,"},{"lineNumber":93,"author":{"gitId":"ptvrajsk"},"content":"      useFactory: IssueServiceFactory,"},{"lineNumber":94,"author":{"gitId":"ptvrajsk"},"content":"      deps: [GithubService, UserService, PhaseService,"},{"lineNumber":95,"author":{"gitId":"dingyuchen"},"content":"      PermissionService, ErrorHandlingService, ElectronService, DataService]"},{"lineNumber":96,"author":{"gitId":"ptvrajsk"},"content":"    },"},{"lineNumber":97,"author":{"gitId":"ptvrajsk"},"content":"    {"},{"lineNumber":98,"author":{"gitId":"ptvrajsk"},"content":"      provide: ErrorHandler,"},{"lineNumber":99,"author":{"gitId":"ptvrajsk"},"content":"      useClass: ErrorHandlingService"},{"lineNumber":100,"author":{"gitId":"ptvrajsk"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"ptvrajsk"},"content":"  ],"},{"lineNumber":102,"author":{"gitId":"-"},"content":"  bootstrap: [AppComponent],"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  entryComponents: ["},{"lineNumber":104,"author":{"gitId":"-"},"content":"    UserConfirmationComponent,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    SessionFixConfirmationComponent"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  ]"},{"lineNumber":107,"author":{"gitId":"-"},"content":"})"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"export class AppModule {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"  constructor(private apollo: Apollo, private httpLink: HttpLink, private authService: AuthService) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    const URI \u003d \u0027https://api.github.com/graphql\u0027;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    const basic \u003d setContext(() \u003d\u003e {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"      return { headers: {Accept: \u0027charset\u003dutf-8\u0027 }};"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    const auth \u003d setContext(() \u003d\u003e {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"      return { headers: { Authorization: `Token ${this.authService.accessToken.getValue()}` } };"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    const link \u003d ApolloLink.from([basic, auth, this.httpLink.create({ uri: URI })]);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    const fragmentMatcher \u003d new IntrospectionFragmentMatcher({"},{"lineNumber":121,"author":{"gitId":"-"},"content":"      introspectionQueryResultData: graphqlTypes"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    const cache \u003d new InMemoryCache({ fragmentMatcher });"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    apollo.create({"},{"lineNumber":125,"author":{"gitId":"-"},"content":"      link: link,"},{"lineNumber":126,"author":{"gitId":"-"},"content":"      cache: cache,"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":128,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":129,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dingyuchen":1,"ptvrajsk":42,"-":86}},{"path":"src/app/auth/auth.component.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003cdiv *ngIf\u003d\"!isReady\" class\u003d\"centralize\"\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \u003cmat-spinner [diameter]\u003d\"47\"\u003e\u003c/mat-spinner\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003cdiv *ngIf\u003d\"isReady \u0026\u0026 isAppOutdated\" class\u003d\"centralize\"\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  \u003cspan class\u003d\"error-text\"\u003e You are using an outdated version of CATcher. \u003cbr/\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    Please download the latest version of CATcher \u003ca [href]\u003d\"appService.latestReleaseUrl\"\u003e here\u003c/a\u003e."},{"lineNumber":8,"author":{"gitId":"-"},"content":"  \u003c/span\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cdiv *ngIf\u003d\"isReady \u0026\u0026 versionCheckingError\" class\u003d\"centralize\"\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  \u003cspan class\u003d\"error-text\"\u003e Unable to verify CATcher\u0027s version. \u003cbr/\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    Please click \u003ca href\u003d\"#\" (click)\u003d\"checkAppIsOutdated()\"\u003ehere\u003c/a\u003e to try again"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  \u003c/span\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003cdiv *ngIf\u003d\"isReady \u0026\u0026 !versionCheckingError \u0026\u0026 !isAppOutdated\"\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003cdiv *ngIf\u003d\"isUserNotAuthenticated()\" class\u003d\"login-page\"\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \u003cmat-card class\u003d\"login-card\"\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003cmat-card-header style\u003d\"margin-bottom: 20px;\"\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        \u003cmat-card-title class\u003d\"login-title\"\u003e Select Your Session \u003c/mat-card-title\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      \u003c/mat-card-header\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003cform [formGroup]\u003d\"profileForm\" (ngSubmit)\u003d\"setupSession()\"\u003e"},{"lineNumber":25,"author":{"gitId":"ptvrajsk"},"content":"        \u003capp-profiles class\u003d\"login-field\" (selectedProfileEmitter)\u003d\"onProfileSelect($event)\"\u003e\u003c/app-profiles\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        \u003cmat-card-content\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"          \u003cmat-form-field class\u003d\"login-field\"\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            \u003cinput matInput placeholder\u003d\"Settings Location (Org/Repo)\" formControlName\u003d\"session\" required\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          \u003c/mat-form-field\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cmat-card-actions\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cbutton *ngIf\u003d\"!isSettingUpSession\" class\u003d\"sign-in-button\" type\u003d\"submit\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"                    [disabled]\u003d\"profileForm.invalid || isSettingUpSession\" mat-stroked-button color\u003d\"primary\"\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"              \u003cdiv\u003eSubmit\u003c/div\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            \u003c/button\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            \u003cdiv *ngIf\u003d\"isSettingUpSession\" class\u003d\"spinner-centralize\"\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"              \u003cmat-spinner [diameter]\u003d\"47\"\u003e\u003c/mat-spinner\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            \u003c/div\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003c/mat-card-actions\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003c/mat-card-content\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      \u003c/form\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \u003c/mat-card\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"  \u003cdiv *ngIf\u003d\"isUserAuthenticating() || isAwaitingOAuthUserConfirm()\" class\u003d\"login-page\"\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    \u003cmat-card class\u003d\"login-card\"\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"      \u003cmat-card-header style\u003d\"margin-bottom: 20px;\"\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        \u003cmat-card-title class\u003d\"login-title\"\u003e Confirm Login Account \u003c/mat-card-title\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        \u003cmat-card-subtitle\u003e Session on {{currentSessionOrg}} \u003c/mat-card-subtitle\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"      \u003c/mat-card-header\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"      \u003cdiv style\u003d\"position: absolute; top: 15px; left: 15px\"\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        \u003cbutton mat-icon-button (click)\u003d\"goToSessionSelect()\" [disabled]\u003d\"isUserAuthenticating()\" class\u003d\"mat-primary\"\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"          \u003cmat-icon\u003earrow_back_ios\u003c/mat-icon\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        \u003c/button\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"      \u003cdiv *ngIf\u003d\"!isUserAuthenticating()\"\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        \u003cbutton mat-stroked-button class\u003d\"sign-in-button\" color\u003d\"primary\" (click)\u003d\"completeLoginProcess(currentUserName)\""},{"lineNumber":60,"author":{"gitId":"-"},"content":"                [disabled]\u003d\"isUserAuthenticating()\"\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"          \u003cspan class\u003d\"logo\"\u003e \u003cimg class\u003d\"github-logo\" src\u003d\"./assets/images/github-logo.png\" alt\u003d\"github-logo\"\u003e \u003c/span\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"          \u003cspan\u003e Continue as {{this.currentUserName}} \u003c/span\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        \u003c/button\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        \u003cbutton *ngIf\u003d\"electronService.isElectron()\" mat-button style\u003d\"margin-top: 10px; margin-bottom: 10px;\" [disabled]\u003d\"isUserAuthenticating()\""},{"lineNumber":66,"author":{"gitId":"-"},"content":"                (click)\u003d\"logIntoAnotherAccount()\"\u003e Log in to another account \u003c/button\u003e"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        \u003cdiv *ngIf\u003d\"!electronService.isElectron()\" class\u003d\"mat-body-1\" style\u003d\"margin-top: 20px;\"\u003e"},{"lineNumber":68,"author":{"gitId":"-"},"content":"          To change account, please sign into the desired account from the"},{"lineNumber":69,"author":{"gitId":"-"},"content":"          \u003ca href\u003d\"https://github.com/\" (click)\u003d\"onGithubWebsiteClicked()\"\u003eofficial Github website\u003c/a\u003e."},{"lineNumber":70,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":72,"author":{"gitId":"-"},"content":"      \u003cdiv *ngIf\u003d\"isUserAuthenticating()\" class\u003d\"spinner-centralize\"\u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        \u003cmat-spinner [diameter]\u003d\"47\"\u003e\u003c/mat-spinner\u003e"},{"lineNumber":74,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    \u003c/mat-card\u003e"},{"lineNumber":76,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003c/div\u003e"}],"authorContributionMap":{"ptvrajsk":1,"-":76}},{"path":"src/app/auth/auth.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, HostListener, NgZone, OnDestroy, OnInit } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { AuthService, AuthState } from \u0027../core/services/auth.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { Subscription } from \u0027rxjs\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { FormBuilder, FormGroup, Validators } from \u0027@angular/forms\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../core/services/error-handling.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { ActivatedRoute, Router } from \u0027@angular/router\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027../core/services/github.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../core/services/phase.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { Title } from \u0027@angular/platform-browser\u0027;"},{"lineNumber":10,"author":{"gitId":"dingyuchen"},"content":"import { Profile } from \u0027../core/models/profile.model\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { filter, flatMap } from \u0027rxjs/operators\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../core/services/user.service\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { GithubEventService } from \u0027../core/services/githubevent.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { ElectronService } from \u0027../core/services/electron.service\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { ApplicationService } from \u0027../core/services/application.service\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import { throwIfFalse } from \u0027../shared/lib/custom-ops\u0027;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import { AppConfig } from \u0027../../environments/environment\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import { GithubUser } from \u0027../core/models/github-user.model\u0027;"},{"lineNumber":19,"author":{"gitId":"ptvrajsk"},"content":"import { LoggingService } from \u0027../core/services/logging.service\u0027;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  selector: \u0027app-auth\u0027,"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./auth.component.html\u0027,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./auth.component.css\u0027]"},{"lineNumber":25,"author":{"gitId":"-"},"content":"})"},{"lineNumber":26,"author":{"gitId":"-"},"content":"export class AuthComponent implements OnInit, OnDestroy {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  // isReady is used to indicate whether the pre-processing of application is done."},{"lineNumber":28,"author":{"gitId":"-"},"content":"  isReady: boolean;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  // isSettingUpSession is used to indicate whether CATcher is in the midst of setting up the session."},{"lineNumber":30,"author":{"gitId":"-"},"content":"  isSettingUpSession: boolean;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"  // Errors"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  isAppOutdated: boolean;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  versionCheckingError: boolean;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"  authState: AuthState;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  accessTokenSubscription: Subscription;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  authStateSubscription: Subscription;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  profileForm: FormGroup;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  currentUserName: string;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"  constructor(public appService: ApplicationService,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"              public electronService: ElectronService,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"              private githubService: GithubService,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"              private authService: AuthService,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"              private githubEventService: GithubEventService,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"              private userService: UserService,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"              private formBuilder: FormBuilder,"},{"lineNumber":49,"author":{"gitId":"-"},"content":"              private errorHandlingService: ErrorHandlingService,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"              private router: Router,"},{"lineNumber":51,"author":{"gitId":"-"},"content":"              private phaseService: PhaseService,"},{"lineNumber":52,"author":{"gitId":"-"},"content":"              private titleService: Title,"},{"lineNumber":53,"author":{"gitId":"-"},"content":"              private ngZone: NgZone,"},{"lineNumber":54,"author":{"gitId":"kkangs0226"},"content":"              private activatedRoute: ActivatedRoute,"},{"lineNumber":55,"author":{"gitId":"kkangs0226"},"content":"              private logger: LoggingService"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  ) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    this.electronService.registerIpcListener(\u0027github-oauth-reply\u0027,"},{"lineNumber":58,"author":{"gitId":"-"},"content":"      (event, {token, error, isWindowClosed}) \u003d\u003e {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      this.ngZone.run(() \u003d\u003e {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (error) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"          if (!isWindowClosed) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            this.errorHandlingService.handleError(error);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"          this.goToSessionSelect();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"          return;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.authService.storeOAuthAccessToken(token);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":73,"author":{"gitId":"kkangs0226"},"content":"    this.logger.startSession();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    this.isReady \u003d false;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    const oauthCode \u003d this.activatedRoute.snapshot.queryParamMap.get(\u0027code\u0027);"},{"lineNumber":76,"author":{"gitId":"kkangs0226"},"content":"    const state \u003d this.activatedRoute.snapshot.queryParamMap.get(\u0027state\u0027);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    if (this.authService.isAuthenticated()) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"      this.router.navigate([this.phaseService.currentPhase]);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    if (oauthCode) { // In the web\u0027s oauth window"},{"lineNumber":84,"author":{"gitId":"kkangs0226"},"content":"      this.logger.info(\u0027Obtained authorisation code from Github\u0027);"},{"lineNumber":85,"author":{"gitId":"kkangs0226"},"content":"      window.opener.postMessage({ oauthCode, state }, AppConfig.origin);"},{"lineNumber":86,"author":{"gitId":"kkangs0226"},"content":"      this.logger.info(\u0027Sent authorisation code and state to main application window, waiting to close\u0027);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"      this.listenForCloseOAuthWindowMessage();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    } else { // In the main app window"},{"lineNumber":89,"author":{"gitId":"-"},"content":"      this.checkAppIsOutdated();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"      this.initAccessTokenSubscription();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"      this.initAuthStateSubscription();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"      this.initProfileForm();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"   * A listener for receiving the oauthCode from the oauth window."},{"lineNumber":98,"author":{"gitId":"-"},"content":"   * With the oauth code, we can retrieve the accessToken from the proxy."},{"lineNumber":99,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  @HostListener(\u0027window:message\u0027, [\u0027$event\u0027])"},{"lineNumber":101,"author":{"gitId":"-"},"content":"  onMessage(event: MessageEvent) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    if (event.origin !\u003d\u003d AppConfig.origin) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":106,"author":{"gitId":"kkangs0226"},"content":"    const { oauthCode, state } \u003d event.data;"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    if (!oauthCode) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":112,"author":{"gitId":"kkangs0226"},"content":"    if (!this.authService.isReturnedStateSame(state)) {"},{"lineNumber":113,"author":{"gitId":"kkangs0226"},"content":"      this.logger.info(`Received incorrect state ${state}, continue waiting for correct state`);"},{"lineNumber":114,"author":{"gitId":"kkangs0226"},"content":"      return;"},{"lineNumber":115,"author":{"gitId":"kkangs0226"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":117,"author":{"gitId":"kkangs0226"},"content":"    this.logger.info(\u0027Retrieving access token from Github\u0027);"},{"lineNumber":118,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    const accessTokenUrl \u003d `${AppConfig.accessTokenUrl}/${oauthCode}/client_id/${AppConfig.clientId}`;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    fetch(accessTokenUrl).then(res \u003d\u003e res.json())"},{"lineNumber":121,"author":{"gitId":"-"},"content":"      .then(data \u003d\u003e {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"          if (data.error) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            throw(new Error(data.error));"},{"lineNumber":124,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":125,"author":{"gitId":"-"},"content":"          this.authService.storeOAuthAccessToken(data.token);"},{"lineNumber":126,"author":{"gitId":"kkangs0226"},"content":"          this.logger.info(\u0027Sucessfully obtained access token\u0027);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"-"},"content":"      )"},{"lineNumber":129,"author":{"gitId":"-"},"content":"      .catch(err \u003d\u003e {"},{"lineNumber":130,"author":{"gitId":"kkangs0226"},"content":"        this.logger.info(`Error in data fetched from access token URL: ${err}`);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        this.errorHandlingService.handleError(err);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        this.authService.changeAuthState(AuthState.NotAuthenticated);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      .finally(() \u003d\u003e {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        if (!(event.source instanceof MessagePort) \u0026\u0026 !(event.source instanceof ServiceWorker)) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"          event.source.postMessage(\u0027close\u0027, AppConfig.origin);"},{"lineNumber":137,"author":{"gitId":"kkangs0226"},"content":"          this.logger.info(\u0027Closing authentication window\u0027);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":140,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"  ngOnDestroy() {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    this.electronService.removeIpcListeners(\u0027github-oauth-reply\u0027);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    if (this.authStateSubscription) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"      this.authStateSubscription.unsubscribe();"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    if (this.accessTokenSubscription) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"      this.accessTokenSubscription.unsubscribe();"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":153,"author":{"gitId":"-"},"content":"   * Checks whether the current version of CATcher is outdated."},{"lineNumber":154,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":155,"author":{"gitId":"-"},"content":"  checkAppIsOutdated(): void {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    this.appService.isApplicationOutdated().subscribe((isOutdated: boolean) \u003d\u003e {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"      this.isAppOutdated \u003d isOutdated;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"      this.isReady \u003d true;"},{"lineNumber":159,"author":{"gitId":"-"},"content":"      this.versionCheckingError \u003d false;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }, (error) \u003d\u003e {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"      this.errorHandlingService.handleError(error);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"      this.isReady \u003d true;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"      this.versionCheckingError \u003d true;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":168,"author":{"gitId":"-"},"content":"   * Fills the login form with data from the given Profile."},{"lineNumber":169,"author":{"gitId":"-"},"content":"   * @param profile - Profile selected by the user."},{"lineNumber":170,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  onProfileSelect(profile: Profile): void {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    this.profileForm.get(\u0027session\u0027).setValue(profile.encodedText);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":176,"author":{"gitId":"-"},"content":"   * Will complete the process of logging in the given user."},{"lineNumber":177,"author":{"gitId":"-"},"content":"   * @param username - The user to log in."},{"lineNumber":178,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":179,"author":{"gitId":"-"},"content":"  completeLoginProcess(username: string): void {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    this.authService.changeAuthState(AuthState.AwaitingAuthentication);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    this.phaseService.setPhaseOwners(this.currentSessionOrg, username);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    this.userService.createUserModel(username).pipe("},{"lineNumber":183,"author":{"gitId":"-"},"content":"      flatMap(() \u003d\u003e this.phaseService.sessionSetup()),"},{"lineNumber":184,"author":{"gitId":"-"},"content":"      flatMap(() \u003d\u003e this.githubEventService.setLatestChangeEvent()),"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    ).subscribe(() \u003d\u003e {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"      this.handleAuthSuccess();"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }, (error) \u003d\u003e {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"      this.authService.changeAuthState(AuthState.NotAuthenticated);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"      this.errorHandlingService.handleError(error);"},{"lineNumber":190,"author":{"gitId":"kkangs0226"},"content":"      this.logger.info(`Completion of login process failed with an error: ${error}`);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":192,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"  setupSession() {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    if (this.profileForm.invalid) {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    this.isSettingUpSession \u003d true;"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    const sessionInformation: string \u003d this.profileForm.get(\u0027session\u0027).value;"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    const org: string \u003d this.getOrgDetails(sessionInformation);"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    const dataRepo: string \u003d this.getDataRepoDetails(sessionInformation);"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    this.githubService.storeOrganizationDetails(org, dataRepo);"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"    this.phaseService.storeSessionData().pipe("},{"lineNumber":205,"author":{"gitId":"-"},"content":"      throwIfFalse(isValidSession \u003d\u003e isValidSession,"},{"lineNumber":206,"author":{"gitId":"-"},"content":"                   () \u003d\u003e new Error(\u0027Invalid Session\u0027))"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    ).subscribe(() \u003d\u003e {"},{"lineNumber":208,"author":{"gitId":"kkangs0226"},"content":"      try {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        this.authService.startOAuthProcess();"},{"lineNumber":210,"author":{"gitId":"kkangs0226"},"content":"      } catch (error) {"},{"lineNumber":211,"author":{"gitId":"kkangs0226"},"content":"        this.errorHandlingService.handleError(error);"},{"lineNumber":212,"author":{"gitId":"kkangs0226"},"content":"        this.authService.changeAuthState(AuthState.NotAuthenticated);"},{"lineNumber":213,"author":{"gitId":"kkangs0226"},"content":"      }"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }, (error) \u003d\u003e {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"      this.errorHandlingService.handleError(error);"},{"lineNumber":216,"author":{"gitId":"-"},"content":"      this.isSettingUpSession \u003d false;"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    }, () \u003d\u003e this.isSettingUpSession \u003d false);"},{"lineNumber":218,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"  logIntoAnotherAccount() {"},{"lineNumber":221,"author":{"gitId":"kkangs0226"},"content":"    this.logger.info(\u0027Logging into another account\u0027);"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    this.electronService.clearCookies();"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    this.authService.startOAuthProcess();"},{"lineNumber":224,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"  onGithubWebsiteClicked() {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    window.open(\u0027https://github.com/\u0027, \u0027_blank\u0027);"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    window.location.reload();"},{"lineNumber":229,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":232,"author":{"gitId":"-"},"content":"   * Handles the clean up required after authentication and setting up of user data is completed."},{"lineNumber":233,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":234,"author":{"gitId":"-"},"content":"  handleAuthSuccess() {"},{"lineNumber":235,"author":{"gitId":"kkangs0226"},"content":"    this.authService.setTitleWithPhaseDetail();"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    this.router.navigateByUrl(this.phaseService.currentPhase);"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    this.authService.changeAuthState(AuthState.Authenticated);"},{"lineNumber":238,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"  goToSessionSelect() {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    this.authService.changeAuthState(AuthState.NotAuthenticated);"},{"lineNumber":242,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"  isUserNotAuthenticated(): boolean {"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    return this.authState \u003d\u003d\u003d AuthState.NotAuthenticated;"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"  isUserAuthenticating(): boolean {"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    return this.authState \u003d\u003d\u003d AuthState.AwaitingAuthentication;"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"  isAwaitingOAuthUserConfirm(): boolean {"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    return this.authState \u003d\u003d\u003d AuthState.ConfirmOAuthUser;"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"  get currentSessionOrg(): string {"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    const sessionInformation: string \u003d this.profileForm.get(\u0027session\u0027).value;"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    return this.getOrgDetails(sessionInformation);"},{"lineNumber":259,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":260,"author":{"gitId":"-"},"content":""},{"lineNumber":261,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":262,"author":{"gitId":"-"},"content":"   * Will wait for the message from parent window to close the window."},{"lineNumber":263,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  private listenForCloseOAuthWindowMessage() {"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    window.addEventListener(\u0027message\u0027, (event) \u003d\u003e {"},{"lineNumber":266,"author":{"gitId":"-"},"content":"      if (event.origin !\u003d\u003d AppConfig.origin) {"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        return;"},{"lineNumber":268,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":269,"author":{"gitId":"-"},"content":"      if (event.data \u003d\u003d\u003d \u0027close\u0027) {"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        window.opener.focus();"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        window.close();"},{"lineNumber":272,"author":{"gitId":"kkangs0226"},"content":"        this.logger.info(\u0027Closed authentication window\u0027);"},{"lineNumber":273,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":278,"author":{"gitId":"-"},"content":"   * Extracts the Organization Details from the input sessionInformation."},{"lineNumber":279,"author":{"gitId":"-"},"content":"   * @param sessionInformation - string in the format of \u0027orgName/dataRepo\u0027"},{"lineNumber":280,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  private getOrgDetails(sessionInformation: string) {"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    return sessionInformation.split(\u0027/\u0027)[0];"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":286,"author":{"gitId":"-"},"content":"   * Extracts the Data Repository Details from the input sessionInformation."},{"lineNumber":287,"author":{"gitId":"-"},"content":"   * @param sessionInformation - string in the format of \u0027orgName/dataRepo\u0027"},{"lineNumber":288,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  private getDataRepoDetails(sessionInformation: string) {"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    return sessionInformation.split(\u0027/\u0027)[1];"},{"lineNumber":291,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"  private initProfileForm() {"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    this.profileForm \u003d this.formBuilder.group({"},{"lineNumber":295,"author":{"gitId":"-"},"content":"      session: [\u0027\u0027, Validators.required],"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":297,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"-"},"content":"  private initAuthStateSubscription() {"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    this.authStateSubscription \u003d this.authService.currentAuthState.subscribe((state) \u003d\u003e {"},{"lineNumber":301,"author":{"gitId":"-"},"content":"      this.ngZone.run(() \u003d\u003e {"},{"lineNumber":302,"author":{"gitId":"-"},"content":"        this.authState \u003d state;"},{"lineNumber":303,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":305,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":306,"author":{"gitId":"-"},"content":""},{"lineNumber":307,"author":{"gitId":"-"},"content":"  private initAccessTokenSubscription() {"},{"lineNumber":308,"author":{"gitId":"-"},"content":"    this.accessTokenSubscription \u003d this.authService.accessToken.pipe("},{"lineNumber":309,"author":{"gitId":"-"},"content":"      filter((token: string) \u003d\u003e !!token),"},{"lineNumber":310,"author":{"gitId":"-"},"content":"      flatMap(() \u003d\u003e this.userService.getAuthenticatedUser())"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    ).subscribe((user: GithubUser) \u003d\u003e {"},{"lineNumber":312,"author":{"gitId":"-"},"content":"      this.ngZone.run(() \u003d\u003e {"},{"lineNumber":313,"author":{"gitId":"-"},"content":"        this.currentUserName \u003d user.login;"},{"lineNumber":314,"author":{"gitId":"-"},"content":"        this.authService.changeAuthState(AuthState.ConfirmOAuthUser);"},{"lineNumber":315,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":317,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":318,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kkangs0226":29,"dingyuchen":1,"ptvrajsk":1,"-":287}},{"path":"src/app/auth/profiles/json-parse-error-dialog/json-parse-error-dialog.component.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003ch1 mat-dialog-title\u003eError in \"profiles.json\" format\u003c/h1\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cdiv mat-dialog-content\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \u003cp align\u003d\"center\" style\u003d\"max-width: 390px;\" \u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    The format of the \"profiles.json\" file is not as required."},{"lineNumber":5,"author":{"gitId":"dingyuchen"},"content":"    You might not have included \u003ccode\u003eprofileName\u003c/code\u003e and \u003ccode\u003eencodedText\u003c/code\u003e keys."},{"lineNumber":6,"author":{"gitId":"-"},"content":"    Please refer to our User Guide for the correct format."},{"lineNumber":7,"author":{"gitId":"-"},"content":"  \u003c/p\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003cdiv mat-dialog-actions align\u003d\"center\"\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  \u003cbutton mat-raised-button color\u003d\"primary\" (click)\u003d\"onClick()\"\u003eOk\u003c/button\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c/div\u003e"}],"authorContributionMap":{"dingyuchen":1,"-":10}},{"path":"src/app/auth/profiles/profiles.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, EventEmitter, OnInit, Output } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { MatDialog } from \u0027@angular/material\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { JsonParseErrorDialogComponent } from \u0027./json-parse-error-dialog/json-parse-error-dialog.component\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  trigger,"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  state,"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  style,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  animate,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  transition"},{"lineNumber":10,"author":{"gitId":"-"},"content":"} from \u0027@angular/animations\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { AppConfig } from \u0027../../../environments/environment\u0027;"},{"lineNumber":12,"author":{"gitId":"dingyuchen"},"content":"import { Profile, isValidProfile } from \u0027../../core/models/profile.model\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  selector: \u0027app-profiles\u0027,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./profiles.component.html\u0027,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./profiles.component.css\u0027],"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  animations: ["},{"lineNumber":19,"author":{"gitId":"-"},"content":"    // animation triggers go here"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    trigger(\u0027triggerFileInput\u0027, ["},{"lineNumber":21,"author":{"gitId":"-"},"content":"      state(\u0027normal\u0027, style({})),"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      state(\u0027pressed\u0027, style({"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        color: \u0027orange\u0027"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      })),"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      transition(\u0027normal \u003d\u003e pressed\u0027, ["},{"lineNumber":26,"author":{"gitId":"-"},"content":"        animate(\u00270.25s ease\u0027)"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      ]),"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      transition(\u0027pressed \u003d\u003e normal\u0027, ["},{"lineNumber":29,"author":{"gitId":"-"},"content":"        animate(\u00270.25s ease\u0027)"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      ])"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    ])"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  ]"},{"lineNumber":33,"author":{"gitId":"-"},"content":"})"},{"lineNumber":34,"author":{"gitId":"-"},"content":"export class ProfilesComponent implements OnInit {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  private readonly ANIMATION_DURATION: number \u003d 250;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"  profiles: Profile[] \u003d []; // List of profiles taken from profiles.json"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  blankProfile: Profile \u003d {profileName: \u0027\u0027, encodedText: \u0027\u0027}; // A blank profile to reset values"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  animationActivated \u003d false; // Assists color change animations."},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"  selectedProfile: Profile \u003d this.blankProfile;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  @Output() selectedProfileEmitter: EventEmitter\u003cProfile\u003e \u003d new EventEmitter\u003cProfile\u003e();"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"  profilesData \u003d {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    isDirectoryMessageVisible: false,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    fileName: null,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    fileDirectory: null"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"  constructor(public errorDialog: MatDialog) { }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":53,"author":{"gitId":"ptvrajsk"},"content":"    this.initProfiles();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"   * Activates the button selection animation and opens the file selector."},{"lineNumber":58,"author":{"gitId":"-"},"content":"   * @param fileInput - OS default file selector."},{"lineNumber":59,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  fileSelectorInitiation(fileInput: HTMLInputElement): void {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    this.animationActivated \u003d true;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    setTimeout(() \u003d\u003e {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"      this.animationActivated \u003d false;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"      fileInput.click();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }, this.ANIMATION_DURATION);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"   * Reads the user selected file"},{"lineNumber":70,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":71,"author":{"gitId":"-"},"content":"  fileSelected(event: Event): void {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    const target \u003d event.target as HTMLInputElement;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    const file \u003d target.files[0];"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    const reader \u003d new FileReader();"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    reader.onload \u003d () \u003d\u003e {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"      if (!(reader.result instanceof ArrayBuffer)) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":79,"author":{"gitId":"dingyuchen"},"content":"          const { profiles } \u003d JSON.parse(reader.result);"},{"lineNumber":80,"author":{"gitId":"dingyuchen"},"content":"          if (!profiles.every(isValidProfile)) {"},{"lineNumber":81,"author":{"gitId":"dingyuchen"},"content":"            throw new Error(\u0027profiles.json is malformed\u0027);"},{"lineNumber":82,"author":{"gitId":"dingyuchen"},"content":"          }"},{"lineNumber":83,"author":{"gitId":"dingyuchen"},"content":"          this.profiles \u003d profiles.concat(AppConfig.profiles).filter((p) \u003d\u003e !!p);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"          target.value \u003d \u0027\u0027;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (e) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"          this.openErrorDialog();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    reader.readAsText(file);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":94,"author":{"gitId":"ptvrajsk"},"content":"   * Processes available Profiles information from application\u0027s configuration."},{"lineNumber":95,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":96,"author":{"gitId":"ptvrajsk"},"content":"  initProfiles(): void {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    this.profiles \u003d this.profiles"},{"lineNumber":98,"author":{"gitId":"-"},"content":"      .concat(AppConfig.profiles)"},{"lineNumber":99,"author":{"gitId":"dingyuchen"},"content":"      .filter((p) \u003d\u003e !!p);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   * Makes Error dialog visible to the user."},{"lineNumber":104,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"  openErrorDialog(): void {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    this.errorDialog.open(JsonParseErrorDialogComponent);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":110,"author":{"gitId":"-"},"content":"   * Sends the selected profile information to listening component."},{"lineNumber":111,"author":{"gitId":"-"},"content":"   * @param profile - Profile selected by user."},{"lineNumber":112,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":113,"author":{"gitId":"-"},"content":"  selectProfile(profile: Profile): void {"},{"lineNumber":114,"author":{"gitId":"dingyuchen"},"content":"    if (profile \u003d\u003d\u003d this.blankProfile || isValidProfile(profile)) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"      this.selectedProfileEmitter.emit(profile);"},{"lineNumber":116,"author":{"gitId":"dingyuchen"},"content":"    } else {"},{"lineNumber":117,"author":{"gitId":"dingyuchen"},"content":"      this.openErrorDialog();"},{"lineNumber":118,"author":{"gitId":"dingyuchen"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":120,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dingyuchen":11,"ptvrajsk":3,"-":106}},{"path":"src/app/core/models/generators/github-issue.generator.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"ptvrajsk"},"content":"import { GithubIssue } from \u0027../github/github-issue.model\u0027;"},{"lineNumber":2,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":3,"author":{"gitId":"ptvrajsk"},"content":"export default function generateGithubIssuesArray(numberOfElements: number \u003d 1): Array\u003cGithubIssue\u003e {"},{"lineNumber":4,"author":{"gitId":"ptvrajsk"},"content":"  const created_and_updated_date: string \u003d getRandomDate().toISOString();"},{"lineNumber":5,"author":{"gitId":"ptvrajsk"},"content":"  return new Array\u003cGithubIssue\u003e(10)"},{"lineNumber":6,"author":{"gitId":"ptvrajsk"},"content":"    .map((value: GithubIssue, index: number, array: GithubIssue[]) \u003d\u003e {"},{"lineNumber":7,"author":{"gitId":"ptvrajsk"},"content":"      return new GithubIssue({"},{"lineNumber":8,"author":{"gitId":"ptvrajsk"},"content":"        id: index,"},{"lineNumber":9,"author":{"gitId":"ptvrajsk"},"content":"        number: Math.random(),"},{"lineNumber":10,"author":{"gitId":"ptvrajsk"},"content":"        assignees: undefined,"},{"lineNumber":11,"author":{"gitId":"ptvrajsk"},"content":"        body: `Automatically Generated Issue No id: ${index}.`,"},{"lineNumber":12,"author":{"gitId":"ptvrajsk"},"content":"        created_at: created_and_updated_date,"},{"lineNumber":13,"author":{"gitId":"ptvrajsk"},"content":"        labels: undefined,"},{"lineNumber":14,"author":{"gitId":"ptvrajsk"},"content":"        title:  `Autogen Issue ${index}`,"},{"lineNumber":15,"author":{"gitId":"ptvrajsk"},"content":"        updated_at: created_and_updated_date,"},{"lineNumber":16,"author":{"gitId":"ptvrajsk"},"content":"        url: \u0027\u0027,"},{"lineNumber":17,"author":{"gitId":"ptvrajsk"},"content":"        user: undefined,"},{"lineNumber":18,"author":{"gitId":"ptvrajsk"},"content":"        comments: undefined"},{"lineNumber":19,"author":{"gitId":"ptvrajsk"},"content":"      });"},{"lineNumber":20,"author":{"gitId":"ptvrajsk"},"content":"    });"},{"lineNumber":21,"author":{"gitId":"ptvrajsk"},"content":"}"},{"lineNumber":22,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":23,"author":{"gitId":"ptvrajsk"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"ptvrajsk"},"content":" * Returns a random Date between the start and end dates."},{"lineNumber":25,"author":{"gitId":"ptvrajsk"},"content":" * @param start - Date representing the start of the date range. Default: 1/1/2018"},{"lineNumber":26,"author":{"gitId":"ptvrajsk"},"content":" * @param end - Date representing the end of the date range. Default: Current Date"},{"lineNumber":27,"author":{"gitId":"ptvrajsk"},"content":" */"},{"lineNumber":28,"author":{"gitId":"ptvrajsk"},"content":"function getRandomDate(start: Date \u003d new Date(2018, 1, 1) , end: Date \u003d new Date()): Date {"},{"lineNumber":29,"author":{"gitId":"ptvrajsk"},"content":"  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));"},{"lineNumber":30,"author":{"gitId":"ptvrajsk"},"content":"}"}],"authorContributionMap":{"ptvrajsk":30}},{"path":"src/app/core/models/github/github-label.model.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"export class GithubLabel {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  static readonly LABEL_ORDER \u003d {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    severity: { Low: 0, Medium: 1, High: 2 },"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    type: { DocumentationBug: 0, FunctionalityBug: 1 },"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  static readonly LABELS \u003d {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    severity: \u0027severity\u0027,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    type: \u0027type\u0027,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    response: \u0027response\u0027,"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    duplicated: \u0027duplicated\u0027,"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    status: \u0027status\u0027,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    unsure: \u0027unsure\u0027,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    pending: \u0027pending\u0027,"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    team: \u0027team\u0027,"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    tutorial: \u0027tutorial\u0027"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"  color: string;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  id: number;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  name: string;"},{"lineNumber":21,"author":{"gitId":"seanlowjk"},"content":"  category: string;"},{"lineNumber":22,"author":{"gitId":"seanlowjk"},"content":"  label: string;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  url: string;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"  constructor(githubLabels: {}) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    Object.assign(this, githubLabels);"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    if (this.isCategorical()) {"},{"lineNumber":29,"author":{"gitId":"seanlowjk"},"content":"      this.category \u003d this.name.split(\u0027.\u0027)[0];"},{"lineNumber":30,"author":{"gitId":"seanlowjk"},"content":"      this.label \u003d this.name.split(\u0027.\u0027)[1];"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":32,"author":{"gitId":"seanlowjk"},"content":"      this.category \u003d this.name;"},{"lineNumber":33,"author":{"gitId":"seanlowjk"},"content":"      this.label \u003d this.name;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"seanlowjk"},"content":"    Object.freeze(this);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"seanlowjk"},"content":"  getCategory(): string {"},{"lineNumber":39,"author":{"gitId":"seanlowjk"},"content":"    return this.category;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"  getValue(): string {"},{"lineNumber":43,"author":{"gitId":"seanlowjk"},"content":"    return this.label;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"  isCategorical(): boolean {"},{"lineNumber":47,"author":{"gitId":"seanlowjk"},"content":"    const regex \u003d /^[^.]+\\.[^.]+$/;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    return regex.test(this.name);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seanlowjk":11,"-":39}},{"path":"src/app/core/models/issue.model.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Team } from \u0027./team.model\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { TesterResponse } from \u0027./tester-response.model\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { IssueComment } from \u0027./comment.model\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { IssueDispute } from \u0027./issue-dispute.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { GithubIssue } from \u0027./github/github-issue.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { GithubLabel } from \u0027./github/github-label.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { GithubComment } from \u0027./github/github-comment.model\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { TeamResponseTemplate } from \u0027./templates/team-response-template.model\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { TesterResponseTemplate } from \u0027./templates/tester-response-template.model\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { TutorModerationIssueTemplate } from \u0027./templates/tutor-moderation-issue-template.model\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { TutorModerationTodoTemplate } from \u0027./templates/tutor-moderation-todo-template.model\u0027;"},{"lineNumber":12,"author":{"gitId":"dingyuchen"},"content":"import { Phase } from \u0027../models/phase.model\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import * as moment from \u0027moment\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { HiddenData } from \u0027./hidden-data.model\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"export class Issue {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"  /** Basic Fields */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  readonly globalId: string;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  readonly id: number;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  readonly created_at: string;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  readonly githubIssue: GithubIssue;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  githubComments: GithubComment[];"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  title: string;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  description: string;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  hiddenDataInDescription: HiddenData;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"  /** Fields derived from Labels */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  severity: string;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  type: string;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  responseTag?: string;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  duplicated?: boolean;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  status?: string;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  pending?: string;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  unsure?: boolean;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  teamAssigned?: Team;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"  /** Depending on the phase, assignees attribute can be derived from Github\u0027s assignee feature OR from the Github\u0027s issue description */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  assignees?: string[];"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"  /** Fields derived from parsing of Github\u0027s issue description */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  duplicateOf?: number;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  teamResponse?: string;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  testerResponses?: TesterResponse[];"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  issueComment?: IssueComment; // Issue comment is used for Tutor Response and Tester Response"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  issueDisputes?: IssueDispute[];"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":49,"author":{"gitId":"-"},"content":"   * Formats the text to create space at the end of the user input to prevent any issues with"},{"lineNumber":50,"author":{"gitId":"-"},"content":"   * the markdown interpretation."},{"lineNumber":51,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":52,"author":{"gitId":"-"},"content":"   * Brought over from comment-editor.component.ts"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  static formatText(text: string): string {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    if (text \u003d\u003d\u003d null) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      return null;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    if (text \u003d\u003d\u003d undefined) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      return undefined;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    const newLinesRegex \u003d /[\\n\\r]/gi;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    const textSplitArray \u003d text.split(newLinesRegex);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    if (textSplitArray.filter(split \u003d\u003e split.trim() !\u003d\u003d \u0027\u0027).length \u003e 0) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"      return `${text}\\n\\n`;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"      return text;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"   * Processes and cleans a raw issue description obtained from user input."},{"lineNumber":74,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":75,"author":{"gitId":"-"},"content":"  static updateDescription(description: string): string {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    const defaultString \u003d \u0027No details provided by bug reporter.\u0027;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    return Issue.orDefaultString(Issue.formatText(description), defaultString);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"   * Processes and cleans a raw team response obtained from user input."},{"lineNumber":82,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"  static updateTeamResponse(teamResponse: string): string {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    const defaultString \u003d \u0027No details provided by team.\u0027;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    return Issue.orDefaultString(Issue.formatText(teamResponse), defaultString);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":89,"author":{"gitId":"-"},"content":"   * Given two strings, returns the first if it is not an empty string or a false value such as null/undefined."},{"lineNumber":90,"author":{"gitId":"-"},"content":"   * Returns the second string if the first is an empty string."},{"lineNumber":91,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"  private static orDefaultString(stringA: string, def: string): string {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    if (!stringA) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"      return def;"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    return stringA.length !\u003d\u003d 0 ? stringA : def;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"  protected constructor(githubIssue: GithubIssue) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /** Basic Fields */"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    this.globalId \u003d githubIssue.id;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    this.id \u003d +githubIssue.number;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    this.created_at \u003d moment(githubIssue.created_at).format(\u0027lll\u0027);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    this.title \u003d githubIssue.title;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    this.hiddenDataInDescription \u003d new HiddenData(githubIssue.body);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    this.description \u003d Issue.updateDescription(this.hiddenDataInDescription.originalStringWithoutHiddenData);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    this.githubIssue \u003d githubIssue;"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /** Fields derived from Labels */"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    this.severity \u003d githubIssue.findLabel(GithubLabel.LABELS.severity);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    this.type \u003d githubIssue.findLabel(GithubLabel.LABELS.type);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    this.responseTag \u003d githubIssue.findLabel(GithubLabel.LABELS.response);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    this.duplicated \u003d !!githubIssue.findLabel(GithubLabel.LABELS.duplicated, false);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    this.status \u003d githubIssue.findLabel(GithubLabel.LABELS.status);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    this.pending \u003d githubIssue.findLabel(GithubLabel.LABELS.pending);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"  public static createPhaseBugReportingIssue(githubIssue: GithubIssue): Issue {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    return new Issue(githubIssue);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"  public static createPhaseTeamResponseIssue(githubIssue: GithubIssue, teamData: Team): Issue {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    const issue \u003d new Issue(githubIssue);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    const template \u003d new TeamResponseTemplate(githubIssue.comments);"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    issue.githubComments \u003d githubIssue.comments;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    issue.teamAssigned \u003d teamData;"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    issue.issueComment \u003d template.comment;"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    issue.teamResponse \u003d template.teamResponse !\u003d\u003d undefined ? Issue.updateTeamResponse(template.teamResponse.content) : undefined;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    issue.duplicateOf \u003d template.duplicateOf !\u003d\u003d undefined ? template.duplicateOf.issueNumber : undefined;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    issue.duplicated \u003d issue.duplicateOf !\u003d\u003d undefined \u0026\u0026 issue.duplicateOf !\u003d\u003d null;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    issue.assignees \u003d githubIssue.assignees.map(assignee \u003d\u003e assignee.login);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    return issue;"},{"lineNumber":134,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"  public static createPhaseTesterResponseIssue(githubIssue: GithubIssue): Issue {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    const issue \u003d new Issue(githubIssue);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    const template \u003d new TesterResponseTemplate(githubIssue.comments);"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    issue.githubComments \u003d githubIssue.comments;"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    issue.issueComment \u003d template.comment;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    issue.teamResponse \u003d template.teamResponse !\u003d\u003d undefined ? Issue.updateTeamResponse(template.teamResponse.content) : undefined;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    issue.testerResponses \u003d template.testerResponse !\u003d\u003d undefined ? template.testerResponse.testerResponses : undefined;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    return issue;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"  public static createPhaseModerationIssue(githubIssue: GithubIssue, teamData: Team): Issue {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    const issue \u003d new Issue(githubIssue);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    const issueTemplate \u003d new TutorModerationIssueTemplate(githubIssue);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    const todoTemplate \u003d new TutorModerationTodoTemplate(githubIssue.comments);"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    issue.githubComments \u003d githubIssue.comments;"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    issue.teamAssigned \u003d teamData;"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    issue.description \u003d issueTemplate.description.content;"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    issue.teamResponse \u003d issueTemplate.teamResponse !\u003d\u003d undefined"},{"lineNumber":156,"author":{"gitId":"-"},"content":"      ? Issue.updateTeamResponse(issueTemplate.teamResponse.content)"},{"lineNumber":157,"author":{"gitId":"-"},"content":"      : undefined;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    issue.issueDisputes \u003d issueTemplate.dispute.disputes;"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    if (todoTemplate.moderation \u0026\u0026 todoTemplate.comment) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"      issue.issueDisputes \u003d todoTemplate.moderation.disputesToResolve.map((dispute, i) \u003d\u003e {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        dispute.description \u003d issueTemplate.dispute.disputes[i].description;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return dispute;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":165,"author":{"gitId":"-"},"content":"      issue.issueComment \u003d todoTemplate.comment;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    return issue;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":171,"author":{"gitId":"-"},"content":"   * Creates a new copy of an exact same issue."},{"lineNumber":172,"author":{"gitId":"-"},"content":"   * This would come useful in the event when you want to update the issue but not the actual"},{"lineNumber":173,"author":{"gitId":"-"},"content":"   * state of the application."},{"lineNumber":174,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  clone(phase: Phase): Issue {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    switch (phase) {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"      case Phase.phaseBugReporting:"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        return Issue.createPhaseBugReportingIssue(this.githubIssue);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"      case Phase.phaseTeamResponse:"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        return Issue.createPhaseTeamResponseIssue(this.githubIssue, this.teamAssigned);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"      case Phase.phaseTesterResponse:"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        return Issue.createPhaseTesterResponseIssue(this.githubIssue);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"      case Phase.phaseModeration:"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        return Issue.createPhaseModerationIssue(this.githubIssue, this.teamAssigned);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        return Issue.createPhaseBugReportingIssue(this.githubIssue);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":191,"author":{"gitId":"-"},"content":"   * Depending on the phase of the peer testing, each phase will have a response associated to them."},{"lineNumber":192,"author":{"gitId":"-"},"content":"   * This function will allow the current instance of issue to retain the state of response of the given `issue`."},{"lineNumber":193,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":194,"author":{"gitId":"-"},"content":"   * @param phase - The phase in which you want to retain your responses."},{"lineNumber":195,"author":{"gitId":"-"},"content":"   * @param issue - The issue which you want your current instance to retain from."},{"lineNumber":196,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":197,"author":{"gitId":"-"},"content":"  retainResponses(phase: Phase, issue: Issue) {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    this.issueComment \u003d issue.issueComment;"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    this.githubComments \u003d issue.githubComments;"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    switch (phase) {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"      case Phase.phaseBugReporting:"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        this.description \u003d issue.description;"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"      case Phase.phaseTeamResponse:"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        this.teamResponse \u003d issue.teamResponse;"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":207,"author":{"gitId":"-"},"content":"      case Phase.phaseTesterResponse:"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        this.testerResponses \u003d issue.testerResponses;"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        this.teamResponse \u003d issue.teamResponse;"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":211,"author":{"gitId":"-"},"content":"      case Phase.phaseModeration:"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        this.issueDisputes \u003d issue.issueDisputes;"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":214,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":220,"author":{"gitId":"-"},"content":"   * Updates the tester\u0027s responses and team response based on the given githubComment."},{"lineNumber":221,"author":{"gitId":"-"},"content":"   * @param githubComment - A version of githubComment to update the issue with."},{"lineNumber":222,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  updateTesterResponse(githubComment: GithubComment): void {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    const template \u003d new TesterResponseTemplate([githubComment]);"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    this.issueComment \u003d template.comment;"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    this.teamResponse \u003d template.teamResponse !\u003d\u003d undefined ? template.teamResponse.content : undefined;"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    this.testerResponses \u003d template.testerResponse !\u003d\u003d undefined ? template.testerResponse.testerResponses : undefined;"},{"lineNumber":228,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":231,"author":{"gitId":"-"},"content":"   * Updates the tutor\u0027s resolution of the disputes with a new version of githubComment."},{"lineNumber":232,"author":{"gitId":"-"},"content":"   * @param githubComment - A version of githubComment to update the dispute with."},{"lineNumber":233,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":234,"author":{"gitId":"-"},"content":"  updateDispute(githubComment: GithubComment): void {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    const todoTemplate \u003d new TutorModerationTodoTemplate([githubComment]);"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    this.issueComment \u003d todoTemplate.comment;"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    this.issueDisputes \u003d todoTemplate.moderation.disputesToResolve.map((dispute, i) \u003d\u003e {"},{"lineNumber":238,"author":{"gitId":"-"},"content":"      dispute.description \u003d this.issueDisputes[i].description;"},{"lineNumber":239,"author":{"gitId":"-"},"content":"      return dispute;"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":241,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":242,"author":{"gitId":"-"},"content":""},{"lineNumber":243,"author":{"gitId":"-"},"content":"  createGithubIssueDescription(): string {"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    return `${this.description}\\n${this.hiddenDataInDescription.toString()}`;"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":"  // Template url: https://github.com/CATcher-org/templates#dev-response-phase"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  createGithubTeamResponse(): string {"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    return `# Team\\\u0027s Response\\n${this.teamResponse}\\n` +"},{"lineNumber":250,"author":{"gitId":"-"},"content":"      `## Duplicate status (if any):\\n${this.duplicateOf ? `Duplicate of #${this.duplicateOf}` : `--`}`;"},{"lineNumber":251,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"  // Template url: https://github.com/CATcher-org/templates#tutor-moderation"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  createGithubTutorResponse(): string {"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    let tutorResponseString \u003d \u0027# Tutor Moderation\\n\\n\u0027;"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    for (const issueDispute of this.issueDisputes) {"},{"lineNumber":257,"author":{"gitId":"-"},"content":"      tutorResponseString +\u003d issueDispute.toTutorResponseString();"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    return tutorResponseString;"},{"lineNumber":260,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"  // Template url: https://github.com/CATcher-org/templates#teams-response-1"},{"lineNumber":263,"author":{"gitId":"-"},"content":"  createGithubTesterResponse(): string {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    return `# Team\\\u0027s Response\\n${this.teamResponse}\\n` +"},{"lineNumber":265,"author":{"gitId":"-"},"content":"      `# Items for the Tester to Verify\\n${this.getTesterResponsesString(this.testerResponses)}`;"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":269,"author":{"gitId":"-"},"content":"   * Gets the number of unresolved disputes in an Issue."},{"lineNumber":270,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":271,"author":{"gitId":"-"},"content":"  numOfUnresolvedDisputes(): number {"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    if (!this.issueDisputes) {"},{"lineNumber":273,"author":{"gitId":"-"},"content":"      return 0;"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"    return this.issueDisputes.reduce((prev, current) \u003d\u003e prev + Number(!current.isDone()), 0);"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"  private getTesterResponsesString(testerResponses: TesterResponse[]): string {"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    let testerResponsesString \u003d \u0027\u0027;"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    for (const testerResponse of testerResponses) {"},{"lineNumber":282,"author":{"gitId":"-"},"content":"      testerResponsesString +\u003d testerResponse.toString();"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    return testerResponsesString;"},{"lineNumber":285,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":286,"author":{"gitId":"-"},"content":"}"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":"export interface Issues {"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  [id: number]: Issue;"},{"lineNumber":290,"author":{"gitId":"-"},"content":"}"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":"export const SEVERITY_ORDER \u003d { \u0027-\u0027: 0 , VeryLow: 1, Low: 2, Medium: 3, High: 4 };"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"export const ISSUE_TYPE_ORDER \u003d { \u0027-\u0027: 0 , DocumentationBug: 1, FeatureFlaw: 2, FunctionalityBug: 3  };"},{"lineNumber":295,"author":{"gitId":"-"},"content":""},{"lineNumber":296,"author":{"gitId":"-"},"content":"export enum STATUS {"},{"lineNumber":297,"author":{"gitId":"-"},"content":"  Incomplete \u003d \u0027Incomplete\u0027,"},{"lineNumber":298,"author":{"gitId":"-"},"content":"  Done \u003d \u0027Done\u0027,"},{"lineNumber":299,"author":{"gitId":"-"},"content":"}"},{"lineNumber":300,"author":{"gitId":"-"},"content":""},{"lineNumber":301,"author":{"gitId":"-"},"content":"export const IssuesFilter \u003d {"},{"lineNumber":302,"author":{"gitId":"-"},"content":"  phaseBugReporting: {"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    Student: \u0027FILTER_BY_CREATOR\u0027,"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    Tutor: \u0027NO_FILTER\u0027,"},{"lineNumber":305,"author":{"gitId":"-"},"content":"    Admin: \u0027NO_FILTER\u0027,"},{"lineNumber":306,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":307,"author":{"gitId":"-"},"content":"  phaseTeamResponse: {"},{"lineNumber":308,"author":{"gitId":"-"},"content":"    Student: \u0027FILTER_BY_TEAM\u0027,"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    Tutor: \u0027FILTER_BY_TEAM_ASSIGNED\u0027,"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    Admin: \u0027NO_FILTER\u0027,"},{"lineNumber":311,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":312,"author":{"gitId":"-"},"content":"  phaseTesterResponse: {"},{"lineNumber":313,"author":{"gitId":"-"},"content":"    Student: \u0027NO_FILTER\u0027,"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    Tutor: \u0027NO_ACCESS\u0027,"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    Admin: \u0027NO_FILTER\u0027,"},{"lineNumber":316,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":317,"author":{"gitId":"-"},"content":"  phaseModeration: {"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    Student: \u0027NO_ACCESS\u0027,"},{"lineNumber":319,"author":{"gitId":"-"},"content":"    Tutor: \u0027FILTER_BY_TEAM_ASSIGNED\u0027,"},{"lineNumber":320,"author":{"gitId":"-"},"content":"    Admin: \u0027NO_FILTER\u0027,"},{"lineNumber":321,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":322,"author":{"gitId":"-"},"content":"};"}],"authorContributionMap":{"dingyuchen":1,"-":321}},{"path":"src/app/core/models/phase.model.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"dingyuchen"},"content":"export enum Phase {"},{"lineNumber":2,"author":{"gitId":"dingyuchen"},"content":"  phaseBugReporting \u003d \u0027phaseBugReporting\u0027,"},{"lineNumber":3,"author":{"gitId":"dingyuchen"},"content":"  phaseTeamResponse \u003d \u0027phaseTeamResponse\u0027,"},{"lineNumber":4,"author":{"gitId":"dingyuchen"},"content":"  phaseTesterResponse \u003d \u0027phaseTesterResponse\u0027,"},{"lineNumber":5,"author":{"gitId":"dingyuchen"},"content":"  phaseModeration \u003d \u0027phaseModeration\u0027"},{"lineNumber":6,"author":{"gitId":"dingyuchen"},"content":"}"}],"authorContributionMap":{"dingyuchen":6}},{"path":"src/app/core/models/profile.model.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"dingyuchen"},"content":"import { Schema, isValidObject } from \u0027../../shared/lib/validate\u0027;"},{"lineNumber":2,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":3,"author":{"gitId":"dingyuchen"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"dingyuchen"},"content":" * Indicates all the elements that make up a Profile."},{"lineNumber":5,"author":{"gitId":"dingyuchen"},"content":" */"},{"lineNumber":6,"author":{"gitId":"dingyuchen"},"content":"export interface Profile {"},{"lineNumber":7,"author":{"gitId":"dingyuchen"},"content":"  profileName: string;"},{"lineNumber":8,"author":{"gitId":"dingyuchen"},"content":"  encodedText: string;"},{"lineNumber":9,"author":{"gitId":"dingyuchen"},"content":"}"},{"lineNumber":10,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":11,"author":{"gitId":"dingyuchen"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"dingyuchen"},"content":" * Schema for validating profiles.json entries"},{"lineNumber":13,"author":{"gitId":"dingyuchen"},"content":" *"},{"lineNumber":14,"author":{"gitId":"dingyuchen"},"content":" * Profile must have a profileName and encodedText field,"},{"lineNumber":15,"author":{"gitId":"dingyuchen"},"content":" * both of which cannot be empty strings."},{"lineNumber":16,"author":{"gitId":"dingyuchen"},"content":" */"},{"lineNumber":17,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":18,"author":{"gitId":"dingyuchen"},"content":"const profileSchema: Schema \u003d {"},{"lineNumber":19,"author":{"gitId":"dingyuchen"},"content":"  profileName: { required: true, validate: (value: string) \u003d\u003e !!value },"},{"lineNumber":20,"author":{"gitId":"dingyuchen"},"content":"  encodedText: { required: true, validate: (value: string) \u003d\u003e !!value.match(/\\w+\\/\\w+/g) } // match strings of the form : string/string"},{"lineNumber":21,"author":{"gitId":"dingyuchen"},"content":"};"},{"lineNumber":22,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":23,"author":{"gitId":"dingyuchen"},"content":"export const isValidProfile \u003d (profile: Profile) \u003d\u003e isValidObject(profile, profileSchema);"}],"authorContributionMap":{"dingyuchen":23}},{"path":"src/app/core/models/session.model.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { pipe } from \u0027rxjs\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { throwIfFalse } from \u0027../../shared/lib/custom-ops\u0027;"},{"lineNumber":3,"author":{"gitId":"ptvrajsk"},"content":"import { Phase } from \u0027./phase.model\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"export interface SessionData {"},{"lineNumber":6,"author":{"gitId":"dingyuchen"},"content":"  openPhases: Phase[];"},{"lineNumber":7,"author":{"gitId":"dingyuchen"},"content":"  [Phase.phaseBugReporting]: string;"},{"lineNumber":8,"author":{"gitId":"dingyuchen"},"content":"  [Phase.phaseTeamResponse]: string;"},{"lineNumber":9,"author":{"gitId":"dingyuchen"},"content":"  [Phase.phaseTesterResponse]: string;"},{"lineNumber":10,"author":{"gitId":"dingyuchen"},"content":"  [Phase.phaseModeration]: string;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"dingyuchen"},"content":"export const SESSION_DATA_UNAVAILABLE \u003d \u0027Session Data Unavailable\u0027;"},{"lineNumber":14,"author":{"gitId":"ptvrajsk"},"content":"export const SESSION_DATA_MISSING_OPENPHASES_KEY \u003d \u0027Session data does not define an \\\u0027openPhases\\\u0027 key\u0027;"},{"lineNumber":15,"author":{"gitId":"dingyuchen"},"content":"export const NO_ACCESSIBLE_PHASES \u003d \u0027There are no accessible phases\u0027;"},{"lineNumber":16,"author":{"gitId":"ptvrajsk"},"content":"export const NO_VALID_OPEN_PHASES \u003d \u0027Invalid Open Phases detected\u0027;"},{"lineNumber":17,"author":{"gitId":"ptvrajsk"},"content":"export const OPENED_PHASE_REPO_UNDEFINED \u003d \u0027Opened Phase has no repo defined\u0027;"},{"lineNumber":18,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"export function assertSessionDataIntegrity() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  return pipe("},{"lineNumber":21,"author":{"gitId":"-"},"content":"    throwIfFalse(sessionData \u003d\u003e sessionData !\u003d\u003d undefined,"},{"lineNumber":22,"author":{"gitId":"dingyuchen"},"content":"      () \u003d\u003e new Error(SESSION_DATA_UNAVAILABLE)),"},{"lineNumber":23,"author":{"gitId":"ptvrajsk"},"content":"    throwIfFalse(isOpenPhasesKeyPresent,"},{"lineNumber":24,"author":{"gitId":"ptvrajsk"},"content":"      () \u003d\u003e new Error(SESSION_DATA_MISSING_OPENPHASES_KEY)),"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    throwIfFalse(hasOpenPhases,"},{"lineNumber":26,"author":{"gitId":"ptvrajsk"},"content":"      () \u003d\u003e new Error(NO_ACCESSIBLE_PHASES)),"},{"lineNumber":27,"author":{"gitId":"ptvrajsk"},"content":"    throwIfFalse(areOpenPhasesValid,"},{"lineNumber":28,"author":{"gitId":"ptvrajsk"},"content":"      () \u003d\u003e new Error(NO_VALID_OPEN_PHASES)),"},{"lineNumber":29,"author":{"gitId":"ptvrajsk"},"content":"    throwIfFalse(isOpenPhasesRepoDefined,"},{"lineNumber":30,"author":{"gitId":"ptvrajsk"},"content":"      () \u003d\u003e new Error(OPENED_PHASE_REPO_UNDEFINED)),"},{"lineNumber":31,"author":{"gitId":"ptvrajsk"},"content":"  );"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitId":"ptvrajsk"},"content":" * Checks if Session Data has all its crucial fields present."},{"lineNumber":36,"author":{"gitId":"-"},"content":" * @param sessionData"},{"lineNumber":37,"author":{"gitId":"-"},"content":" */"},{"lineNumber":38,"author":{"gitId":"ptvrajsk"},"content":"function isOpenPhasesKeyPresent(sessionData: SessionData): boolean {"},{"lineNumber":39,"author":{"gitId":"ptvrajsk"},"content":"  return sessionData.openPhases !\u003d null;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"},{"lineNumber":41,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":42,"author":{"gitId":"ptvrajsk"},"content":"/**"},{"lineNumber":43,"author":{"gitId":"ptvrajsk"},"content":" * Checks if Open Phases belong to a pre-defined Phase."},{"lineNumber":44,"author":{"gitId":"ptvrajsk"},"content":" * @param sessionData"},{"lineNumber":45,"author":{"gitId":"ptvrajsk"},"content":" */"},{"lineNumber":46,"author":{"gitId":"ptvrajsk"},"content":"function areOpenPhasesValid(sessionData: SessionData): boolean {"},{"lineNumber":47,"author":{"gitId":"ptvrajsk"},"content":"  return sessionData.openPhases.reduce((isOpenPhasesValidSoFar: boolean, currentOpenPhase: string) \u003d\u003e"},{"lineNumber":48,"author":{"gitId":"ptvrajsk"},"content":"    isOpenPhasesValidSoFar \u0026\u0026 currentOpenPhase in Phase,"},{"lineNumber":49,"author":{"gitId":"ptvrajsk"},"content":"    true);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":53,"author":{"gitId":"ptvrajsk"},"content":" * Checks if each stated Open Phase has an associated repo defined as well."},{"lineNumber":54,"author":{"gitId":"-"},"content":" * @param sessionData"},{"lineNumber":55,"author":{"gitId":"-"},"content":" */"},{"lineNumber":56,"author":{"gitId":"ptvrajsk"},"content":"function isOpenPhasesRepoDefined(sessionData: SessionData): boolean {"},{"lineNumber":57,"author":{"gitId":"ptvrajsk"},"content":"  return sessionData.openPhases.reduce((isOpenPhasesRepoDefinedSoFar: boolean, currentOpenPhase: string) \u003d\u003e"},{"lineNumber":58,"author":{"gitId":"ptvrajsk"},"content":"    isOpenPhasesRepoDefinedSoFar \u0026\u0026 !!sessionData[currentOpenPhase],"},{"lineNumber":59,"author":{"gitId":"ptvrajsk"},"content":"    true);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"function hasOpenPhases(sessionData: SessionData): boolean {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  return sessionData.openPhases.length !\u003d\u003d 0;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dingyuchen":9,"ptvrajsk":29,"-":26}},{"path":"src/app/core/services/application.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { Observable, of } from \u0027rxjs\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { GithubRelease } from \u0027../models/github/github.release\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { map } from \u0027rxjs/operators\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"const appSetting \u003d require(\u0027../../../../package.json\u0027);"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"dingyuchen"},"content":"export const appVersion \u003d appSetting.version;"},{"lineNumber":10,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":13,"author":{"gitId":"-"},"content":"})"},{"lineNumber":14,"author":{"gitId":"-"},"content":"export class ApplicationService {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  readonly currentVersion: string;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  latestVersion: string;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  latestReleaseUrl: string;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"  constructor(private githubService: GithubService) {"},{"lineNumber":20,"author":{"gitId":"dingyuchen"},"content":"    this.currentVersion \u003d appVersion;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   * Determines whether the application is outdated."},{"lineNumber":25,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  isApplicationOutdated(): Observable\u003cboolean\u003e {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    if (this.latestVersion) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      return of(this.isOutdatedVersion(this.latestVersion, this.currentVersion));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    return this.githubService.fetchLatestRelease().pipe("},{"lineNumber":32,"author":{"gitId":"-"},"content":"      map((githubRelease: GithubRelease) \u003d\u003e {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.latestVersion \u003d githubRelease.tag_name.substring(1);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.latestReleaseUrl \u003d githubRelease.html_url;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return this.isOutdatedVersion(this.latestVersion, this.currentVersion);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"   * Determines whether the current version is outdated compared to the latest version."},{"lineNumber":42,"author":{"gitId":"-"},"content":"   * @param latestVersion"},{"lineNumber":43,"author":{"gitId":"-"},"content":"   * @param currentVersion"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":45,"author":{"gitId":"dingyuchen"},"content":"  private isOutdatedVersion(latestVersion: string, currentVersion: string): boolean {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    const result \u003d this.compareVersions(latestVersion, currentVersion);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    return result \u003d\u003d\u003d 1;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   * Compares the 2 given string versions v1 and v2 assuming that the version string"},{"lineNumber":52,"author":{"gitId":"-"},"content":"   * has the following format: \u003cnumber\u003e.\u003cnumber\u003e..."},{"lineNumber":53,"author":{"gitId":"-"},"content":"   * If v1 is greater than v2, return 1"},{"lineNumber":54,"author":{"gitId":"-"},"content":"   * If v1 is less than v2, return -1"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   * If v1 is equal to v2, return 0"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   * @param v1 - The first version."},{"lineNumber":57,"author":{"gitId":"-"},"content":"   * @param v2 - The second version."},{"lineNumber":58,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  private compareVersions(v1: string, v2: string): number {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    const v1Arr \u003d v1.split(\u0027.\u0027);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    const v2Arr \u003d v2.split(\u0027.\u0027);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    const k \u003d Math.min(v1.length, v2.length);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    const v1IntArr: number[] \u003d [];"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    const v2IntArr: number[] \u003d [];"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    for (let i \u003d 0; i \u003c k; ++ i) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      v1IntArr[i] \u003d parseInt(v1Arr[i], 10);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"      v2IntArr[i] \u003d parseInt(v2Arr[i], 10);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"      if (v1IntArr[i] \u003e v2IntArr[i]) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return 1;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":72,"author":{"gitId":"-"},"content":"      if (v1IntArr[i] \u003c v2IntArr[i]) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return -1;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    return v1.length \u003d\u003d\u003d v2.length ? 0 : (v1.length \u003c v2.length ? -1 : 1);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dingyuchen":4,"-":74}},{"path":"src/app/core/services/auth.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { HttpClient } from \u0027@angular/common/http\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { Router } from \u0027@angular/router\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { BehaviorSubject } from \u0027rxjs\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { NgZone } from \u0027@angular/core\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { ElectronService } from \u0027./electron.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { UserService } from \u0027./user.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027./phase.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027./error-handling.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027./issue.service\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { DataService } from \u0027./data.service\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { LabelService } from \u0027./label.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { Title } from \u0027@angular/platform-browser\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { GithubEventService } from \u0027./githubevent.service\u0027;"},{"lineNumber":16,"author":{"gitId":"dingyuchen"},"content":"import { generateSessionId } from \u0027../../shared/lib/session\u0027;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import { AppConfig } from \u0027../../../environments/environment\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import { LoggingService } from \u0027./logging.service\u0027;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import { uuid } from \u0027../../shared/lib/uuid\u0027;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"export enum AuthState { \u0027NotAuthenticated\u0027, \u0027AwaitingAuthentication\u0027, \u0027ConfirmOAuthUser\u0027, \u0027Authenticated\u0027}"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":25,"author":{"gitId":"-"},"content":"})"},{"lineNumber":26,"author":{"gitId":"-"},"content":"export class AuthService {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  authStateSource \u003d new BehaviorSubject(AuthState.NotAuthenticated);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  currentAuthState \u003d this.authStateSource.asObservable();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  accessToken \u003d new BehaviorSubject(undefined);"},{"lineNumber":30,"author":{"gitId":"kkangs0226"},"content":"  private state: string;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"kkangs0226"},"content":"  ENABLE_POPUP_MESSAGE \u003d \u0027Please enable pop-ups in your browser\u0027;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"  constructor(private electronService: ElectronService, private router: Router, private ngZone: NgZone,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"              private http: HttpClient,  private errorHandlingService: ErrorHandlingService,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"              private githubService: GithubService,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"              private userService: UserService,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"              private issueService: IssueService,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"              private phaseService: PhaseService,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"              private labelService: LabelService,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"              private dataService: DataService,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"              private githubEventService: GithubEventService,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"              private titleService: Title,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"              private logger: LoggingService) {}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"   * Will store the OAuth token."},{"lineNumber":48,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  storeOAuthAccessToken(token: string) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    this.githubService.storeOAuthAccessToken(token);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    this.accessToken.next(token);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"  reset(): void {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    this.accessToken.next(undefined);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    this.changeAuthState(AuthState.NotAuthenticated);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    this.ngZone.run(() \u003d\u003e this.router.navigate([\u0027\u0027]));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"  logOut(): void {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    this.githubService.reset();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    this.userService.reset();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    this.issueService.reset();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    this.phaseService.reset();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    this.dataService.reset();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    this.githubEventService.reset();"},{"lineNumber":67,"author":{"gitId":"ptvrajsk"},"content":"    this.logger.reset();"},{"lineNumber":68,"author":{"gitId":"kkangs0226"},"content":"    this.setLandingPageTitle();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    this.issueService.setIssueTeamFilter(\u0027All Teams\u0027);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    this.reset();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"kkangs0226"},"content":"  setTitleWithPhaseDetail(): void {"},{"lineNumber":74,"author":{"gitId":"kkangs0226"},"content":"    const appSetting \u003d require(\u0027../../../../package.json\u0027);"},{"lineNumber":75,"author":{"gitId":"kkangs0226"},"content":"    const title \u003d `${appSetting.name} ${appSetting.version} - ${this.phaseService.getPhaseDetail()}`;"},{"lineNumber":76,"author":{"gitId":"kkangs0226"},"content":"    this.titleService.setTitle(title);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"kkangs0226"},"content":"  setLandingPageTitle(): void {"},{"lineNumber":80,"author":{"gitId":"kkangs0226"},"content":"    const appSetting \u003d require(\u0027../../../../package.json\u0027);"},{"lineNumber":81,"author":{"gitId":"kkangs0226"},"content":"    const title \u003d `${appSetting.name} ${appSetting.version}`;"},{"lineNumber":82,"author":{"gitId":"kkangs0226"},"content":"    this.titleService.setTitle(title);"},{"lineNumber":83,"author":{"gitId":"kkangs0226"},"content":"  }"},{"lineNumber":84,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"  isAuthenticated(): boolean {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    return this.authStateSource.getValue() \u003d\u003d\u003d AuthState.Authenticated;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"  changeAuthState(newAuthState: AuthState) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    if (newAuthState \u003d\u003d\u003d AuthState.Authenticated) {"},{"lineNumber":91,"author":{"gitId":"dingyuchen"},"content":"      const sessionId \u003d generateSessionId();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"      this.issueService.setSessionId(sessionId);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"      this.logger.info(`Successfully authenticated with session: ${sessionId}`);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    this.authStateSource.next(newAuthState);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":99,"author":{"gitId":"kkangs0226"},"content":"  /**"},{"lineNumber":100,"author":{"gitId":"kkangs0226"},"content":"   * Generates and assigns an unguessable random \u0027state\u0027 string to pass to Github for protection against cross-site request forgery attacks"},{"lineNumber":101,"author":{"gitId":"kkangs0226"},"content":"   */"},{"lineNumber":102,"author":{"gitId":"kkangs0226"},"content":"  generateStateString() {"},{"lineNumber":103,"author":{"gitId":"kkangs0226"},"content":"    this.state \u003d uuid();"},{"lineNumber":104,"author":{"gitId":"kkangs0226"},"content":"  }"},{"lineNumber":105,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":106,"author":{"gitId":"kkangs0226"},"content":"  isReturnedStateSame(returnedState: string): boolean {"},{"lineNumber":107,"author":{"gitId":"kkangs0226"},"content":"    return returnedState \u003d\u003d\u003d this.state;"},{"lineNumber":108,"author":{"gitId":"kkangs0226"},"content":"  }"},{"lineNumber":109,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   * Will start the Github OAuth web flow process."},{"lineNumber":112,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":113,"author":{"gitId":"-"},"content":"  startOAuthProcess() {"},{"lineNumber":114,"author":{"gitId":"kkangs0226"},"content":"    this.logger.info(\u0027Starting authentication\u0027);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    const githubRepoPermission \u003d this.phaseService.githubRepoPermissionLevel();"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    this.changeAuthState(AuthState.AwaitingAuthentication);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    if (this.electronService.isElectron()) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"      this.electronService.sendIpcMessage(\u0027github-oauth\u0027, githubRepoPermission);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":121,"author":{"gitId":"kkangs0226"},"content":"      this.generateStateString();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"      this.createOauthWindow(encodeURI("},{"lineNumber":123,"author":{"gitId":"kkangs0226"},"content":"        `${AppConfig.githubUrl}/login/oauth/authorize?client_id\u003d${AppConfig.clientId}\u0026scope\u003d${githubRepoPermission},read:user\u0026state\u003d${this.state}`"},{"lineNumber":124,"author":{"gitId":"-"},"content":"      ));"},{"lineNumber":125,"author":{"gitId":"kkangs0226"},"content":"      this.logger.info(\u0027Opening window for Github authentication\u0027);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":130,"author":{"gitId":"-"},"content":"   * Will do a poll on whether the given window is closed."},{"lineNumber":131,"author":{"gitId":"-"},"content":"   * If it is closed and user is still not authenticated, change the auth status to not authenticated."},{"lineNumber":132,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  private confirmWindowClosed(window: Window): void {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    const authService \u003d this;"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    const pollTimer \u003d window.setInterval(function() {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"      if (window.closed) {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        window.clearInterval(pollTimer);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        if (!authService.accessToken) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"          authService.changeAuthState(AuthState.NotAuthenticated);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }, 1000);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":146,"author":{"gitId":"-"},"content":"   * Will create a web version of oauth window."},{"lineNumber":147,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":148,"author":{"gitId":"-"},"content":"  private createOauthWindow("},{"lineNumber":149,"author":{"gitId":"-"},"content":"    url: string,"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    width: number \u003d 500,"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    height: number \u003d 600,"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    left: number \u003d 0,"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    top: number \u003d 0"},{"lineNumber":154,"author":{"gitId":"-"},"content":"  ): void {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    if (url \u003d\u003d null) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    const options \u003d `width\u003d${width},height\u003d${height},left\u003d${left},top\u003d${top}`;"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    const oauthWindow \u003d window.open(`${url}`, \u0027Authorization\u0027, options);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    const authService \u003d this;"},{"lineNumber":161,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":162,"author":{"gitId":"kkangs0226"},"content":"    if (oauthWindow \u003d\u003d null) {"},{"lineNumber":163,"author":{"gitId":"kkangs0226"},"content":"      throw this.ENABLE_POPUP_MESSAGE;"},{"lineNumber":164,"author":{"gitId":"kkangs0226"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    oauthWindow.addEventListener(\u0027unload\u0027, () \u003d\u003e {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"      if (!oauthWindow.closed) {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // unload event could be triggered when there is a redirection, hence, a confirmation needed."},{"lineNumber":169,"author":{"gitId":"-"},"content":"        authService.confirmWindowClosed(oauthWindow);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":172,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":173,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kkangs0226":34,"dingyuchen":2,"ptvrajsk":1,"-":136}},{"path":"src/app/core/services/data.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":3,"author":{"gitId":"seanlowjk"},"content":"import { map } from \u0027rxjs/operators\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { DataFile } from \u0027../models/data-file.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { Team } from \u0027../models/team.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { User, UserRole } from \u0027../models/user.model\u0027;"},{"lineNumber":7,"author":{"gitId":"seanlowjk"},"content":"import { Observable } from \u0027rxjs\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027,"},{"lineNumber":11,"author":{"gitId":"-"},"content":"})"},{"lineNumber":12,"author":{"gitId":"-"},"content":"export class DataService {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  public dataFile: DataFile;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"  constructor(private githubService: GithubService) {}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   * Retrieves the csv file from the settings repo and constructs"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   * the required data file for the app."},{"lineNumber":20,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  getDataFile(): Observable\u003c{}\u003e {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    return this.githubService.fetchDataFile().pipe("},{"lineNumber":23,"author":{"gitId":"-"},"content":"      map((allCsvDataWrapper: {}) \u003d\u003e {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return this.constructData(allCsvDataWrapper);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      map((jsonData: {}) \u003d\u003e {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.dataFile \u003d \u003cDataFile\u003e{"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          teamStructure: this.extractTeamStructure(jsonData)"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return jsonData;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"   * Merges all parsed Csv Data into a single readable JSON"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   * format."},{"lineNumber":38,"author":{"gitId":"-"},"content":"   * @param allCsvDataWrapper - Object containing strings of csv data."},{"lineNumber":39,"author":{"gitId":"-"},"content":"   * @return jsonData - Object representing merged data file."},{"lineNumber":40,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  private constructData(allCsvDataWrapper: {}): {} {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    const jsonData: {} \u003d {};"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    const allCsvData: string \u003d allCsvDataWrapper[\u0027data\u0027];"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    jsonData[\u0027roles\u0027] \u003d this.parseRolesData(allCsvData);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    jsonData[\u0027team-structure\u0027] \u003d this.parseTeamStructureData(allCsvData);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    jsonData[\u0027students-allocation\u0027] \u003d this.parseStudentAllocation(allCsvData);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    jsonData[\u0027tutors-allocation\u0027] \u003d this.parseTutorAllocation(allCsvData);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    jsonData[\u0027admins-allocation\u0027] \u003d this.parseAdminAllocation(allCsvData);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    return jsonData;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   * Parses the input string containing admin allocation information"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   * into application readable Object."},{"lineNumber":57,"author":{"gitId":"-"},"content":"   * @param csvInput - string containing csv data."},{"lineNumber":58,"author":{"gitId":"-"},"content":"   * @return admins - object that represents parsed csv data."},{"lineNumber":59,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  private parseAdminAllocation(csvInput: string): {} {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    // CSV Headers"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    const NAME \u003d \u0027name\u0027;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    const ROLE \u003d \u0027role\u0027;"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    const admins \u003d {};"},{"lineNumber":66,"author":{"gitId":"seanlowjk"},"content":"    let parsedCSV: {}[];"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    parsedCSV \u003d this.csvParser(csvInput);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    // Formats the parsed information for easier app reading"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    parsedCSV.forEach(entry \u003d\u003e {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      if (entry[ROLE] \u003d\u003d\u003d UserRole.Admin.toLowerCase()) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        admins[entry[NAME].toLowerCase()] \u003d {};"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    return admins;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"   * Parses the input string containing tutor allocation information"},{"lineNumber":81,"author":{"gitId":"-"},"content":"   * into application readable Object."},{"lineNumber":82,"author":{"gitId":"-"},"content":"   * @param csvInput - string containing csv data."},{"lineNumber":83,"author":{"gitId":"-"},"content":"   * @return admins - object that represents parsed csv data."},{"lineNumber":84,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"  private parseTutorAllocation(csvInput: string): {} {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    // CSV Headers"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    const NAME \u003d \u0027name\u0027;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    const TEAM \u003d \u0027team\u0027;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    const ROLE \u003d \u0027role\u0027;"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    const tutors \u003d {};"},{"lineNumber":92,"author":{"gitId":"seanlowjk"},"content":"    let parsedCSV: {}[];"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    parsedCSV \u003d this.csvParser(csvInput);"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    // Formats the parsed information for easier app reading"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    parsedCSV.forEach(entry \u003d\u003e {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"      if (!(entry[ROLE] \u003d\u003d\u003d UserRole.Tutor.toLowerCase())) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      const tutor \u003d entry[NAME].toLowerCase() in tutors ? tutors[entry[NAME].toLowerCase()] : {};"},{"lineNumber":101,"author":{"gitId":"-"},"content":"      tutor[entry[TEAM]] \u003d \u0027true\u0027;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"      tutors[entry[NAME].toLowerCase()] \u003d tutor;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    return tutors;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":109,"author":{"gitId":"-"},"content":"   * Parses the input string containing student allocation information"},{"lineNumber":110,"author":{"gitId":"-"},"content":"   * into application readable Object."},{"lineNumber":111,"author":{"gitId":"-"},"content":"   * @param csvInput - string containing csv data."},{"lineNumber":112,"author":{"gitId":"-"},"content":"   * @return admins - object that represents parsed csv data."},{"lineNumber":113,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":114,"author":{"gitId":"-"},"content":"  private parseStudentAllocation(csvInput: string): {} {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    // CSV Headers"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    const TEAM \u003d \u0027team\u0027;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    const NAME \u003d \u0027name\u0027;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    const ROLE \u003d \u0027role\u0027;"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    // Team Notation"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    const TEAM_ID \u003d \u0027teamId\u0027;"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    const students \u003d {};"},{"lineNumber":123,"author":{"gitId":"seanlowjk"},"content":"    let parsedCSV: {}[];"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    parsedCSV \u003d this.csvParser(csvInput);"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    // Formats the parsed information for easier app reading"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    parsedCSV.forEach(entry \u003d\u003e {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"      if (!(entry[ROLE] \u003d\u003d\u003d UserRole.Student.toLowerCase())) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      const newStudent \u003d {};"},{"lineNumber":132,"author":{"gitId":"-"},"content":"      newStudent[TEAM_ID] \u003d entry[TEAM];"},{"lineNumber":133,"author":{"gitId":"-"},"content":"      students[entry[NAME].toLowerCase()] \u003d newStudent;"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    return students;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":140,"author":{"gitId":"-"},"content":"   * Parses the input string containing team structure information"},{"lineNumber":141,"author":{"gitId":"-"},"content":"   * into application readable Object."},{"lineNumber":142,"author":{"gitId":"-"},"content":"   * @param csvInput - string containing csv data."},{"lineNumber":143,"author":{"gitId":"-"},"content":"   * @return admins - object that represents parsed csv data."},{"lineNumber":144,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  private parseTeamStructureData(csvInput: string): {} {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    // CSV Headers"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    const TEAM \u003d \u0027team\u0027;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    const NAME \u003d \u0027name\u0027;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    const ROLE \u003d \u0027role\u0027;"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    const teams \u003d {};"},{"lineNumber":152,"author":{"gitId":"seanlowjk"},"content":"    let parsedCSV: {}[];"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    parsedCSV \u003d this.csvParser(csvInput);"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    // Formats the parsed information for easier app reading"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    parsedCSV.forEach(entry \u003d\u003e {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"      if (!(entry[ROLE] \u003d\u003d\u003d UserRole.Student.toLowerCase())) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        return;"},{"lineNumber":159,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":160,"author":{"gitId":"-"},"content":"      const team \u003d entry[TEAM] in teams ? teams[entry[TEAM]] : {};"},{"lineNumber":161,"author":{"gitId":"-"},"content":"      team[entry[NAME].toLowerCase()] \u003d \u0027true\u0027;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"      teams[entry[TEAM]] \u003d team;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    return teams;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":169,"author":{"gitId":"-"},"content":"   * Parses the input string containing roles information"},{"lineNumber":170,"author":{"gitId":"-"},"content":"   * into application readable Object."},{"lineNumber":171,"author":{"gitId":"-"},"content":"   * @param csvInput - string containing csv data."},{"lineNumber":172,"author":{"gitId":"-"},"content":"   * @return admins - object that represents parsed csv data."},{"lineNumber":173,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":174,"author":{"gitId":"-"},"content":"  private parseRolesData(csvInput: string): {} {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    // CSV Headers"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    const ROLE \u003d \u0027role\u0027;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    const NAME \u003d \u0027name\u0027;"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    const roles \u003d {};"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    const students \u003d {};"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    const tutors \u003d {};"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    const admins \u003d {};"},{"lineNumber":183,"author":{"gitId":"seanlowjk"},"content":"    let parsedCSV: {}[];"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    parsedCSV \u003d this.csvParser(csvInput);"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"    // Formats the parsed information for easier app reading"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    parsedCSV.forEach(entry \u003d\u003e {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"      if (entry[ROLE] \u003d\u003d\u003d UserRole.Student.toLowerCase()) {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        students[entry[NAME].toLowerCase()] \u003d \u0027true\u0027;"},{"lineNumber":190,"author":{"gitId":"-"},"content":"      } else if (entry[ROLE] \u003d\u003d\u003d UserRole.Tutor.toLowerCase()) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        tutors[entry[NAME].toLowerCase()] \u003d \u0027true\u0027;"},{"lineNumber":192,"author":{"gitId":"-"},"content":"      } else if (entry[ROLE] \u003d\u003d\u003d UserRole.Admin.toLowerCase()) {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        admins[entry[NAME].toLowerCase()] \u003d \u0027true\u0027;"},{"lineNumber":194,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"    roles[\u0027students\u0027] \u003d students;"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    roles[\u0027tutors\u0027] \u003d tutors;"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    roles[\u0027admins\u0027] \u003d admins;"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"    return roles;"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":205,"author":{"gitId":"-"},"content":"   * Converts the input csv information to an array of"},{"lineNumber":206,"author":{"gitId":"-"},"content":"   * objects syncrhonously. Each object\u0027s values are"},{"lineNumber":207,"author":{"gitId":"-"},"content":"   * marked by the respective csv table headers."},{"lineNumber":208,"author":{"gitId":"-"},"content":"   * @param csvText - csv information."},{"lineNumber":209,"author":{"gitId":"-"},"content":"   * @return - Subjects that tracks the parsed data."},{"lineNumber":210,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":211,"author":{"gitId":"seanlowjk"},"content":"  private csvParser(csvText: string): {}[] {"},{"lineNumber":212,"author":{"gitId":"seanlowjk"},"content":"    const lines \u003d csvText.split(\u0027\\n\u0027).filter(v \u003d\u003e v.trim());"},{"lineNumber":213,"author":{"gitId":"seanlowjk"},"content":"    const headers \u003d lines[0].split(\u0027,\u0027).map(h \u003d\u003e h.trim());"},{"lineNumber":214,"author":{"gitId":"seanlowjk"},"content":"    const result \u003d [];"},{"lineNumber":215,"author":{"gitId":"seanlowjk"},"content":"    for (let i \u003d 1; i \u003c lines.length; i++) {"},{"lineNumber":216,"author":{"gitId":"seanlowjk"},"content":"      const line \u003d lines[i].trim();"},{"lineNumber":217,"author":{"gitId":"seanlowjk"},"content":"      if (!line) {"},{"lineNumber":218,"author":{"gitId":"seanlowjk"},"content":"        continue;"},{"lineNumber":219,"author":{"gitId":"seanlowjk"},"content":"      }"},{"lineNumber":220,"author":{"gitId":"seanlowjk"},"content":"      const lineValues \u003d line.split(\u0027,\u0027).map(v \u003d\u003e v.trim());"},{"lineNumber":221,"author":{"gitId":"seanlowjk"},"content":"      const lineObj \u003d {};"},{"lineNumber":222,"author":{"gitId":"seanlowjk"},"content":"      for (let j \u003d 0; j \u003c headers.length; j++) {"},{"lineNumber":223,"author":{"gitId":"seanlowjk"},"content":"        if (!lineValues[j]) {"},{"lineNumber":224,"author":{"gitId":"seanlowjk"},"content":"          lineObj[headers[j]] \u003d null;"},{"lineNumber":225,"author":{"gitId":"seanlowjk"},"content":"        } else {"},{"lineNumber":226,"author":{"gitId":"seanlowjk"},"content":"          lineObj[headers[j]] \u003d lineValues[j];"},{"lineNumber":227,"author":{"gitId":"seanlowjk"},"content":"        }"},{"lineNumber":228,"author":{"gitId":"seanlowjk"},"content":"      }"},{"lineNumber":229,"author":{"gitId":"seanlowjk"},"content":"      result.push(lineObj);"},{"lineNumber":230,"author":{"gitId":"seanlowjk"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"seanlowjk"},"content":"    return result;"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"  getTeam(teamId: string): Team {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    return this.dataFile.teamStructure.get(teamId);"},{"lineNumber":236,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"  getTeams(): string[] {"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    return Array.from(this.dataFile.teamStructure.keys());"},{"lineNumber":240,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"  // returns a mapping from teamId to their respective team structure."},{"lineNumber":243,"author":{"gitId":"-"},"content":"  private extractTeamStructure(jsonData: {}): Map\u003cstring, Team\u003e {"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    const teamStructure \u003d new Map\u003cstring, Team\u003e();"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    const jsonTeamStructure \u003d jsonData[\u0027team-structure\u0027];"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    const teamIds \u003d Object.keys(jsonTeamStructure);"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    for (const teamId of teamIds) {"},{"lineNumber":248,"author":{"gitId":"-"},"content":"      const teamMembers \u003d new Array\u003cUser\u003e();"},{"lineNumber":249,"author":{"gitId":"-"},"content":"      const teamMemberIds \u003d Object.keys(jsonTeamStructure[teamId]);"},{"lineNumber":250,"author":{"gitId":"-"},"content":"      for (const teamMemberId of teamMemberIds) {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        teamMembers.push(\u003cUser\u003e{loginId: teamMemberId, role: UserRole.Student});"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":253,"author":{"gitId":"-"},"content":"      teamStructure.set(teamId, new Team({id: teamId, teamMembers: teamMembers}));"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    return teamStructure;"},{"lineNumber":256,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"  reset() {"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    this.dataFile \u003d undefined;"},{"lineNumber":260,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seanlowjk":28,"-":233}},{"path":"src/app/core/services/error-handling.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"ptvrajsk"},"content":"import { ErrorHandler, Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { MatSnackBar } from \u0027@angular/material\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { GeneralMessageErrorComponent } from \u0027../../shared/error-toasters/general-message-error/general-message-error.component\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { FormErrorComponent } from \u0027../../shared/error-toasters/form-error/form-error.component\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { HttpErrorResponse } from \u0027@angular/common/http\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { RequestError } from \u0027@octokit/request-error\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { LoggingService } from \u0027./logging.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"export const ERRORCODE_NOT_FOUND \u003d 404;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"})"},{"lineNumber":14,"author":{"gitId":"ptvrajsk"},"content":"export class ErrorHandlingService implements ErrorHandler {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"  constructor(private snackBar: MatSnackBar, private logger: LoggingService) {}"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"  handleError(error: HttpErrorResponse | string | RequestError, actionCallback?: () \u003d\u003e void) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    this.logger.error(error);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    if (error instanceof HttpErrorResponse || error instanceof RequestError) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      this.handleHttpError(error, actionCallback);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      this.handleGeneralError(error);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"  // Ref: https://developer.github.com/v3/#client-errors"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  private handleHttpError(error: HttpErrorResponse | RequestError, actionCallback?: () \u003d\u003e void): void {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    // Angular treats 304 Not Modified as an error, we will ignore it."},{"lineNumber":30,"author":{"gitId":"-"},"content":"    if (error.status \u003d\u003d\u003d 304) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    if (!navigator.onLine) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      this.handleGeneralError(\u0027No Internet Connection\u0027);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    switch (error.status) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      case 500: // Internal Server Error."},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.snackBar.openFromComponent(GeneralMessageErrorComponent, {data: error});"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      case 422: // Form errors"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.snackBar.openFromComponent(FormErrorComponent, {data: error});"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"      case 400: // Bad request"},{"lineNumber":47,"author":{"gitId":"-"},"content":"      case 401: // Unauthorized"},{"lineNumber":48,"author":{"gitId":"-"},"content":"      case 404: // Not found"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.snackBar.openFromComponent(GeneralMessageErrorComponent, {data: error});"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.snackBar.openFromComponent(GeneralMessageErrorComponent, {data: error});"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"  private handleGeneralError(error: string): void {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    this.snackBar.openFromComponent(GeneralMessageErrorComponent, {data: {message: error}});"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ptvrajsk":2,"-":58}},{"path":"src/app/core/services/factories/factory.auth.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"ptvrajsk"},"content":"import { HttpClient } from \u0027@angular/common/http\u0027;"},{"lineNumber":2,"author":{"gitId":"ptvrajsk"},"content":"import { Router } from \u0027@angular/router\u0027;"},{"lineNumber":3,"author":{"gitId":"ptvrajsk"},"content":"import { NgZone } from \u0027@angular/core\u0027;"},{"lineNumber":4,"author":{"gitId":"ptvrajsk"},"content":"import { ElectronService } from \u0027../electron.service\u0027;"},{"lineNumber":5,"author":{"gitId":"ptvrajsk"},"content":"import { UserService } from \u0027../user.service\u0027;"},{"lineNumber":6,"author":{"gitId":"ptvrajsk"},"content":"import { PhaseService } from \u0027../phase.service\u0027;"},{"lineNumber":7,"author":{"gitId":"ptvrajsk"},"content":"import { ErrorHandlingService } from \u0027../error-handling.service\u0027;"},{"lineNumber":8,"author":{"gitId":"ptvrajsk"},"content":"import { GithubService } from \u0027../github.service\u0027;"},{"lineNumber":9,"author":{"gitId":"ptvrajsk"},"content":"import { IssueService } from \u0027../issue.service\u0027;"},{"lineNumber":10,"author":{"gitId":"ptvrajsk"},"content":"import { DataService } from \u0027../data.service\u0027;"},{"lineNumber":11,"author":{"gitId":"ptvrajsk"},"content":"import { LabelService } from \u0027../label.service\u0027;"},{"lineNumber":12,"author":{"gitId":"ptvrajsk"},"content":"import { Title } from \u0027@angular/platform-browser\u0027;"},{"lineNumber":13,"author":{"gitId":"ptvrajsk"},"content":"import { GithubEventService } from \u0027../githubevent.service\u0027;"},{"lineNumber":14,"author":{"gitId":"ptvrajsk"},"content":"import { AppConfig } from \u0027../../../../environments/environment\u0027;"},{"lineNumber":15,"author":{"gitId":"ptvrajsk"},"content":"import { LoggingService } from \u0027../logging.service\u0027;"},{"lineNumber":16,"author":{"gitId":"ptvrajsk"},"content":"import { MockAuthService } from \u0027../mocks/mock.auth.service\u0027;"},{"lineNumber":17,"author":{"gitId":"ptvrajsk"},"content":"import { AuthService } from \u0027../auth.service\u0027;"},{"lineNumber":18,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":19,"author":{"gitId":"ptvrajsk"},"content":"export function AuthServiceFactory(electronService: ElectronService, router: Router, ngZone: NgZone,"},{"lineNumber":20,"author":{"gitId":"ptvrajsk"},"content":"                                   http: HttpClient,  errorHandlingService: ErrorHandlingService,"},{"lineNumber":21,"author":{"gitId":"ptvrajsk"},"content":"                                   githubService: GithubService,"},{"lineNumber":22,"author":{"gitId":"ptvrajsk"},"content":"                                   userService: UserService,"},{"lineNumber":23,"author":{"gitId":"ptvrajsk"},"content":"                                   issueService: IssueService,"},{"lineNumber":24,"author":{"gitId":"ptvrajsk"},"content":"                                   phaseService: PhaseService,"},{"lineNumber":25,"author":{"gitId":"ptvrajsk"},"content":"                                   labelService: LabelService,"},{"lineNumber":26,"author":{"gitId":"ptvrajsk"},"content":"                                   dataService: DataService,"},{"lineNumber":27,"author":{"gitId":"ptvrajsk"},"content":"                                   githubEventService: GithubEventService,"},{"lineNumber":28,"author":{"gitId":"ptvrajsk"},"content":"                                   titleService: Title,"},{"lineNumber":29,"author":{"gitId":"ptvrajsk"},"content":"                                   logger: LoggingService) {"},{"lineNumber":30,"author":{"gitId":"ptvrajsk"},"content":"  if (AppConfig.test) {"},{"lineNumber":31,"author":{"gitId":"ptvrajsk"},"content":"      return new MockAuthService(electronService, router, ngZone,"},{"lineNumber":32,"author":{"gitId":"ptvrajsk"},"content":"        http, errorHandlingService, githubService, userService, issueService,"},{"lineNumber":33,"author":{"gitId":"ptvrajsk"},"content":"        phaseService, labelService, dataService, githubEventService, titleService,"},{"lineNumber":34,"author":{"gitId":"ptvrajsk"},"content":"        logger);"},{"lineNumber":35,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":36,"author":{"gitId":"ptvrajsk"},"content":"  return new AuthService(electronService, router, ngZone,"},{"lineNumber":37,"author":{"gitId":"ptvrajsk"},"content":"    http, errorHandlingService, githubService, userService, issueService,"},{"lineNumber":38,"author":{"gitId":"ptvrajsk"},"content":"    phaseService, labelService, dataService, githubEventService, titleService,"},{"lineNumber":39,"author":{"gitId":"ptvrajsk"},"content":"    logger);"},{"lineNumber":40,"author":{"gitId":"ptvrajsk"},"content":"}"}],"authorContributionMap":{"ptvrajsk":40}},{"path":"src/app/core/services/factories/factory.github.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"ptvrajsk"},"content":"import { AppConfig } from \u0027../../../../environments/environment\u0027;"},{"lineNumber":2,"author":{"gitId":"ptvrajsk"},"content":"import { Apollo } from \u0027apollo-angular\u0027;"},{"lineNumber":3,"author":{"gitId":"ptvrajsk"},"content":"import { ElectronService } from \u0027../electron.service\u0027;"},{"lineNumber":4,"author":{"gitId":"ptvrajsk"},"content":"import { ErrorHandlingService } from \u0027../error-handling.service\u0027;"},{"lineNumber":5,"author":{"gitId":"ptvrajsk"},"content":"import { GithubService } from \u0027../github.service\u0027;"},{"lineNumber":6,"author":{"gitId":"ptvrajsk"},"content":"import { MockGithubService } from \u0027../mocks/mock.github.service\u0027;"},{"lineNumber":7,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":8,"author":{"gitId":"ptvrajsk"},"content":"export function GithubServiceFactory(handling: ErrorHandlingService, apollo: Apollo, electron: ElectronService) {"},{"lineNumber":9,"author":{"gitId":"ptvrajsk"},"content":"  if (AppConfig.test) {"},{"lineNumber":10,"author":{"gitId":"ptvrajsk"},"content":"      return new MockGithubService();"},{"lineNumber":11,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":12,"author":{"gitId":"ptvrajsk"},"content":"  return new GithubService(handling, apollo, electron);"},{"lineNumber":13,"author":{"gitId":"ptvrajsk"},"content":"}"}],"authorContributionMap":{"ptvrajsk":13}},{"path":"src/app/core/services/factories/factory.issue.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"ptvrajsk"},"content":"import { GithubService } from \u0027../github.service\u0027;"},{"lineNumber":2,"author":{"gitId":"ptvrajsk"},"content":"import { AppConfig } from \u0027../../../../environments/environment\u0027;"},{"lineNumber":3,"author":{"gitId":"ptvrajsk"},"content":"import { MockIssueService } from \u0027../mocks/mock.issue.service\u0027;"},{"lineNumber":4,"author":{"gitId":"ptvrajsk"},"content":"import { IssueService } from \u0027../issue.service\u0027;"},{"lineNumber":5,"author":{"gitId":"ptvrajsk"},"content":"import { UserService } from \u0027../user.service\u0027;"},{"lineNumber":6,"author":{"gitId":"ptvrajsk"},"content":"import { PhaseService } from \u0027../phase.service\u0027;"},{"lineNumber":7,"author":{"gitId":"ptvrajsk"},"content":"import { PermissionService } from \u0027../permission.service\u0027;"},{"lineNumber":8,"author":{"gitId":"ptvrajsk"},"content":"import { ErrorHandlingService } from \u0027../error-handling.service\u0027;"},{"lineNumber":9,"author":{"gitId":"ptvrajsk"},"content":"import { DataService } from \u0027../data.service\u0027;"},{"lineNumber":10,"author":{"gitId":"dingyuchen"},"content":"import { ElectronService } from \u0027../electron.service\u0027;"},{"lineNumber":11,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":12,"author":{"gitId":"ptvrajsk"},"content":"export function IssueServiceFactory(githubService: GithubService, userService: UserService, phaseService: PhaseService,"},{"lineNumber":13,"author":{"gitId":"ptvrajsk"},"content":"                                    permissionService: PermissionService, errorHandlingService: ErrorHandlingService,"},{"lineNumber":14,"author":{"gitId":"dingyuchen"},"content":"                                    electronService: ElectronService, dataService: DataService) {"},{"lineNumber":15,"author":{"gitId":"ptvrajsk"},"content":"  if (AppConfig.test) {"},{"lineNumber":16,"author":{"gitId":"ptvrajsk"},"content":"      return new MockIssueService(githubService, userService, phaseService,"},{"lineNumber":17,"author":{"gitId":"ptvrajsk"},"content":"        permissionService, errorHandlingService, dataService);"},{"lineNumber":18,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":19,"author":{"gitId":"ptvrajsk"},"content":"  return new IssueService(githubService, userService, phaseService,"},{"lineNumber":20,"author":{"gitId":"dingyuchen"},"content":"    permissionService, errorHandlingService, electronService, dataService);"},{"lineNumber":21,"author":{"gitId":"ptvrajsk"},"content":"}"}],"authorContributionMap":{"dingyuchen":3,"ptvrajsk":18}},{"path":"src/app/core/services/github.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { catchError, filter, flatMap, map, throwIfEmpty } from \u0027rxjs/operators\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { forkJoin, from, Observable, of, throwError } from \u0027rxjs\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { getNumberOfPages } from \u0027../../shared/lib/github-paginator-parser\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { IssueComment } from \u0027../models/comment.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { ERRORCODE_NOT_FOUND, ErrorHandlingService } from \u0027./error-handling.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { GithubUser } from \u0027../models/github-user.model\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { GithubIssue } from \u0027../models/github/github-issue.model\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { GithubComment } from \u0027../models/github/github-comment.model\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { GithubRelease } from \u0027../models/github/github.release\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { GithubResponse } from \u0027../models/github/github-response.model\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { IssuesCacheManager } from \u0027../models/github/cache-manager/issues-cache-manager.model\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { IssueLastModifiedManagerModel } from \u0027../models/github/cache-manager/issue-last-modified-manager.model\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { Apollo, QueryRef } from \u0027apollo-angular\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  FetchIssue,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  FetchIssueQuery, FetchIssues, FetchIssuesByTeam, FetchIssuesByTeamQuery, FetchIssuesQuery,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"} from \u0027../../../../graphql/graphql-types\u0027;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import { GithubGraphqlIssue } from \u0027../models/github/github-graphql.issue\u0027;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import { ApolloQueryResult } from \u0027apollo-client\u0027;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import { HttpErrorResponse } from \u0027@angular/common/http\u0027;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import RestGithubIssueFilter from \u0027../models/github/github-issue-filter.model\u0027;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import { DocumentNode } from \u0027graphql\u0027;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import { ElectronService } from \u0027./electron.service\u0027;"},{"lineNumber":25,"author":{"gitId":"dingyuchen"},"content":"import { SessionData } from \u0027../models/session.model\u0027;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"const Octokit \u003d require(\u0027@octokit/rest\u0027);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"const CATCHER_ORG \u003d \u0027CATcher-org\u0027;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"const CATCHER_REPO \u003d \u0027CATcher\u0027;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"let ORG_NAME \u003d \u0027\u0027;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"let MOD_ORG \u003d \u0027\u0027;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"let REPO \u003d \u0027\u0027;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"let DATA_REPO \u003d \u0027\u0027;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"let octokit \u003d new Octokit();"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"})"},{"lineNumber":40,"author":{"gitId":"-"},"content":"export class GithubService {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  private static readonly IF_NONE_MATCH_EMPTY \u003d { \u0027If-None-Match\u0027: \u0027\u0027 };"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"  private issuesCacheManager \u003d new IssuesCacheManager();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  private issuesLastModifiedManager \u003d new IssueLastModifiedManagerModel();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  private issueQueryRefs \u003d new Map\u003cNumber, QueryRef\u003cFetchIssueQuery\u003e\u003e();"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private errorHandlingService: ErrorHandlingService,"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private apollo: Apollo,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private electronService: ElectronService,"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  ) {}"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"  storeOAuthAccessToken(accessToken: string) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    octokit \u003d new Octokit({"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      auth() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return `Token ${accessToken}`;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"  storeOrganizationDetails(orgName: string, dataRepo: string) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    MOD_ORG \u003d orgName;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    DATA_REPO \u003d dataRepo;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"  storePhaseDetails(phaseRepoOwner: string, repoName: string) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    REPO \u003d repoName;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    ORG_NAME \u003d phaseRepoOwner;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"  fetchIssuesGraphqlByTeam(tutorial: string, team: string, issuesFilter: RestGithubIssueFilter): Observable\u003cArray\u003cGithubIssue\u003e\u003e {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    const graphqlFilter \u003d issuesFilter.convertToGraphqlFilter();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    return this.toFetchIssues(issuesFilter).pipe("},{"lineNumber":74,"author":{"gitId":"-"},"content":"      filter(toFetch \u003d\u003e toFetch),"},{"lineNumber":75,"author":{"gitId":"-"},"content":"      flatMap(() \u003d\u003e {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return this.fetchGraphqlList\u003cFetchIssuesByTeamQuery, GithubGraphqlIssue\u003e("},{"lineNumber":77,"author":{"gitId":"-"},"content":"          FetchIssuesByTeam,"},{"lineNumber":78,"author":{"gitId":"-"},"content":"          { owner: ORG_NAME, name: REPO, filter: {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"              ...graphqlFilter,"},{"lineNumber":80,"author":{"gitId":"-"},"content":"              labels: [...(graphqlFilter.labels ? graphqlFilter.labels : []), team]"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            }, tutorial },"},{"lineNumber":82,"author":{"gitId":"-"},"content":"          (result) \u003d\u003e result.data.repository.label.issues.edges,"},{"lineNumber":83,"author":{"gitId":"-"},"content":"          GithubGraphqlIssue"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":85,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":87,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"  fetchIssuesGraphql(issuesFilter: RestGithubIssueFilter): Observable\u003cArray\u003cGithubIssue\u003e\u003e {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    const graphqlFilter \u003d issuesFilter.convertToGraphqlFilter();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    return this.toFetchIssues(issuesFilter).pipe("},{"lineNumber":92,"author":{"gitId":"-"},"content":"      filter(toFetch \u003d\u003e toFetch),"},{"lineNumber":93,"author":{"gitId":"-"},"content":"      flatMap(() \u003d\u003e {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return this.fetchGraphqlList\u003cFetchIssuesQuery, GithubGraphqlIssue\u003e("},{"lineNumber":95,"author":{"gitId":"-"},"content":"          FetchIssues,"},{"lineNumber":96,"author":{"gitId":"-"},"content":"          { owner: ORG_NAME, name: REPO, filter: graphqlFilter },"},{"lineNumber":97,"author":{"gitId":"-"},"content":"          (result) \u003d\u003e result.data.repository.issues.edges,"},{"lineNumber":98,"author":{"gitId":"-"},"content":"          GithubGraphqlIssue"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":102,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":105,"author":{"gitId":"-"},"content":"   * Will make multiple request to Github as per necessary and determine whether a graphql fetch is required."},{"lineNumber":106,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":107,"author":{"gitId":"-"},"content":"  private toFetchIssues(filter: RestGithubIssueFilter): Observable\u003cboolean\u003e {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    let responseInFirstPage: GithubResponse\u003cGithubIssue[]\u003e;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    return this.getIssuesAPICall(filter, 1).pipe("},{"lineNumber":110,"author":{"gitId":"-"},"content":"      map((response: GithubResponse\u003cGithubIssue[]\u003e) \u003d\u003e {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        responseInFirstPage \u003d response;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return getNumberOfPages(response);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":114,"author":{"gitId":"-"},"content":"      flatMap((numOfPages: number) \u003d\u003e {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        const apiCalls: Observable\u003cGithubResponse\u003cGithubIssue[]\u003e\u003e[] \u003d [];"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        for (let i \u003d 2; i \u003c\u003d numOfPages; i++) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"          apiCalls.push(this.getIssuesAPICall(filter, i));"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return apiCalls.length \u003d\u003d\u003d 0 ? of([]) : forkJoin(apiCalls);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":121,"author":{"gitId":"-"},"content":"      map((resultArray: GithubResponse\u003cGithubIssue[]\u003e[]) \u003d\u003e {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        const responses \u003d [responseInFirstPage, ...resultArray];"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        const isCached \u003d responses.reduce((result, response) \u003d\u003e {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"          return result \u0026\u0026 response.isCached;"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }, true);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        responses.forEach((resp, index) \u003d\u003e this.issuesCacheManager.set(index + 1, resp));"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        return !isCached;"},{"lineNumber":128,"author":{"gitId":"-"},"content":"      }));"},{"lineNumber":129,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":132,"author":{"gitId":"-"},"content":"   * Checks if the specified repository exists."},{"lineNumber":133,"author":{"gitId":"-"},"content":"   * @param owner - Owner of Specified Repository."},{"lineNumber":134,"author":{"gitId":"-"},"content":"   * @param repo - Name of Repository."},{"lineNumber":135,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":136,"author":{"gitId":"-"},"content":"  isRepositoryPresent(owner: string, repo: string): Observable\u003cboolean\u003e {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    return from(octokit.repos.get({owner: owner, repo: repo, headers: GithubService.IF_NONE_MATCH_EMPTY})).pipe("},{"lineNumber":138,"author":{"gitId":"-"},"content":"      map((rawData: {status: number}) \u003d\u003e {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        return rawData.status !\u003d\u003d ERRORCODE_NOT_FOUND;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":141,"author":{"gitId":"-"},"content":"      catchError(err \u003d\u003e {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        return of(false);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":144,"author":{"gitId":"-"},"content":"      catchError(err \u003d\u003e throwError(\u0027Failed to fetch repo data.\u0027))"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":146,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":149,"author":{"gitId":"-"},"content":"   * Creates a repository in for the authenticated user location."},{"lineNumber":150,"author":{"gitId":"-"},"content":"   * @param name - Name of Repo to create."},{"lineNumber":151,"author":{"gitId":"-"},"content":"   * @return Observable\u003cboolean\u003e - That returns true if the repository has been successfully"},{"lineNumber":152,"author":{"gitId":"-"},"content":"   *                                created."},{"lineNumber":153,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":154,"author":{"gitId":"-"},"content":"  createRepository(name: string): void {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    octokit.repos.createForAuthenticatedUser({name: name});"},{"lineNumber":156,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"  fetchIssueGraphql(id: number): Observable\u003cGithubGraphqlIssue\u003e {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    if (this.issueQueryRefs.get(id) \u003d\u003d\u003d undefined) {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"      const newQueryRef \u003d this.apollo.watchQuery\u003cFetchIssueQuery\u003e({"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        query: FetchIssue,"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        variables: {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"          owner: ORG_NAME,"},{"lineNumber":164,"author":{"gitId":"-"},"content":"          name: REPO,"},{"lineNumber":165,"author":{"gitId":"-"},"content":"          issueId: id,"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":168,"author":{"gitId":"-"},"content":"      this.issueQueryRefs.set(id, newQueryRef);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"    const queryRef \u003d this.issueQueryRefs.get(id);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    return this.toFetchIssue(id).pipe("},{"lineNumber":173,"author":{"gitId":"-"},"content":"      filter(toFetch \u003d\u003e toFetch),"},{"lineNumber":174,"author":{"gitId":"-"},"content":"      flatMap(() \u003d\u003e from(queryRef.refetch())),"},{"lineNumber":175,"author":{"gitId":"-"},"content":"      map((value: ApolloQueryResult\u003cFetchIssueQuery\u003e) \u003d\u003e {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        return new GithubGraphqlIssue(value.data.repository.issue);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":178,"author":{"gitId":"-"},"content":"      throwIfEmpty(() \u003d\u003e new HttpErrorResponse({ status: 304 }))"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":180,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"  toFetchIssue(id: number): Observable\u003cboolean\u003e {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    return from(octokit.issues.get({owner: ORG_NAME, repo: REPO, issue_number: id,"},{"lineNumber":184,"author":{"gitId":"-"},"content":"      headers: { \u0027If-Modified-Since\u0027: this.issuesLastModifiedManager.get(id) }})).pipe("},{"lineNumber":185,"author":{"gitId":"-"},"content":"      map((response: GithubResponse\u003cGithubIssue\u003e) \u003d\u003e {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        this.issuesLastModifiedManager.set(id, response.headers[\u0027last-modified\u0027]);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":188,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":189,"author":{"gitId":"-"},"content":"      catchError(err \u003d\u003e throwError(\u0027Failed to fetch issue.\u0027))"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":191,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"  fetchAllLabels(): Observable\u003cArray\u003c{}\u003e\u003e {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    return from(octokit.issues.listLabelsForRepo({owner: ORG_NAME, repo: REPO, headers: GithubService.IF_NONE_MATCH_EMPTY})).pipe("},{"lineNumber":195,"author":{"gitId":"-"},"content":"      map(response \u003d\u003e {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        return response[\u0027data\u0027];"},{"lineNumber":197,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":198,"author":{"gitId":"-"},"content":"      catchError(err \u003d\u003e throwError(\u0027Failed to fetch labels.\u0027))"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":200,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":203,"author":{"gitId":"-"},"content":"   * Creates a label in the current repository."},{"lineNumber":204,"author":{"gitId":"-"},"content":"   * @param formattedLabelName - name of new label."},{"lineNumber":205,"author":{"gitId":"-"},"content":"   * @param labelColor - colour of new label."},{"lineNumber":206,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":207,"author":{"gitId":"-"},"content":"  createLabel(formattedLabelName: string, labelColor: string): void {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    octokit.issues.createLabel({owner: ORG_NAME, repo: REPO, name: formattedLabelName, color: labelColor});"},{"lineNumber":209,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":212,"author":{"gitId":"-"},"content":"   * Updates a label\u0027s information in the current repository."},{"lineNumber":213,"author":{"gitId":"-"},"content":"   * @param labelName - name of existing label"},{"lineNumber":214,"author":{"gitId":"-"},"content":"   * @param labelColor - new color to be assigned to existing label."},{"lineNumber":215,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":216,"author":{"gitId":"-"},"content":"  updateLabel(labelName: string, labelColor: string): void {"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    octokit.issues.updateLabel({owner: ORG_NAME, repo: REPO, name: labelName, current_name: labelName, color: labelColor});"},{"lineNumber":218,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"  closeIssue(id: number): Observable\u003cGithubIssue\u003e {"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    return from(octokit.issues.update({owner: ORG_NAME, repo: REPO, issue_number: id, state: \u0027closed\u0027})).pipe("},{"lineNumber":222,"author":{"gitId":"-"},"content":"      map((response: GithubResponse\u003cGithubIssue\u003e) \u003d\u003e {"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        this.issuesLastModifiedManager.set(id, response.headers[\u0027last-modified\u0027]);"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        return new GithubIssue(response.data);"},{"lineNumber":225,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":227,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"  createIssue(title: string, description: string, labels: string[]): Observable\u003cGithubIssue\u003e {"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    return from(octokit.issues.create({owner: ORG_NAME, repo: REPO, title: title, body: description, labels: labels})).pipe("},{"lineNumber":231,"author":{"gitId":"-"},"content":"      map((response: GithubResponse\u003cGithubIssue\u003e) \u003d\u003e {"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        return new GithubIssue(response.data);"},{"lineNumber":233,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":235,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"  createIssueComment(issueId: number, description: string): Observable\u003cGithubComment\u003e {"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    return from(octokit.issues.createComment({owner: ORG_NAME, repo: REPO, issue_number: issueId,"},{"lineNumber":239,"author":{"gitId":"-"},"content":"      body: description})).pipe("},{"lineNumber":240,"author":{"gitId":"-"},"content":"      map((response: GithubResponse\u003cGithubComment\u003e) \u003d\u003e {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        return response.data;"},{"lineNumber":242,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"  updateIssue(id: number, title: string, description: string, labels: string[], assignees?: string[]): Observable\u003cGithubIssue\u003e {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    return from(octokit.issues.update({owner: ORG_NAME, repo: REPO, issue_number: id, title: title, body: description, labels: labels,"},{"lineNumber":248,"author":{"gitId":"-"},"content":"      assignees: assignees})).pipe("},{"lineNumber":249,"author":{"gitId":"-"},"content":"      map((response: GithubResponse\u003cGithubIssue\u003e) \u003d\u003e {"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        this.issuesLastModifiedManager.set(id, response.headers[\u0027last-modified\u0027]);"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        return new GithubIssue(response.data);"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":253,"author":{"gitId":"-"},"content":"      catchError(err \u003d\u003e {"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        return throwError(err);"},{"lineNumber":255,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":257,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"  updateIssueComment(issueComment: IssueComment): Observable\u003cGithubComment\u003e {"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    return from(octokit.issues.updateComment({owner: ORG_NAME, repo: REPO, comment_id: issueComment.id,"},{"lineNumber":261,"author":{"gitId":"-"},"content":"      body: issueComment.description})).pipe("},{"lineNumber":262,"author":{"gitId":"-"},"content":"      map((response: GithubResponse\u003cGithubComment\u003e) \u003d\u003e {"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        return response.data;"},{"lineNumber":264,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"  uploadFile(filename: string, base64String: string): Observable\u003cany\u003e {"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    return from(octokit.repos.createOrUpdateFile({owner: ORG_NAME, repo: REPO, path: `files/${filename}`,"},{"lineNumber":270,"author":{"gitId":"-"},"content":"      message: \u0027upload file\u0027, content: base64String}));"},{"lineNumber":271,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":"  fetchEventsForRepo(): Observable\u003cany[]\u003e {"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    return from(octokit.issues.listEventsForRepo({owner: ORG_NAME, repo: REPO, headers: GithubService.IF_NONE_MATCH_EMPTY})).pipe("},{"lineNumber":275,"author":{"gitId":"-"},"content":"      map(response \u003d\u003e {"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        return response[\u0027data\u0027];"},{"lineNumber":277,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":278,"author":{"gitId":"-"},"content":"      catchError(err \u003d\u003e throwError(\u0027Failed to fetch events for repo.\u0027))"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":280,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":"  fetchDataFile(): Observable\u003c{}\u003e {"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    return from(octokit.repos.getContents({owner: MOD_ORG, repo: DATA_REPO, path: \u0027data.csv\u0027,"},{"lineNumber":284,"author":{"gitId":"-"},"content":"      headers: GithubService.IF_NONE_MATCH_EMPTY})).pipe("},{"lineNumber":285,"author":{"gitId":"-"},"content":"        map(rawData \u003d\u003e {"},{"lineNumber":286,"author":{"gitId":"-"},"content":"          return {data: atob(rawData[\u0027data\u0027][\u0027content\u0027])};"},{"lineNumber":287,"author":{"gitId":"-"},"content":"        }),"},{"lineNumber":288,"author":{"gitId":"-"},"content":"      catchError(err \u003d\u003e throwError(\u0027Failed to fetch data file.\u0027))"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":290,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":"  fetchLatestRelease(): Observable\u003cGithubRelease\u003e {"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    return from(octokit.repos.getLatestRelease({owner: CATCHER_ORG, repo: CATCHER_REPO, headers: GithubService.IF_NONE_MATCH_EMPTY})).pipe("},{"lineNumber":294,"author":{"gitId":"-"},"content":"      map(res \u003d\u003e res[\u0027data\u0027]),"},{"lineNumber":295,"author":{"gitId":"-"},"content":"      catchError(err \u003d\u003e throwError(\u0027Failed to fetch latest release.\u0027))"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":297,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":300,"author":{"gitId":"-"},"content":"   * Fetches the data file that is regulates session information."},{"lineNumber":301,"author":{"gitId":"dingyuchen"},"content":"   * @return Observable\u003cSessionData\u003e representing session information."},{"lineNumber":302,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":303,"author":{"gitId":"dingyuchen"},"content":"  fetchSettingsFile(): Observable\u003cSessionData\u003e {"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    return from(octokit.repos.getContents({owner: MOD_ORG, repo: DATA_REPO, path: \u0027settings.json\u0027,"},{"lineNumber":305,"author":{"gitId":"-"},"content":"      headers: GithubService.IF_NONE_MATCH_EMPTY})).pipe("},{"lineNumber":306,"author":{"gitId":"-"},"content":"        map(rawData \u003d\u003e JSON.parse(atob(rawData[\u0027data\u0027][\u0027content\u0027]))),"},{"lineNumber":307,"author":{"gitId":"-"},"content":"      catchError(err \u003d\u003e throwError(\u0027Failed to fetch settings file.\u0027))"},{"lineNumber":308,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":309,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":310,"author":{"gitId":"-"},"content":""},{"lineNumber":311,"author":{"gitId":"-"},"content":"  fetchAuthenticatedUser(): Observable\u003cGithubUser\u003e {"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    return from(octokit.users.getAuthenticated()).pipe("},{"lineNumber":313,"author":{"gitId":"-"},"content":"      map(response \u003d\u003e {"},{"lineNumber":314,"author":{"gitId":"-"},"content":"        return response[\u0027data\u0027];"},{"lineNumber":315,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":316,"author":{"gitId":"-"},"content":"      catchError(err \u003d\u003e throwError(\u0027Failed to fetch authenticated user.\u0027))"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":318,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":319,"author":{"gitId":"-"},"content":""},{"lineNumber":320,"author":{"gitId":"-"},"content":"  getRepoURL(): string {"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    return ORG_NAME.concat(\u0027/\u0027).concat(REPO);"},{"lineNumber":322,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":323,"author":{"gitId":"-"},"content":""},{"lineNumber":324,"author":{"gitId":"-"},"content":"  viewIssueInBrowser(id: number) {"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    if (id) {"},{"lineNumber":326,"author":{"gitId":"-"},"content":"      this.electronService.openLink(\u0027https://github.com/\u0027.concat(this.getRepoURL()).concat(\u0027/issues/\u0027).concat(String(id)));"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":328,"author":{"gitId":"-"},"content":"      this.errorHandlingService.handleError(\u0027Unable to open this issue in Browser\u0027);"},{"lineNumber":329,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":331,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":332,"author":{"gitId":"-"},"content":""},{"lineNumber":333,"author":{"gitId":"-"},"content":"  reset(): void {"},{"lineNumber":334,"author":{"gitId":"-"},"content":"    this.issuesCacheManager.clear();"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    this.issuesLastModifiedManager.clear();"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    this.issueQueryRefs.clear();"},{"lineNumber":337,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":"  private getIssuesAPICall(filter: RestGithubIssueFilter, pageNumber: number): Observable\u003cGithubResponse\u003cGithubIssue[]\u003e\u003e {"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    const apiCall: Promise\u003cGithubResponse\u003cGithubIssue[]\u003e\u003e \u003d octokit.issues.listForRepo({...filter, owner: ORG_NAME,"},{"lineNumber":341,"author":{"gitId":"-"},"content":"      repo: REPO, sort: \u0027created\u0027, direction: \u0027desc\u0027, per_page: 100, page: pageNumber,"},{"lineNumber":342,"author":{"gitId":"-"},"content":"      headers: { \u0027If-None-Match\u0027: this.issuesCacheManager.getEtagFor(pageNumber) }});"},{"lineNumber":343,"author":{"gitId":"-"},"content":"    const apiCall$ \u003d from(apiCall);"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    return apiCall$.pipe("},{"lineNumber":345,"author":{"gitId":"-"},"content":"      catchError(err \u003d\u003e {"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        return of(this.issuesCacheManager.get(pageNumber));"},{"lineNumber":347,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":349,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":350,"author":{"gitId":"-"},"content":""},{"lineNumber":351,"author":{"gitId":"-"},"content":"  private fetchGraphqlList\u003cT, M\u003e("},{"lineNumber":352,"author":{"gitId":"-"},"content":"    query: DocumentNode,"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    variables: {},"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    pluckEdges: (results: ApolloQueryResult\u003cT\u003e) \u003d\u003e Array\u003cany\u003e,"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    Model: new (data) \u003d\u003e M,"},{"lineNumber":356,"author":{"gitId":"-"},"content":"  ): Observable\u003cArray\u003cM\u003e\u003e {"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    return from(this.withPagination\u003cT\u003e(pluckEdges)(query, variables)).pipe("},{"lineNumber":358,"author":{"gitId":"-"},"content":"      map((results: Array\u003cApolloQueryResult\u003cT\u003e\u003e) \u003d\u003e {"},{"lineNumber":359,"author":{"gitId":"-"},"content":"        const issues \u003d results.reduce((accumulated, current) \u003d\u003e accumulated.concat(pluckEdges(current)), []);"},{"lineNumber":360,"author":{"gitId":"-"},"content":"        return issues.map(issue \u003d\u003e new Model(issue.node));"},{"lineNumber":361,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":362,"author":{"gitId":"-"},"content":"      throwIfEmpty(() \u003d\u003e {"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        return new HttpErrorResponse({ status: 304 });"},{"lineNumber":364,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":366,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":367,"author":{"gitId":"-"},"content":""},{"lineNumber":368,"author":{"gitId":"-"},"content":"  private withPagination\u003cT\u003e(pluckEdges: (results: ApolloQueryResult\u003cT\u003e) \u003d\u003e Array\u003cany\u003e) {"},{"lineNumber":369,"author":{"gitId":"-"},"content":"    return async ("},{"lineNumber":370,"author":{"gitId":"-"},"content":"      query: DocumentNode,"},{"lineNumber":371,"author":{"gitId":"-"},"content":"      variables: { [key: string]: any } \u003d {}"},{"lineNumber":372,"author":{"gitId":"-"},"content":"    ): Promise\u003cArray\u003cApolloQueryResult\u003cT\u003e\u003e\u003e \u003d\u003e {"},{"lineNumber":373,"author":{"gitId":"-"},"content":"      const maxResultsCount \u003d 100;"},{"lineNumber":374,"author":{"gitId":"-"},"content":"      const cursor \u003d variables.cursor || null;"},{"lineNumber":375,"author":{"gitId":"-"},"content":"      const graphqlQuery \u003d this.apollo.watchQuery\u003cT\u003e({ query, variables: { ...variables, cursor } });"},{"lineNumber":376,"author":{"gitId":"-"},"content":"      return graphqlQuery.refetch().then(async (results: ApolloQueryResult\u003cT\u003e) \u003d\u003e {"},{"lineNumber":377,"author":{"gitId":"-"},"content":"        const intermediate \u003d Array.isArray(results) ? results : [results];"},{"lineNumber":378,"author":{"gitId":"-"},"content":"        const edges \u003d pluckEdges(results);"},{"lineNumber":379,"author":{"gitId":"-"},"content":"        const nextCursor \u003d (edges.length \u003d\u003d\u003d 0) ? null : edges[edges.length - 1].cursor;"},{"lineNumber":380,"author":{"gitId":"-"},"content":""},{"lineNumber":381,"author":{"gitId":"-"},"content":"        if (edges.length \u003c maxResultsCount || !nextCursor) {"},{"lineNumber":382,"author":{"gitId":"-"},"content":"          return intermediate;"},{"lineNumber":383,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":384,"author":{"gitId":"-"},"content":"        const nextResults \u003d await this.withPagination\u003cT\u003e(pluckEdges)("},{"lineNumber":385,"author":{"gitId":"-"},"content":"          query, {"},{"lineNumber":386,"author":{"gitId":"-"},"content":"            ...variables,"},{"lineNumber":387,"author":{"gitId":"-"},"content":"            cursor: nextCursor,"},{"lineNumber":388,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":389,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":390,"author":{"gitId":"-"},"content":"        return intermediate.concat(nextResults);"},{"lineNumber":391,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":392,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":393,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":394,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dingyuchen":3,"-":391}},{"path":"src/app/core/services/githubevent.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { Observable, of } from \u0027rxjs\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { map, flatMap } from \u0027rxjs/operators\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027./issue.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":9,"author":{"gitId":"-"},"content":"})"},{"lineNumber":10,"author":{"gitId":"-"},"content":"export class GithubEventService {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"  private lastModified: string; // The timestamp when the title or label of an issue is changed"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  private lastModifiedComment: string; // The timestamp when the comment of an issue is changed"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"  constructor(private githubService: GithubService, private issueService: IssueService) { }"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   * Calls the Github service api to return the latest github event (e.g renaming an issue\u0027s title)"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   * of current repository and store the timestamps of the event in this service"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  setLatestChangeEvent(): Observable\u003cany\u003e {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      return this.githubService.fetchEventsForRepo().pipe("},{"lineNumber":23,"author":{"gitId":"-"},"content":"        map((response) \u003d\u003e {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"          if (response.length \u003d\u003d\u003d 0) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            return response;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":27,"author":{"gitId":"-"},"content":"          this.setLastModifiedTime(response[0][\u0027created_at\u0027]);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          this.setLastModifiedCommentTime(response[0][\u0027issue\u0027][\u0027updated_at\u0027]);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          return response;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":35,"author":{"gitId":"seanlowjk"},"content":"   * Returns the result whether the latest github event (e.g renaming an issue\u0027s title)"},{"lineNumber":36,"author":{"gitId":"seanlowjk"},"content":"   * of current repository has been retrieved or not."},{"lineNumber":37,"author":{"gitId":"seanlowjk"},"content":"   * @returns true if the issues were fetched from GitHub."},{"lineNumber":38,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":39,"author":{"gitId":"seanlowjk"},"content":"  reloadPage(): Observable\u003cboolean\u003e {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    return this.githubService.fetchEventsForRepo().pipe("},{"lineNumber":41,"author":{"gitId":"-"},"content":"      flatMap((response: any[]) \u003d\u003e {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (response.length \u003d\u003d\u003d 0) {"},{"lineNumber":43,"author":{"gitId":"seanlowjk"},"content":"          return of(false);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        const eventResponse \u003d response[0];"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Will only allow page to reload if the latest modify time is different"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // from last modified, meaning that some changes to the repo has occured."},{"lineNumber":48,"author":{"gitId":"seanlowjk"},"content":"        if (eventResponse[\u0027created_at\u0027] !\u003d\u003d this.lastModified ||"},{"lineNumber":49,"author":{"gitId":"seanlowjk"},"content":"        eventResponse[\u0027issue\u0027][\u0027updated_at\u0027] !\u003d\u003d this.lastModifiedComment) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          this.setLastModifiedTime(eventResponse[\u0027created_at\u0027]);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"          this.setLastModifiedCommentTime(eventResponse[\u0027issue\u0027][\u0027updated_at\u0027]);"},{"lineNumber":52,"author":{"gitId":"seanlowjk"},"content":"          return this.issueService.reloadAllIssues().pipe(map((response: any[]) \u003d\u003e true));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"seanlowjk"},"content":"        return of(false);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"  private setLastModifiedTime(lastModified: string): void {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    this.lastModified \u003d lastModified;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"  private setLastModifiedCommentTime(lastModified: string): void {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    this.lastModifiedComment \u003d lastModified;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"  reset() {"},{"lineNumber":68,"author":{"gitId":"seanlowjk"},"content":"    this.setLastModifiedTime(undefined);"},{"lineNumber":69,"author":{"gitId":"seanlowjk"},"content":"    this.setLastModifiedCommentTime(undefined);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seanlowjk":11,"-":60}},{"path":"src/app/core/services/issue.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { catchError, exhaustMap, finalize, flatMap, map } from \u0027rxjs/operators\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { BehaviorSubject, EMPTY, forkJoin, timer, Observable, of, Subscription } from \u0027rxjs\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  Issue,"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  Issues,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  IssuesFilter, STATUS,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"} from \u0027../models/issue.model\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { UserService } from \u0027./user.service\u0027;"},{"lineNumber":11,"author":{"gitId":"dingyuchen"},"content":"import { PhaseService } from \u0027./phase.service\u0027;"},{"lineNumber":12,"author":{"gitId":"dingyuchen"},"content":"import { Phase } from \u0027../models/phase.model\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { PermissionService } from \u0027./permission.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { DataService } from \u0027./data.service\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027./error-handling.service\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import { IssueDispute } from \u0027../models/issue-dispute.model\u0027;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import { GithubIssue } from \u0027../models/github/github-issue.model\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import { IssueComment } from \u0027../models/comment.model\u0027;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import { GithubLabel } from \u0027../models/github/github-label.model\u0027;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import RestGithubIssueFilter from \u0027../models/github/github-issue-filter.model\u0027;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import { GithubComment } from \u0027../models/github/github-comment.model\u0027;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import { HiddenData } from \u0027../models/hidden-data.model\u0027;"},{"lineNumber":23,"author":{"gitId":"dingyuchen"},"content":"import { ElectronService } from \u0027./electron.service\u0027;"},{"lineNumber":24,"author":{"gitId":"dingyuchen"},"content":"import { appVersion } from \u0027./application.service\u0027;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027,"},{"lineNumber":28,"author":{"gitId":"-"},"content":"})"},{"lineNumber":29,"author":{"gitId":"-"},"content":"export class IssueService {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  static readonly POLL_INTERVAL \u003d 5000; // 5 seconds"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"  issues: Issues;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  issues$: BehaviorSubject\u003cIssue[]\u003e;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"  private sessionId: string;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  private issueTeamFilter \u003d \u0027All Teams\u0027;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  private issuesPollSubscription: Subscription;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  /** Whether the IssueService is downloading the data from Github*/"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  public isLoading \u003d new BehaviorSubject\u003cboolean\u003e(false);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"  constructor(private githubService: GithubService,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"              private userService: UserService,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"              private phaseService: PhaseService,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"              private permissionService: PermissionService,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"              private errorHandlingService: ErrorHandlingService,"},{"lineNumber":46,"author":{"gitId":"dingyuchen"},"content":"              private electronService: ElectronService,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"              private dataService: DataService) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    this.issues$ \u003d new BehaviorSubject(new Array\u003cIssue\u003e());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"  startPollIssues() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    if (this.issuesPollSubscription \u003d\u003d\u003d undefined) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      if (this.issues$.getValue().length \u003d\u003d\u003d 0) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this.isLoading.next(true);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"      this.issuesPollSubscription \u003d timer(0, IssueService.POLL_INTERVAL).pipe("},{"lineNumber":58,"author":{"gitId":"-"},"content":"        exhaustMap(() \u003d\u003e {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"          return this.reloadAllIssues().pipe("},{"lineNumber":60,"author":{"gitId":"-"},"content":"            catchError(() \u003d\u003e {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"              return EMPTY;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            }),"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            finalize(() \u003d\u003e this.isLoading.next(false))"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }),"},{"lineNumber":66,"author":{"gitId":"-"},"content":"      ).subscribe();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"  stopPollIssues() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    if (this.issuesPollSubscription) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"      this.issuesPollSubscription.unsubscribe();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      this.issuesPollSubscription \u003d undefined;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"   * Will constantly poll and update the application\u0027s state\u0027s with the updated issue."},{"lineNumber":79,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":80,"author":{"gitId":"-"},"content":"   * @param issueId - The issue\u0027s id to poll for."},{"lineNumber":81,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"  pollIssue(issueId: number): Observable\u003cIssue\u003e {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    return timer(0, IssueService.POLL_INTERVAL).pipe("},{"lineNumber":84,"author":{"gitId":"-"},"content":"      exhaustMap(() \u003d\u003e {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return this.githubService.fetchIssueGraphql(issueId).pipe("},{"lineNumber":86,"author":{"gitId":"-"},"content":"          map((response) \u003d\u003e {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            const issue \u003d this.createIssueModel(response);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            this.updateLocalStore(issue);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            return issue;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"          }),"},{"lineNumber":91,"author":{"gitId":"-"},"content":"          catchError((err) \u003d\u003e {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            return this.getIssue(issueId);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"          })"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"  reloadAllIssues() {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    return this.initializeData();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"  getIssue(id: number): Observable\u003cIssue\u003e {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    if (this.issues \u003d\u003d\u003d undefined) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"      return this.getLatestIssue(id);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"      return of(this.issues[id]);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"  getLatestIssue(id: number): Observable\u003cIssue\u003e {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    return this.githubService.fetchIssueGraphql(id).pipe("},{"lineNumber":113,"author":{"gitId":"-"},"content":"      map((response: GithubIssue) \u003d\u003e {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        this.createAndSaveIssueModel(response);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        return this.issues[id];"},{"lineNumber":116,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":117,"author":{"gitId":"-"},"content":"      catchError((err) \u003d\u003e {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        return of(this.issues[id]);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":121,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"  createIssue(title: string, description: string, severity: string, type: string): Observable\u003cIssue\u003e {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    const labelsArray \u003d [this.createLabel(\u0027severity\u0027, severity), this.createLabel(\u0027type\u0027, type)];"},{"lineNumber":125,"author":{"gitId":"dingyuchen"},"content":"    const clientType \u003d this.electronService.isElectron() ? \u0027Desktop\u0027 : \u0027Web\u0027;"},{"lineNumber":126,"author":{"gitId":"dingyuchen"},"content":"    const hiddenData \u003d new Map([[\u0027session\u0027, this.sessionId], [\u0027Version\u0027, `${clientType} v${appVersion}`]]);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    const issueDescription \u003d HiddenData.embedDataIntoString(description, hiddenData);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    return this.githubService.createIssue(title, issueDescription, labelsArray).pipe("},{"lineNumber":129,"author":{"gitId":"-"},"content":"      map((response: GithubIssue) \u003d\u003e this.createIssueModel(response))"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":131,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"  updateIssue(issue: Issue): Observable\u003cIssue\u003e {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    const assignees \u003d this.phaseService.currentPhase \u003d\u003d\u003d Phase.phaseModeration ? [] : issue.assignees;"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    return this.githubService.updateIssue(issue.id, issue.title, this.createGithubIssueDescription(issue),"},{"lineNumber":136,"author":{"gitId":"-"},"content":"      this.createLabelsForIssue(issue), assignees).pipe("},{"lineNumber":137,"author":{"gitId":"-"},"content":"        map((response: GithubIssue) \u003d\u003e {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"          response.comments \u003d issue.githubComments;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"          return this.createIssueModel(response);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"  updateIssueWithComment(issue: Issue, issueComment: IssueComment): Observable\u003cIssue\u003e {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    return this.githubService.updateIssueComment(issueComment).pipe("},{"lineNumber":146,"author":{"gitId":"-"},"content":"      flatMap((updatedComment: GithubComment) \u003d\u003e {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        issue.githubComments \u003d ["},{"lineNumber":148,"author":{"gitId":"-"},"content":"          updatedComment,"},{"lineNumber":149,"author":{"gitId":"-"},"content":"          ...issue.githubComments.filter(c \u003d\u003e c.id !\u003d\u003d updatedComment.id),"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        ];"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        return this.updateIssue(issue);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":154,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"  updateTesterResponse(issue: Issue, issueComment: IssueComment): Observable\u003cIssue\u003e {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    const isTesterResponseExist \u003d this.issues[issue.id].testerResponses;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    const commentApiToCall \u003d isTesterResponseExist ? this.githubService.updateIssueComment(issueComment)"},{"lineNumber":159,"author":{"gitId":"-"},"content":"      : this.githubService.createIssueComment(issue.id, issueComment.description);"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"    const issueClone \u003d issue.clone(this.phaseService.currentPhase);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    issueClone.status \u003d STATUS.Done;"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    return forkJoin([commentApiToCall, this.updateIssue(issueClone)]).pipe("},{"lineNumber":165,"author":{"gitId":"-"},"content":"      map((responses) \u003d\u003e {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        const [githubComment, issue] \u003d responses;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        issue.updateTesterResponse(githubComment);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        return issue;"},{"lineNumber":169,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"  updateTutorResponse(issue: Issue, issueComment: IssueComment): Observable\u003cIssue\u003e {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    return forkJoin([this.githubService.updateIssueComment(issueComment), this.updateIssue(issue)]).pipe("},{"lineNumber":175,"author":{"gitId":"-"},"content":"      map(responses \u003d\u003e {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        const [githubComment, issue] \u003d responses;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        issue.updateDispute(githubComment);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        return issue;"},{"lineNumber":179,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":181,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"  createTeamResponse(issue: Issue): Observable\u003cIssue\u003e {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    const teamResponse \u003d issue.createGithubTeamResponse();"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    return this.githubService.createIssueComment(issue.id, teamResponse).pipe("},{"lineNumber":186,"author":{"gitId":"-"},"content":"      flatMap((githubComment: GithubComment) \u003d\u003e {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        issue.githubComments \u003d ["},{"lineNumber":188,"author":{"gitId":"-"},"content":"          githubComment,"},{"lineNumber":189,"author":{"gitId":"-"},"content":"          ...issue.githubComments.filter(c \u003d\u003e c.id !\u003d\u003d githubComment.id),"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        ];"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        return this.updateIssue(issue);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":194,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"  createTutorResponse(issue: Issue, response: string): Observable\u003cIssue\u003e {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    return forkJoin([this.githubService.createIssueComment(issue.id, response), this.updateIssue(issue)]).pipe("},{"lineNumber":198,"author":{"gitId":"-"},"content":"      map(responses \u003d\u003e {"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        const [githubComment, issue] \u003d responses;"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        issue.updateDispute(githubComment);"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        return issue;"},{"lineNumber":202,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":207,"author":{"gitId":"-"},"content":"   * This function will create a github representation of issue\u0027s description. Given the issue model, it will piece together the different"},{"lineNumber":208,"author":{"gitId":"-"},"content":"   * attributes to create the github\u0027s description."},{"lineNumber":209,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":210,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":211,"author":{"gitId":"-"},"content":"  private createGithubIssueDescription(issue: Issue): string {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    switch (this.phaseService.currentPhase) {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"      case Phase.phaseModeration:"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        return `# Issue Description\\n${issue.createGithubIssueDescription()}\\n# Team\\\u0027s Response\\n${issue.teamResponse}\\n ` +"},{"lineNumber":215,"author":{"gitId":"-"},"content":"         // `## State the duplicated issue here, if any\\n${issue.duplicateOf ? `Duplicate of #${issue.duplicateOf}` : `--`}\\n` +"},{"lineNumber":216,"author":{"gitId":"-"},"content":"          `# Disputes\\n\\n${this.getIssueDisputeString(issue.issueDisputes)}\\n`;"},{"lineNumber":217,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        return issue.createGithubIssueDescription();"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"  private getIssueDisputeString(issueDisputes: IssueDispute[]): string {"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    let issueDisputeString \u003d \u0027\u0027;"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    for (const issueDispute of issueDisputes) {"},{"lineNumber":225,"author":{"gitId":"-"},"content":"      issueDisputeString +\u003d issueDispute.toString();"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    return issueDisputeString;"},{"lineNumber":228,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"  deleteIssue(id: number): Observable\u003cIssue\u003e {"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    return this.githubService.closeIssue(id).pipe("},{"lineNumber":232,"author":{"gitId":"-"},"content":"      map((response: GithubIssue) \u003d\u003e {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        const deletedIssue \u003d this.createIssueModel(response);"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        this.deleteFromLocalStore(deletedIssue);"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        return deletedIssue;"},{"lineNumber":236,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":238,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":241,"author":{"gitId":"-"},"content":"   * This function will update the issue\u0027s state of the application. This function needs to be called whenever a issue is deleted."},{"lineNumber":242,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":243,"author":{"gitId":"-"},"content":"  deleteFromLocalStore(issueToDelete: Issue) {"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    const { [issueToDelete.id]: issueToRemove, ...withoutIssueToRemove } \u003d this.issues;"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    this.issues \u003d withoutIssueToRemove;"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    this.issues$.next(Object.values(this.issues));"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":250,"author":{"gitId":"-"},"content":"   * This function will update the issue\u0027s state of the application. This function needs to be called whenever a issue is added/updated."},{"lineNumber":251,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":252,"author":{"gitId":"-"},"content":"  updateLocalStore(issueToUpdate: Issue) {"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    this.issues \u003d {"},{"lineNumber":254,"author":{"gitId":"-"},"content":"      ...this.issues,"},{"lineNumber":255,"author":{"gitId":"-"},"content":"      [issueToUpdate.id]: issueToUpdate,"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    this.issues$.next(Object.values(this.issues));"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":261,"author":{"gitId":"-"},"content":"   * Check whether the issue has been responded in the phase 2/3."},{"lineNumber":262,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":263,"author":{"gitId":"-"},"content":"  hasTeamResponse(issueId: number): boolean {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    return !!this.issues[issueId].teamResponse;"},{"lineNumber":265,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":268,"author":{"gitId":"-"},"content":"   * Obtain an observable containing an array of issues that are duplicates of the parentIssue."},{"lineNumber":269,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":270,"author":{"gitId":"-"},"content":"  getDuplicateIssuesFor(parentIssue: Issue): Observable\u003cIssue[]\u003e {"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    return this.issues$.pipe(map((issues) \u003d\u003e {"},{"lineNumber":272,"author":{"gitId":"-"},"content":"      return issues.filter(issue \u003d\u003e {"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        return issue.duplicateOf \u003d\u003d\u003d parentIssue.id;"},{"lineNumber":274,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    }));"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":"  reset() {"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    this.issues \u003d undefined;"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    this.sessionId \u003d undefined;"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    this.issues$.next(new Array\u003cIssue\u003e());"},{"lineNumber":282,"author":{"gitId":"-"},"content":""},{"lineNumber":283,"author":{"gitId":"-"},"content":"    this.stopPollIssues();"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    this.isLoading.complete();"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    this.isLoading \u003d new BehaviorSubject\u003cboolean\u003e(false);"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":"  private initializeData(): Observable\u003cIssue[]\u003e {"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    const issuesAPICallsByFilter: Array\u003cObservable\u003cArray\u003cGithubIssue\u003e\u003e\u003e \u003d [];"},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"-"},"content":"    switch (IssuesFilter[this.phaseService.currentPhase][this.userService.currentUser.role]) {"},{"lineNumber":292,"author":{"gitId":"-"},"content":"      case \u0027FILTER_BY_CREATOR\u0027:"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        issuesAPICallsByFilter.push("},{"lineNumber":294,"author":{"gitId":"-"},"content":"          this.githubService.fetchIssuesGraphql(new RestGithubIssueFilter({ creator: this.userService.currentUser.loginId }))"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":297,"author":{"gitId":"-"},"content":"      case \u0027FILTER_BY_TEAM\u0027: // Only student has this filter"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        issuesAPICallsByFilter.push("},{"lineNumber":299,"author":{"gitId":"-"},"content":"          this.githubService.fetchIssuesGraphqlByTeam("},{"lineNumber":300,"author":{"gitId":"-"},"content":"            this.createLabel(\u0027tutorial\u0027, this.userService.currentUser.team.tutorialClassId),"},{"lineNumber":301,"author":{"gitId":"-"},"content":"            this.createLabel(\u0027team\u0027, this.userService.currentUser.team.teamId),"},{"lineNumber":302,"author":{"gitId":"-"},"content":"            new RestGithubIssueFilter({}))"},{"lineNumber":303,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":304,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":305,"author":{"gitId":"-"},"content":"      case \u0027FILTER_BY_TEAM_ASSIGNED\u0027: // Only for Tutors and Admins"},{"lineNumber":306,"author":{"gitId":"-"},"content":"        const allocatedTeams \u003d this.userService.currentUser.allocatedTeams;"},{"lineNumber":307,"author":{"gitId":"-"},"content":"        allocatedTeams.forEach(team \u003d\u003e {"},{"lineNumber":308,"author":{"gitId":"-"},"content":"          issuesAPICallsByFilter.push("},{"lineNumber":309,"author":{"gitId":"-"},"content":"            this.githubService.fetchIssuesGraphqlByTeam("},{"lineNumber":310,"author":{"gitId":"-"},"content":"              this.createLabel(\u0027tutorial\u0027, team.tutorialClassId),"},{"lineNumber":311,"author":{"gitId":"-"},"content":"              this.createLabel(\u0027team\u0027, team.teamId),"},{"lineNumber":312,"author":{"gitId":"-"},"content":"              new RestGithubIssueFilter({}))"},{"lineNumber":313,"author":{"gitId":"-"},"content":"          );"},{"lineNumber":314,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":315,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":316,"author":{"gitId":"-"},"content":"      case \u0027NO_FILTER\u0027:"},{"lineNumber":317,"author":{"gitId":"-"},"content":"        issuesAPICallsByFilter.push("},{"lineNumber":318,"author":{"gitId":"-"},"content":"          this.githubService.fetchIssuesGraphql(new RestGithubIssueFilter({}))"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":320,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":321,"author":{"gitId":"-"},"content":"      case \u0027NO_ACCESS\u0027:"},{"lineNumber":322,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":323,"author":{"gitId":"-"},"content":"        return of([]);"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":325,"author":{"gitId":"-"},"content":""},{"lineNumber":326,"author":{"gitId":"-"},"content":"    // const issuesAPICallsByFilter \u003d filters.map(filter \u003d\u003e this.githubService.fetchIssuesGraphql(filter));"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    return forkJoin(issuesAPICallsByFilter).pipe("},{"lineNumber":328,"author":{"gitId":"-"},"content":"      map((issuesByFilter: [][]) \u003d\u003e {"},{"lineNumber":329,"author":{"gitId":"-"},"content":"        for (const issues of issuesByFilter) {"},{"lineNumber":330,"author":{"gitId":"-"},"content":"          for (const issue of issues) {"},{"lineNumber":331,"author":{"gitId":"-"},"content":"            this.createAndSaveIssueModel(issue);"},{"lineNumber":332,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":333,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":334,"author":{"gitId":"-"},"content":"        return Object.values(this.issues);"},{"lineNumber":335,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":337,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":"  private createAndSaveIssueModel(githubIssue: GithubIssue): boolean {"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    const issue \u003d this.createIssueModel(githubIssue);"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    this.updateLocalStore(issue);"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    return true;"},{"lineNumber":343,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":346,"author":{"gitId":"-"},"content":"   * Given an issue model, create the necessary labels for github."},{"lineNumber":347,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":348,"author":{"gitId":"-"},"content":"  private createLabelsForIssue(issue: Issue): string[] {"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    const result \u003d [];"},{"lineNumber":350,"author":{"gitId":"-"},"content":""},{"lineNumber":351,"author":{"gitId":"-"},"content":"    if (this.phaseService.currentPhase !\u003d\u003d Phase.phaseBugReporting \u0026\u0026"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        this.phaseService.currentPhase !\u003d\u003d Phase.phaseTesterResponse) {"},{"lineNumber":353,"author":{"gitId":"-"},"content":"      const studentTeam \u003d issue.teamAssigned.id.split(\u0027-\u0027);"},{"lineNumber":354,"author":{"gitId":"-"},"content":"      result.push(this.createLabel(\u0027tutorial\u0027, `${studentTeam[0]}-${studentTeam[1]}`),"},{"lineNumber":355,"author":{"gitId":"-"},"content":"        this.createLabel(\u0027team\u0027, studentTeam[2]));"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":357,"author":{"gitId":"-"},"content":""},{"lineNumber":358,"author":{"gitId":"-"},"content":"    if (issue.severity) {"},{"lineNumber":359,"author":{"gitId":"-"},"content":"      result.push(this.createLabel(\u0027severity\u0027, issue.severity));"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":361,"author":{"gitId":"-"},"content":""},{"lineNumber":362,"author":{"gitId":"-"},"content":"    if (issue.type) {"},{"lineNumber":363,"author":{"gitId":"-"},"content":"      result.push(this.createLabel(\u0027type\u0027, issue.type));"},{"lineNumber":364,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":365,"author":{"gitId":"-"},"content":""},{"lineNumber":366,"author":{"gitId":"-"},"content":"    if (issue.responseTag) {"},{"lineNumber":367,"author":{"gitId":"-"},"content":"      result.push(this.createLabel(\u0027response\u0027, issue.responseTag));"},{"lineNumber":368,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":369,"author":{"gitId":"-"},"content":""},{"lineNumber":370,"author":{"gitId":"-"},"content":"    if (issue.duplicated) {"},{"lineNumber":371,"author":{"gitId":"-"},"content":"      result.push(\u0027duplicate\u0027);"},{"lineNumber":372,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":373,"author":{"gitId":"-"},"content":""},{"lineNumber":374,"author":{"gitId":"-"},"content":"    if (issue.status) {"},{"lineNumber":375,"author":{"gitId":"-"},"content":"      result.push(this.createLabel(\u0027status\u0027, issue.status));"},{"lineNumber":376,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":377,"author":{"gitId":"-"},"content":""},{"lineNumber":378,"author":{"gitId":"-"},"content":"    if (issue.pending) {"},{"lineNumber":379,"author":{"gitId":"-"},"content":"      if (+issue.pending \u003e 0) {"},{"lineNumber":380,"author":{"gitId":"-"},"content":"        result.push(this.createLabel(\u0027pending\u0027, issue.pending));"},{"lineNumber":381,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":382,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"    if (issue.unsure) {"},{"lineNumber":385,"author":{"gitId":"-"},"content":"      result.push(\u0027unsure\u0027);"},{"lineNumber":386,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":387,"author":{"gitId":"-"},"content":""},{"lineNumber":388,"author":{"gitId":"-"},"content":"    return result;"},{"lineNumber":389,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":390,"author":{"gitId":"-"},"content":""},{"lineNumber":391,"author":{"gitId":"-"},"content":"  private createLabel(prepend: string, value: string) {"},{"lineNumber":392,"author":{"gitId":"-"},"content":"    return `${prepend}.${value}`;"},{"lineNumber":393,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":394,"author":{"gitId":"-"},"content":""},{"lineNumber":395,"author":{"gitId":"-"},"content":"  private extractTeamIdFromGithubIssue(githubIssue: GithubIssue): string {"},{"lineNumber":396,"author":{"gitId":"-"},"content":"    return githubIssue.findLabel(GithubLabel.LABELS.tutorial).concat(\u0027-\u0027).concat(githubIssue.findLabel(GithubLabel.LABELS.team));"},{"lineNumber":397,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":398,"author":{"gitId":"-"},"content":""},{"lineNumber":399,"author":{"gitId":"-"},"content":"  private createIssueModel(githubIssue: GithubIssue): Issue {"},{"lineNumber":400,"author":{"gitId":"-"},"content":"    switch (this.phaseService.currentPhase) {"},{"lineNumber":401,"author":{"gitId":"-"},"content":"      case Phase.phaseBugReporting:"},{"lineNumber":402,"author":{"gitId":"-"},"content":"        return Issue.createPhaseBugReportingIssue(githubIssue);"},{"lineNumber":403,"author":{"gitId":"-"},"content":"      case Phase.phaseTeamResponse:"},{"lineNumber":404,"author":{"gitId":"-"},"content":"        return Issue.createPhaseTeamResponseIssue(githubIssue,"},{"lineNumber":405,"author":{"gitId":"-"},"content":"          this.dataService.getTeam(this.extractTeamIdFromGithubIssue(githubIssue)));"},{"lineNumber":406,"author":{"gitId":"-"},"content":"      case Phase.phaseTesterResponse:"},{"lineNumber":407,"author":{"gitId":"-"},"content":"        return Issue.createPhaseTesterResponseIssue(githubIssue);"},{"lineNumber":408,"author":{"gitId":"-"},"content":"      case Phase.phaseModeration:"},{"lineNumber":409,"author":{"gitId":"-"},"content":"        return Issue.createPhaseModerationIssue(githubIssue,"},{"lineNumber":410,"author":{"gitId":"-"},"content":"          this.dataService.getTeam(this.extractTeamIdFromGithubIssue(githubIssue)));"},{"lineNumber":411,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":412,"author":{"gitId":"-"},"content":"        return;"},{"lineNumber":413,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":414,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":415,"author":{"gitId":"-"},"content":""},{"lineNumber":416,"author":{"gitId":"-"},"content":"  setIssueTeamFilter(filterValue: string) {"},{"lineNumber":417,"author":{"gitId":"-"},"content":"    if (filterValue) {"},{"lineNumber":418,"author":{"gitId":"-"},"content":"      this.issueTeamFilter \u003d filterValue;"},{"lineNumber":419,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":420,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":421,"author":{"gitId":"-"},"content":""},{"lineNumber":422,"author":{"gitId":"-"},"content":"  setSessionId(sessionId: string) {"},{"lineNumber":423,"author":{"gitId":"-"},"content":"    this.sessionId \u003d sessionId;"},{"lineNumber":424,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":425,"author":{"gitId":"-"},"content":""},{"lineNumber":426,"author":{"gitId":"-"},"content":"  getIssueTeamFilter(): string {"},{"lineNumber":427,"author":{"gitId":"-"},"content":"    return this.issueTeamFilter;"},{"lineNumber":428,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":429,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dingyuchen":7,"-":422}},{"path":"src/app/core/services/label.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":3,"author":{"gitId":"seanlowjk"},"content":"import { map, flatMap } from \u0027rxjs/operators\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { Label } from \u0027../models/label.model\u0027;"},{"lineNumber":5,"author":{"gitId":"seanlowjk"},"content":"import { Observable, pipe, UnaryFunction } from \u0027rxjs\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/* The threshold to decide if color is dark or light."},{"lineNumber":8,"author":{"gitId":"-"},"content":"A higher threshold value will result in more colors determined to be \"dark\"."},{"lineNumber":9,"author":{"gitId":"-"},"content":"W3C recommendation is 0.179, but 0.184 is chosen so that some colors (like bright red)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"are considered dark (Github too consider them dark) */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"const COLOR_DARKNESS_THRESHOLD \u003d 0.184;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"const COLOR_DARK_TEXT  \u003d \u0027000000\u0027; // Dark color for text with light background"},{"lineNumber":14,"author":{"gitId":"-"},"content":"const COLOR_LIGHT_TEXT  \u003d \u0027FFFFFF\u0027; // Light color for text with dark background"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"const DISPLAY_NAME_SEVERITY \u003d \u0027Severity\u0027;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"const DISPLAY_NAME_BUG_TYPE \u003d \u0027Bug Type\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"const DISPLAY_NAME_RESPONSE \u003d \u0027Response\u0027;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"ptvrajsk"},"content":"const REQUIRED_LABELS \u003d {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  severity: {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    VeryLow: new Label(\u0027severity\u0027, \u0027VeryLow\u0027, \u0027ffe0e0\u0027),"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    Low: new Label(\u0027severity\u0027, \u0027Low\u0027, \u0027ffcccc\u0027),"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    Medium: new Label(\u0027severity\u0027, \u0027Medium\u0027, \u0027ff9999\u0027),"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    High: new Label(\u0027severity\u0027, \u0027High\u0027, \u0027ff6666\u0027)"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  type: {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    DocumentationBug: new Label(\u0027type\u0027, \u0027DocumentationBug\u0027, \u0027d966ff\u0027),"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    FeatureFlaw: new Label(\u0027type\u0027, \u0027FeatureFlaw\u0027, \u0027d966ff\u0027),"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    FunctionalityBug: new Label(\u0027type\u0027, \u0027FunctionalityBug\u0027, \u00279900cc\u0027)"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  response: {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    Accepted: new Label(\u0027response\u0027, \u0027Accepted\u0027, \u002700802b\u0027),"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    CannotReproduce: new Label(\u0027response\u0027, \u0027CannotReproduce\u0027, \u0027ffebcc\u0027),"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    IssueUnclear: new Label(\u0027response\u0027, \u0027IssueUnclear\u0027, \u0027ffcc80\u0027),"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    NotInScope: new Label(\u0027response\u0027, \u0027NotInScope\u0027, \u0027ffcc80\u0027),"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    Rejected: new Label(\u0027response\u0027, \u0027Rejected\u0027, \u0027ff9900\u0027)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  status: {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    Done: new Label(\u0027status\u0027, \u0027Done\u0027, \u0027a6a6a6\u0027),"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    Incomplete: new Label(\u0027status\u0027, \u0027Incomplete\u0027, \u0027000000\u0027)"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  others: {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    duplicate: new Label(undefined, \u0027duplicate\u0027, \u00270066ff\u0027)"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":46,"author":{"gitId":"-"},"content":"};"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":50,"author":{"gitId":"-"},"content":"})"},{"lineNumber":51,"author":{"gitId":"-"},"content":"export class LabelService {"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"ptvrajsk"},"content":"  private static severityLabels: Label[] \u003d Object.values(REQUIRED_LABELS.severity);"},{"lineNumber":54,"author":{"gitId":"ptvrajsk"},"content":"  private static typeLabels: Label[] \u003d Object.values(REQUIRED_LABELS.type);"},{"lineNumber":55,"author":{"gitId":"ptvrajsk"},"content":"  private static responseLabels: Label[] \u003d Object.values(REQUIRED_LABELS.response);"},{"lineNumber":56,"author":{"gitId":"ptvrajsk"},"content":"  private static statusLabels: Label[] \u003d Object.values(REQUIRED_LABELS.status);"},{"lineNumber":57,"author":{"gitId":"ptvrajsk"},"content":"  private static otherLabels: Label[] \u003d Object.values(REQUIRED_LABELS.others);"},{"lineNumber":58,"author":{"gitId":"ptvrajsk"},"content":"  private static labelArrays \u003d {"},{"lineNumber":59,"author":{"gitId":"ptvrajsk"},"content":"    severity: LabelService.severityLabels,"},{"lineNumber":60,"author":{"gitId":"ptvrajsk"},"content":"    type: LabelService.typeLabels,"},{"lineNumber":61,"author":{"gitId":"ptvrajsk"},"content":"    response: LabelService.responseLabels,"},{"lineNumber":62,"author":{"gitId":"ptvrajsk"},"content":"    status: LabelService.statusLabels,"},{"lineNumber":63,"author":{"gitId":"ptvrajsk"},"content":"    others: LabelService.otherLabels"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"  constructor(private githubService: GithubService) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"ptvrajsk"},"content":"  public static getRequiredLabelsAsArray(): Label[] {"},{"lineNumber":70,"author":{"gitId":"ptvrajsk"},"content":"    let requiredLabels: Label[] \u003d [];"},{"lineNumber":71,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":72,"author":{"gitId":"ptvrajsk"},"content":"    for (const category of Object.keys(this.labelArrays)) {"},{"lineNumber":73,"author":{"gitId":"ptvrajsk"},"content":"      requiredLabels \u003d requiredLabels.concat(this.labelArrays[category]);"},{"lineNumber":74,"author":{"gitId":"ptvrajsk"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":76,"author":{"gitId":"ptvrajsk"},"content":"    return requiredLabels;"},{"lineNumber":77,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":78,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":79,"author":{"gitId":"seanlowjk"},"content":"  /**"},{"lineNumber":80,"author":{"gitId":"seanlowjk"},"content":"   * Returns an custom operator which helps to"},{"lineNumber":81,"author":{"gitId":"seanlowjk"},"content":"   * synchronise the labels in our application"},{"lineNumber":82,"author":{"gitId":"seanlowjk"},"content":"   * with the remote repository."},{"lineNumber":83,"author":{"gitId":"seanlowjk"},"content":"   */"},{"lineNumber":84,"author":{"gitId":"seanlowjk"},"content":"  syncLabels(): UnaryFunction\u003cObservable\u003cboolean\u003e, Observable\u003cany\u003e\u003e {"},{"lineNumber":85,"author":{"gitId":"seanlowjk"},"content":"    return pipe("},{"lineNumber":86,"author":{"gitId":"seanlowjk"},"content":"      flatMap(() \u003d\u003e this.synchronizeRemoteLabels())"},{"lineNumber":87,"author":{"gitId":"seanlowjk"},"content":"    );"},{"lineNumber":88,"author":{"gitId":"seanlowjk"},"content":"  }"},{"lineNumber":89,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"   * Synchronizes the labels in github with those required by the application."},{"lineNumber":92,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"  synchronizeRemoteLabels(): Observable\u003cany\u003e {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"      return this.githubService.fetchAllLabels().pipe("},{"lineNumber":95,"author":{"gitId":"-"},"content":"        map((response) \u003d\u003e {"},{"lineNumber":96,"author":{"gitId":"ptvrajsk"},"content":"          this.ensureRepoHasRequiredLabels(this.parseLabelData(response), LabelService.getRequiredLabelsAsArray());"},{"lineNumber":97,"author":{"gitId":"-"},"content":"          return response;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":99,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   * Returns all the labels of a certain type (e.g severity)"},{"lineNumber":104,"author":{"gitId":"-"},"content":"   * @param attributeName: the type of the label"},{"lineNumber":105,"author":{"gitId":"-"},"content":"   * @return an array of label of that type"},{"lineNumber":106,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":107,"author":{"gitId":"-"},"content":"  getLabelList(attributeName: string): Label[] {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    switch (attributeName) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"      case \u0027severity\u0027:"},{"lineNumber":110,"author":{"gitId":"ptvrajsk"},"content":"        return LabelService.severityLabels;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"      case \u0027type\u0027:"},{"lineNumber":112,"author":{"gitId":"ptvrajsk"},"content":"        return LabelService.typeLabels;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"      case \u0027responseTag\u0027:"},{"lineNumber":114,"author":{"gitId":"-"},"content":"      case \u0027response\u0027:"},{"lineNumber":115,"author":{"gitId":"ptvrajsk"},"content":"        return LabelService.responseLabels;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":120,"author":{"gitId":"-"},"content":"   * Returns a title for the label type"},{"lineNumber":121,"author":{"gitId":"-"},"content":"   * @param attributeName: the type of the label"},{"lineNumber":122,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":123,"author":{"gitId":"-"},"content":"  getLabelTitle(attributeName: string): string {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    switch (attributeName) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"      case \u0027severity\u0027:"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        return DISPLAY_NAME_SEVERITY;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"      case \u0027type\u0027:"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return DISPLAY_NAME_BUG_TYPE;"},{"lineNumber":129,"author":{"gitId":"-"},"content":"      case \u0027responseTag\u0027:"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return DISPLAY_NAME_RESPONSE;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":135,"author":{"gitId":"-"},"content":"   * Returns the color of the label by searching a list of"},{"lineNumber":136,"author":{"gitId":"-"},"content":"   * all available labels."},{"lineNumber":137,"author":{"gitId":"-"},"content":"   * @param labelValue: the label\u0027s value (e.g Low / Medium / High / ...)"},{"lineNumber":138,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":139,"author":{"gitId":"-"},"content":"  getColorOfLabel(labelValue: string): string {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    // TODO: Rewrite function - labelValue insufficient to differentiate between labels. Should use `labelCategory.labelValue` format."},{"lineNumber":141,"author":{"gitId":"-"},"content":"    const WHITE_COLOR \u003d \u0027ffffff\u0027;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    if (labelValue \u003d\u003d\u003d \u0027\u0027) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"      return WHITE_COLOR;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"ptvrajsk"},"content":"    const existingLabel \u003d LabelService.getRequiredLabelsAsArray().find(label \u003d\u003e label.labelValue \u003d\u003d\u003d labelValue);"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    if (existingLabel \u003d\u003d\u003d undefined || existingLabel.labelColor \u003d\u003d\u003d undefined) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"      return WHITE_COLOR;"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"      return existingLabel.labelColor;"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":156,"author":{"gitId":"-"},"content":"   * Ensures that the repo has the required labels."},{"lineNumber":157,"author":{"gitId":"-"},"content":"   * Compares the actual labels in the repo with the required labels. If an required label is missing,"},{"lineNumber":158,"author":{"gitId":"-"},"content":"   * it is added to the repo. If the required label exists but the label color is not as expected,"},{"lineNumber":159,"author":{"gitId":"-"},"content":"   * the color is updated. Does not delete actual labels that do not match required labels."},{"lineNumber":160,"author":{"gitId":"-"},"content":"   * i.e., the repo might have more labels than the required labels after this operation."},{"lineNumber":161,"author":{"gitId":"-"},"content":"   * @param actualLabels: labels in the repo."},{"lineNumber":162,"author":{"gitId":"-"},"content":"   * @param requiredLabels: required labels."},{"lineNumber":163,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  private ensureRepoHasRequiredLabels(actualLabels: Label[], requiredLabels: Label[]): void {"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    requiredLabels.forEach(label \u003d\u003e {"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"      // Finds for a label that has the same name as a required label."},{"lineNumber":169,"author":{"gitId":"-"},"content":"      const nameMatchedLabels: Label[] \u003d actualLabels.filter(remoteLabel \u003d\u003e"},{"lineNumber":170,"author":{"gitId":"-"},"content":"          remoteLabel.getFormattedName() \u003d\u003d\u003d label.getFormattedName());"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"      if (nameMatchedLabels.length \u003d\u003d\u003d 0) {"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"        // Create new Label (Could not find a label with the same name \u0026 category)"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        this.githubService.createLabel(label.getFormattedName(), label.labelColor);"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"      } else if (nameMatchedLabels.length \u003d\u003d\u003d 1) {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        if (nameMatchedLabels[0].equals(label)) {"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"          // the label exists exactly as expected -\u003e do nothing"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"          // the label exists but the color does not match"},{"lineNumber":185,"author":{"gitId":"-"},"content":"          this.githubService.updateLabel(label.getFormattedName(), label.labelColor);"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"-"},"content":"      } else {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        throw new Error(\u0027Unexpected error: the repo has multiple labels with the same name \u0027 + label.getFormattedName());"},{"lineNumber":190,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":193,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":196,"author":{"gitId":"-"},"content":"   * Parses label information and returns an array of Label objects."},{"lineNumber":197,"author":{"gitId":"-"},"content":"   * @param labels - Label Information from API."},{"lineNumber":198,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":199,"author":{"gitId":"-"},"content":"  parseLabelData(labels: Array\u003c{}\u003e): Label[] {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    const labelData: Label[] \u003d [];"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"    for (const label of labels) {"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"      let labelCategory: string;"},{"lineNumber":205,"author":{"gitId":"-"},"content":"      let labelValue: string;"},{"lineNumber":206,"author":{"gitId":"-"},"content":"      const containsDotRegex \u003d /\\./g;"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"      const rawName: string \u003d String(label[\u0027name\u0027]);"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"      [labelCategory, labelValue] \u003d containsDotRegex.test(rawName)"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        ? String(label[\u0027name\u0027]).split(\u0027.\u0027)"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        : [undefined, rawName];"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"      const labelColor: string \u003d String(label[\u0027color\u0027]);"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"      labelData.push(new Label(labelCategory, labelValue, labelColor));"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    return labelData;"},{"lineNumber":219,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"   /**"},{"lineNumber":222,"author":{"gitId":"-"},"content":"   * Returns true if the given color is considered \"dark\""},{"lineNumber":223,"author":{"gitId":"-"},"content":"   * The color is considered \"dark\" if its luminance is less than COLOR_DARKNESS_THRESHOLD"},{"lineNumber":224,"author":{"gitId":"-"},"content":"   * @param inputColor: the color"},{"lineNumber":225,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":226,"author":{"gitId":"-"},"content":"  isDarkColor(inputColor: string): boolean {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    const COLOR \u003d (inputColor.charAt(0) \u003d\u003d\u003d \u0027#\u0027) ? inputColor.substring(1, 7) : inputColor;"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    const R \u003d parseInt(COLOR.substring(0, 2), 16);"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    const G \u003d parseInt(COLOR.substring(2, 4), 16);"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    const B \u003d parseInt(COLOR.substring(4, 6), 16);"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    const RGB \u003d [R / 255, G / 255, B / 255];"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    const LINEAR_RGB \u003d RGB.map((col) \u003d\u003e {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"      if (col \u003c\u003d 0.03928) {"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        return col / 12.92;"},{"lineNumber":235,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":236,"author":{"gitId":"-"},"content":"      return Math.pow((col + 0.055) / 1.055, 2.4);"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    // Calculate the luminance of the color"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    const LUMINANCE \u003d (0.2126 * LINEAR_RGB[0]) + (0.7152 * LINEAR_RGB[1]) + (0.0722 * LINEAR_RGB[2]);"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    // The color is \"dark\" if the luminance is lower than the threshold"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    return LUMINANCE \u003c COLOR_DARKNESS_THRESHOLD;"},{"lineNumber":242,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":245,"author":{"gitId":"-"},"content":"   * Returns a css style for the label to use"},{"lineNumber":246,"author":{"gitId":"-"},"content":"   * @param color: the color of the label"},{"lineNumber":247,"author":{"gitId":"-"},"content":"   * @return the style with background-color in rgb"},{"lineNumber":248,"author":{"gitId":"-"},"content":"   * @throws exception if input is an invalid color code"},{"lineNumber":249,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  setLabelStyle(color: string) {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    let textColor: string;"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"    textColor \u003d this.isDarkColor(color) ? COLOR_LIGHT_TEXT : COLOR_DARK_TEXT;"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":"    const styles \u003d {"},{"lineNumber":256,"author":{"gitId":"-"},"content":"      \u0027background-color\u0027 : `#${color}`,"},{"lineNumber":257,"author":{"gitId":"-"},"content":"      \u0027border-radius\u0027 : \u00273px\u0027,"},{"lineNumber":258,"author":{"gitId":"-"},"content":"      \u0027cursor\u0027 : \u0027default\u0027,"},{"lineNumber":259,"author":{"gitId":"-"},"content":"      \u0027padding\u0027 : \u00273px\u0027,"},{"lineNumber":260,"author":{"gitId":"-"},"content":"      \u0027color\u0027 : `#${textColor}`,"},{"lineNumber":261,"author":{"gitId":"-"},"content":"      \u0027font-weight\u0027 : \u0027410\u0027,"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":263,"author":{"gitId":"-"},"content":""},{"lineNumber":264,"author":{"gitId":"-"},"content":"    return styles;"},{"lineNumber":265,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ptvrajsk":27,"seanlowjk":13,"-":227}},{"path":"src/app/core/services/logging.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { ElectronService } from \u0027./electron.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { ElectronLog } from \u0027electron-log\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":7,"author":{"gitId":"-"},"content":"})"},{"lineNumber":8,"author":{"gitId":"-"},"content":"export class LoggingService {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  private logger: ElectronLog | Console;"},{"lineNumber":10,"author":{"gitId":"ptvrajsk"},"content":"  private isInSession \u003d false;"},{"lineNumber":11,"author":{"gitId":"ptvrajsk"},"content":"  private readonly LOG_KEY \u003d \u0027CATcher-Log\u0027;"},{"lineNumber":12,"author":{"gitId":"ptvrajsk"},"content":"  private readonly LOG_FILE_NAME \u003d \u0027CATcher-log.txt\u0027;"},{"lineNumber":13,"author":{"gitId":"ptvrajsk"},"content":"  public readonly LOG_START_HEADER \u003d \u0027\u003d\u003d\u003d\u003d\u003d\u003d New CATcher Session Log \u003d\u003d\u003d\u003d\u003d\u003d\u0027;"},{"lineNumber":14,"author":{"gitId":"ptvrajsk"},"content":"  public readonly LOG_COUNT_LIMIT \u003d 4;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"  constructor(electronService: ElectronService) {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    if (electronService.isElectron()) {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      this.logger \u003d window.require(\u0027electron-log\u0027);"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      this.logger \u003d console;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":23,"author":{"gitId":"ptvrajsk"},"content":"    this.startSession();"},{"lineNumber":24,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":25,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":26,"author":{"gitId":"ptvrajsk"},"content":"  reset() {"},{"lineNumber":27,"author":{"gitId":"ptvrajsk"},"content":"    this.isInSession \u003d false;"},{"lineNumber":28,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":29,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":30,"author":{"gitId":"ptvrajsk"},"content":"  /**"},{"lineNumber":31,"author":{"gitId":"ptvrajsk"},"content":"   * Configures loggging Session if Logging Service is not"},{"lineNumber":32,"author":{"gitId":"ptvrajsk"},"content":"   * in session."},{"lineNumber":33,"author":{"gitId":"ptvrajsk"},"content":"   */"},{"lineNumber":34,"author":{"gitId":"ptvrajsk"},"content":"  startSession() {"},{"lineNumber":35,"author":{"gitId":"ptvrajsk"},"content":"    // Prevents the OAuth Pop-up window from being able to"},{"lineNumber":36,"author":{"gitId":"ptvrajsk"},"content":"    // start a session."},{"lineNumber":37,"author":{"gitId":"ptvrajsk"},"content":"    if (window.opener \u0026\u0026 window.opener !\u003d\u003d window) {"},{"lineNumber":38,"author":{"gitId":"ptvrajsk"},"content":"      return;"},{"lineNumber":39,"author":{"gitId":"ptvrajsk"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"ptvrajsk"},"content":"    if (!this.isInSession) {"},{"lineNumber":41,"author":{"gitId":"ptvrajsk"},"content":"      this.isInSession \u003d true;"},{"lineNumber":42,"author":{"gitId":"ptvrajsk"},"content":"      this.initializeLogCache();"},{"lineNumber":43,"author":{"gitId":"ptvrajsk"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":45,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":46,"author":{"gitId":"ptvrajsk"},"content":"  initializeLogCache() {"},{"lineNumber":47,"author":{"gitId":"ptvrajsk"},"content":"    this.setCachedLog(this.getTrimmedLogCache(this.getCachedLog(), this.LOG_COUNT_LIMIT));"},{"lineNumber":48,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":49,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":50,"author":{"gitId":"ptvrajsk"},"content":"  /**"},{"lineNumber":51,"author":{"gitId":"ptvrajsk"},"content":"   * Trims the existing Log in the browser\u0027s cache to a select number"},{"lineNumber":52,"author":{"gitId":"ptvrajsk"},"content":"   * of Sessions if necessary."},{"lineNumber":53,"author":{"gitId":"ptvrajsk"},"content":"   * @param sessionCount The number of Session Logs to preserve in the cache"},{"lineNumber":54,"author":{"gitId":"ptvrajsk"},"content":"   */"},{"lineNumber":55,"author":{"gitId":"ptvrajsk"},"content":"  getTrimmedLogCache(currentLog: string, sessionCount: number): string {"},{"lineNumber":56,"author":{"gitId":"ptvrajsk"},"content":"    const sessionLogSeparator: string \u003d \u0027\\n\u0027.repeat(2); // More new-lines added for clarity."},{"lineNumber":57,"author":{"gitId":"ptvrajsk"},"content":"    const currentDateTime \u003d new Date().toLocaleString();"},{"lineNumber":58,"author":{"gitId":"ptvrajsk"},"content":"    const logHeaderWithDateTime \u003d `${this.LOG_START_HEADER}\\n${currentDateTime}`;"},{"lineNumber":59,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":60,"author":{"gitId":"ptvrajsk"},"content":"    // Check if Trimming is Necessary"},{"lineNumber":61,"author":{"gitId":"ptvrajsk"},"content":"    const numberOfSessions: number \u003d currentLog \u003d\u003d null ? 0 : currentLog.split(\u0027\\n\u0027)"},{"lineNumber":62,"author":{"gitId":"ptvrajsk"},"content":"      .filter((currentLogLine: string) \u003d\u003e currentLogLine.includes(this.LOG_START_HEADER))"},{"lineNumber":63,"author":{"gitId":"ptvrajsk"},"content":"      .length;"},{"lineNumber":64,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":65,"author":{"gitId":"ptvrajsk"},"content":"    if (numberOfSessions \u003d\u003d\u003d 0) {"},{"lineNumber":66,"author":{"gitId":"ptvrajsk"},"content":"      return logHeaderWithDateTime;"},{"lineNumber":67,"author":{"gitId":"ptvrajsk"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":69,"author":{"gitId":"ptvrajsk"},"content":"    if (numberOfSessions \u003c sessionCount) {"},{"lineNumber":70,"author":{"gitId":"ptvrajsk"},"content":"      return `${currentLog}${sessionLogSeparator}${logHeaderWithDateTime}`;"},{"lineNumber":71,"author":{"gitId":"ptvrajsk"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":73,"author":{"gitId":"ptvrajsk"},"content":"    const separatedSessionLogs: string[] \u003d currentLog.split(`${this.LOG_START_HEADER}`)"},{"lineNumber":74,"author":{"gitId":"ptvrajsk"},"content":"      .filter((line: string) \u003d\u003e !!line)"},{"lineNumber":75,"author":{"gitId":"ptvrajsk"},"content":"      .map((line: string) \u003d\u003e `${this.LOG_START_HEADER}\\n${line.trim()}`);"},{"lineNumber":76,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":77,"author":{"gitId":"ptvrajsk"},"content":"    separatedSessionLogs.splice(0, separatedSessionLogs.length - sessionCount + 1);"},{"lineNumber":78,"author":{"gitId":"ptvrajsk"},"content":"    separatedSessionLogs.push(`${logHeaderWithDateTime}`);"},{"lineNumber":79,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":80,"author":{"gitId":"ptvrajsk"},"content":"    return separatedSessionLogs.join(sessionLogSeparator);"},{"lineNumber":81,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":82,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":83,"author":{"gitId":"ptvrajsk"},"content":"  getCachedLog(): string {"},{"lineNumber":84,"author":{"gitId":"ptvrajsk"},"content":"    return localStorage.getItem(this.LOG_KEY);"},{"lineNumber":85,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":86,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":87,"author":{"gitId":"ptvrajsk"},"content":"  setCachedLog(updatedLog: string): void {"},{"lineNumber":88,"author":{"gitId":"ptvrajsk"},"content":"    localStorage.setItem(this.LOG_KEY, updatedLog);"},{"lineNumber":89,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":90,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":91,"author":{"gitId":"ptvrajsk"},"content":"  updateLog(... updatedLog: any[]): void {"},{"lineNumber":92,"author":{"gitId":"ptvrajsk"},"content":"    this.setCachedLog(`${this.getCachedLog()}\\n${updatedLog.toString()}`);"},{"lineNumber":93,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":94,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":95,"author":{"gitId":"ptvrajsk"},"content":"  exportLogFile() {"},{"lineNumber":96,"author":{"gitId":"ptvrajsk"},"content":"    const log: string \u003d this.getCachedLog();"},{"lineNumber":97,"author":{"gitId":"ptvrajsk"},"content":"    const blob: Blob \u003d new Blob([log], {type: \u0027file/txt\u0027});"},{"lineNumber":98,"author":{"gitId":"ptvrajsk"},"content":"    const blobUrl: string \u003d window.URL.createObjectURL(blob);"},{"lineNumber":99,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":100,"author":{"gitId":"ptvrajsk"},"content":"    const hiddenElement: HTMLAnchorElement \u003d document.createElement(\u0027a\u0027);"},{"lineNumber":101,"author":{"gitId":"ptvrajsk"},"content":"    hiddenElement.setAttribute(\u0027style\u0027, \u0027display: none;\u0027);"},{"lineNumber":102,"author":{"gitId":"ptvrajsk"},"content":"    hiddenElement.href \u003d blobUrl;"},{"lineNumber":103,"author":{"gitId":"ptvrajsk"},"content":"    hiddenElement.download \u003d this.LOG_FILE_NAME;"},{"lineNumber":104,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":105,"author":{"gitId":"ptvrajsk"},"content":"    // Add to DOM and Click to prompt download."},{"lineNumber":106,"author":{"gitId":"ptvrajsk"},"content":"    document.body.appendChild(hiddenElement);"},{"lineNumber":107,"author":{"gitId":"ptvrajsk"},"content":"    hiddenElement.click();"},{"lineNumber":108,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":109,"author":{"gitId":"ptvrajsk"},"content":"    // Remove URL + Created Attached Element"},{"lineNumber":110,"author":{"gitId":"ptvrajsk"},"content":"    window.URL.revokeObjectURL(blobUrl);"},{"lineNumber":111,"author":{"gitId":"ptvrajsk"},"content":"    document.body.removeChild(hiddenElement);"},{"lineNumber":112,"author":{"gitId":"ptvrajsk"},"content":"    hiddenElement.remove();"},{"lineNumber":113,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"  info(...params: any[]) {"},{"lineNumber":116,"author":{"gitId":"ptvrajsk"},"content":"    this.updateLog(params);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    this.logger.info(params);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"  error(...params: any[]) {"},{"lineNumber":121,"author":{"gitId":"ptvrajsk"},"content":"    this.updateLog(params);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    this.logger.error(params);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"  warn(...params: any[]) {"},{"lineNumber":126,"author":{"gitId":"ptvrajsk"},"content":"    this.updateLog(params);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    this.logger.warn(params);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"  debug(...params: any[]) {"},{"lineNumber":131,"author":{"gitId":"ptvrajsk"},"content":"    this.updateLog(params);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    this.logger.debug(params);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ptvrajsk":100,"-":34}},{"path":"src/app/core/services/mocks/mock.auth.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"ptvrajsk"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"ptvrajsk"},"content":"import { HttpClient } from \u0027@angular/common/http\u0027;"},{"lineNumber":3,"author":{"gitId":"ptvrajsk"},"content":"import { Router } from \u0027@angular/router\u0027;"},{"lineNumber":4,"author":{"gitId":"ptvrajsk"},"content":"import { BehaviorSubject } from \u0027rxjs\u0027;"},{"lineNumber":5,"author":{"gitId":"ptvrajsk"},"content":"import { NgZone } from \u0027@angular/core\u0027;"},{"lineNumber":6,"author":{"gitId":"ptvrajsk"},"content":"import { ElectronService } from \u0027../electron.service\u0027;"},{"lineNumber":7,"author":{"gitId":"ptvrajsk"},"content":"import { UserService } from \u0027../user.service\u0027;"},{"lineNumber":8,"author":{"gitId":"ptvrajsk"},"content":"import { PhaseService } from \u0027../phase.service\u0027;"},{"lineNumber":9,"author":{"gitId":"ptvrajsk"},"content":"import { ErrorHandlingService } from \u0027../error-handling.service\u0027;"},{"lineNumber":10,"author":{"gitId":"ptvrajsk"},"content":"import { GithubService } from \u0027../github.service\u0027;"},{"lineNumber":11,"author":{"gitId":"ptvrajsk"},"content":"import { IssueService } from \u0027../issue.service\u0027;"},{"lineNumber":12,"author":{"gitId":"ptvrajsk"},"content":"import { DataService } from \u0027../data.service\u0027;"},{"lineNumber":13,"author":{"gitId":"ptvrajsk"},"content":"import { LabelService } from \u0027../label.service\u0027;"},{"lineNumber":14,"author":{"gitId":"ptvrajsk"},"content":"import { Title } from \u0027@angular/platform-browser\u0027;"},{"lineNumber":15,"author":{"gitId":"ptvrajsk"},"content":"import { GithubEventService } from \u0027../githubevent.service\u0027;"},{"lineNumber":16,"author":{"gitId":"ptvrajsk"},"content":"import { uuid } from \u0027../../../shared/lib/uuid\u0027;"},{"lineNumber":17,"author":{"gitId":"ptvrajsk"},"content":"import { LoggingService } from \u0027../logging.service\u0027;"},{"lineNumber":18,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":19,"author":{"gitId":"ptvrajsk"},"content":"export enum AuthState { \u0027NotAuthenticated\u0027, \u0027AwaitingAuthentication\u0027, \u0027ConfirmOAuthUser\u0027, \u0027Authenticated\u0027}"},{"lineNumber":20,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":21,"author":{"gitId":"ptvrajsk"},"content":"@Injectable({"},{"lineNumber":22,"author":{"gitId":"ptvrajsk"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":23,"author":{"gitId":"ptvrajsk"},"content":"})"},{"lineNumber":24,"author":{"gitId":"ptvrajsk"},"content":"export class MockAuthService {"},{"lineNumber":25,"author":{"gitId":"ptvrajsk"},"content":"  authStateSource \u003d new BehaviorSubject(AuthState.NotAuthenticated);"},{"lineNumber":26,"author":{"gitId":"ptvrajsk"},"content":"  currentAuthState \u003d this.authStateSource.asObservable();"},{"lineNumber":27,"author":{"gitId":"ptvrajsk"},"content":"  accessToken \u003d new BehaviorSubject(undefined);"},{"lineNumber":28,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":29,"author":{"gitId":"ptvrajsk"},"content":"  constructor(private electronService: ElectronService, private router: Router, private ngZone: NgZone,"},{"lineNumber":30,"author":{"gitId":"ptvrajsk"},"content":"              private http: HttpClient,  private errorHandlingService: ErrorHandlingService,"},{"lineNumber":31,"author":{"gitId":"ptvrajsk"},"content":"              private githubService: GithubService,"},{"lineNumber":32,"author":{"gitId":"ptvrajsk"},"content":"              private userService: UserService,"},{"lineNumber":33,"author":{"gitId":"ptvrajsk"},"content":"              private issueService: IssueService,"},{"lineNumber":34,"author":{"gitId":"ptvrajsk"},"content":"              private phaseService: PhaseService,"},{"lineNumber":35,"author":{"gitId":"ptvrajsk"},"content":"              private labelService: LabelService,"},{"lineNumber":36,"author":{"gitId":"ptvrajsk"},"content":"              private dataService: DataService,"},{"lineNumber":37,"author":{"gitId":"ptvrajsk"},"content":"              private githubEventService: GithubEventService,"},{"lineNumber":38,"author":{"gitId":"ptvrajsk"},"content":"              private titleService: Title,"},{"lineNumber":39,"author":{"gitId":"ptvrajsk"},"content":"              private logger: LoggingService) {}"},{"lineNumber":40,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":41,"author":{"gitId":"ptvrajsk"},"content":"  /**"},{"lineNumber":42,"author":{"gitId":"ptvrajsk"},"content":"   * Will store the OAuth token."},{"lineNumber":43,"author":{"gitId":"ptvrajsk"},"content":"   */"},{"lineNumber":44,"author":{"gitId":"ptvrajsk"},"content":"  storeOAuthAccessToken(token: string) {"},{"lineNumber":45,"author":{"gitId":"ptvrajsk"},"content":"    this.githubService.storeOAuthAccessToken(token);"},{"lineNumber":46,"author":{"gitId":"ptvrajsk"},"content":"    this.accessToken.next(token);"},{"lineNumber":47,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":48,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":49,"author":{"gitId":"ptvrajsk"},"content":"  reset(): void {"},{"lineNumber":50,"author":{"gitId":"ptvrajsk"},"content":"    this.accessToken.next(undefined);"},{"lineNumber":51,"author":{"gitId":"ptvrajsk"},"content":"    this.changeAuthState(AuthState.NotAuthenticated);"},{"lineNumber":52,"author":{"gitId":"ptvrajsk"},"content":"    this.ngZone.run(() \u003d\u003e this.router.navigate([\u0027\u0027]));"},{"lineNumber":53,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":54,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":55,"author":{"gitId":"ptvrajsk"},"content":"  logOut(): void {"},{"lineNumber":56,"author":{"gitId":"ptvrajsk"},"content":"    this.githubService.reset();"},{"lineNumber":57,"author":{"gitId":"ptvrajsk"},"content":"    this.userService.reset();"},{"lineNumber":58,"author":{"gitId":"ptvrajsk"},"content":"    this.issueService.reset();"},{"lineNumber":59,"author":{"gitId":"ptvrajsk"},"content":"    this.phaseService.reset();"},{"lineNumber":60,"author":{"gitId":"ptvrajsk"},"content":"    this.dataService.reset();"},{"lineNumber":61,"author":{"gitId":"ptvrajsk"},"content":"    this.githubEventService.reset();"},{"lineNumber":62,"author":{"gitId":"ptvrajsk"},"content":"    this.logger.reset();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    this.setLandingPageTitle();"},{"lineNumber":64,"author":{"gitId":"ptvrajsk"},"content":"    this.issueService.setIssueTeamFilter(\u0027All Teams\u0027);"},{"lineNumber":65,"author":{"gitId":"ptvrajsk"},"content":"    this.reset();"},{"lineNumber":66,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":67,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":68,"author":{"gitId":"ptvrajsk"},"content":"  isAuthenticated(): boolean {"},{"lineNumber":69,"author":{"gitId":"ptvrajsk"},"content":"    return this.authStateSource.getValue() \u003d\u003d\u003d AuthState.Authenticated;"},{"lineNumber":70,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":71,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":72,"author":{"gitId":"ptvrajsk"},"content":"  changeAuthState(newAuthState: AuthState) {"},{"lineNumber":73,"author":{"gitId":"ptvrajsk"},"content":"    if (newAuthState \u003d\u003d\u003d AuthState.Authenticated) {"},{"lineNumber":74,"author":{"gitId":"ptvrajsk"},"content":"      const sessionId \u003d `${Date.now()}-${uuid()}`;"},{"lineNumber":75,"author":{"gitId":"ptvrajsk"},"content":"      this.issueService.setSessionId(sessionId);"},{"lineNumber":76,"author":{"gitId":"ptvrajsk"},"content":"      this.logger.info(`Successfully authenticated with session: ${sessionId}`);"},{"lineNumber":77,"author":{"gitId":"ptvrajsk"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"ptvrajsk"},"content":"    this.authStateSource.next(newAuthState);"},{"lineNumber":79,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":80,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"  setTitleWithPhaseDetail(): void {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    const appSetting \u003d require(\u0027../../../../../package.json\u0027);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    const title \u003d `${appSetting.name} ${appSetting.version} - ${this.phaseService.getPhaseDetail()}`;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    this.titleService.setTitle(title);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"  setLandingPageTitle(): void {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    const appSetting \u003d require(\u0027../../../../../package.json\u0027);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    const title \u003d `${appSetting.name} ${appSetting.version}`;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    this.titleService.setTitle(title);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"ptvrajsk"},"content":"  /**"},{"lineNumber":94,"author":{"gitId":"ptvrajsk"},"content":"   * Will start the Github OAuth web flow process by issuing \u0027FabricatedToken\u0027."},{"lineNumber":95,"author":{"gitId":"ptvrajsk"},"content":"   */"},{"lineNumber":96,"author":{"gitId":"ptvrajsk"},"content":"  startOAuthProcess() {"},{"lineNumber":97,"author":{"gitId":"ptvrajsk"},"content":"    this.accessToken.next(\u0027FabricatedToken\u0027);"},{"lineNumber":98,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":99,"author":{"gitId":"ptvrajsk"},"content":"}"}],"authorContributionMap":{"ptvrajsk":86,"-":13}},{"path":"src/app/core/services/mocks/mock.github.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"ptvrajsk"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"ptvrajsk"},"content":"import { Observable, of } from \u0027rxjs\u0027;"},{"lineNumber":3,"author":{"gitId":"ptvrajsk"},"content":"import { GithubUser } from \u0027../../models/github-user.model\u0027;"},{"lineNumber":4,"author":{"gitId":"ptvrajsk"},"content":"import { AppConfig } from \u0027../../../../environments/environment.test\u0027;"},{"lineNumber":5,"author":{"gitId":"dingyuchen"},"content":"import { Phase } from \u0027../../models/phase.model\u0027;"},{"lineNumber":6,"author":{"gitId":"ptvrajsk"},"content":"import { SessionData } from \u0027../../models/session.model\u0027;"},{"lineNumber":7,"author":{"gitId":"ptvrajsk"},"content":"import { GithubRelease } from \u0027../../models/github/github.release\u0027;"},{"lineNumber":8,"author":{"gitId":"ptvrajsk"},"content":"import { LabelService } from \u0027../label.service\u0027;"},{"lineNumber":9,"author":{"gitId":"ptvrajsk"},"content":"import { Label } from \u0027../../models/label.model\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { GithubIssue } from \u0027../../models/github/github-issue.model\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { GithubLabel } from \u0027../../models/github/github-label.model\u0027;"},{"lineNumber":12,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":13,"author":{"gitId":"ptvrajsk"},"content":"const Octokit \u003d require(\u0027@octokit/rest\u0027);"},{"lineNumber":14,"author":{"gitId":"ptvrajsk"},"content":"const CATCHER_ORG \u003d \u0027CATcher-org\u0027;"},{"lineNumber":15,"author":{"gitId":"ptvrajsk"},"content":"const CATCHER_REPO \u003d \u0027CATcher\u0027;"},{"lineNumber":16,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":17,"author":{"gitId":"ptvrajsk"},"content":"let ORG_NAME \u003d \u0027\u0027;"},{"lineNumber":18,"author":{"gitId":"ptvrajsk"},"content":"let MOD_ORG \u003d \u0027\u0027;"},{"lineNumber":19,"author":{"gitId":"ptvrajsk"},"content":"let REPO \u003d \u0027\u0027;"},{"lineNumber":20,"author":{"gitId":"ptvrajsk"},"content":"let DATA_REPO \u003d \u0027\u0027;"},{"lineNumber":21,"author":{"gitId":"ptvrajsk"},"content":"let octokit \u003d new Octokit();"},{"lineNumber":22,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":23,"author":{"gitId":"ptvrajsk"},"content":"@Injectable()"},{"lineNumber":24,"author":{"gitId":"ptvrajsk"},"content":"export class MockGithubService {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  numIssuesCreated: number;  // tracks the number of GithubIssues created by this mock service"},{"lineNumber":26,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"  constructor() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    this.numIssuesCreated \u003d 0;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":30,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":31,"author":{"gitId":"ptvrajsk"},"content":"  storeOAuthAccessToken(accessToken: string) {"},{"lineNumber":32,"author":{"gitId":"ptvrajsk"},"content":"    octokit \u003d new Octokit({"},{"lineNumber":33,"author":{"gitId":"ptvrajsk"},"content":"      auth() {"},{"lineNumber":34,"author":{"gitId":"ptvrajsk"},"content":"        return `Token ${accessToken}`;"},{"lineNumber":35,"author":{"gitId":"ptvrajsk"},"content":"      }"},{"lineNumber":36,"author":{"gitId":"ptvrajsk"},"content":"    });"},{"lineNumber":37,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":38,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":39,"author":{"gitId":"ptvrajsk"},"content":"  storeOrganizationDetails(orgName: string, dataRepo: string) {"},{"lineNumber":40,"author":{"gitId":"ptvrajsk"},"content":"    MOD_ORG \u003d orgName;"},{"lineNumber":41,"author":{"gitId":"ptvrajsk"},"content":"    DATA_REPO \u003d dataRepo;"},{"lineNumber":42,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":43,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":44,"author":{"gitId":"ptvrajsk"},"content":"  storePhaseDetails(phaseRepoOwner: string, repoName: string) {"},{"lineNumber":45,"author":{"gitId":"ptvrajsk"},"content":"    REPO \u003d repoName;"},{"lineNumber":46,"author":{"gitId":"ptvrajsk"},"content":"    ORG_NAME \u003d phaseRepoOwner;"},{"lineNumber":47,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":48,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":49,"author":{"gitId":"ptvrajsk"},"content":"  /**"},{"lineNumber":50,"author":{"gitId":"ptvrajsk"},"content":"   * Always informs that repository exists for testing purposes."},{"lineNumber":51,"author":{"gitId":"ptvrajsk"},"content":"   * @param owner - Owner of Specified Repository."},{"lineNumber":52,"author":{"gitId":"ptvrajsk"},"content":"   * @param repo - Name of Repository."},{"lineNumber":53,"author":{"gitId":"ptvrajsk"},"content":"   */"},{"lineNumber":54,"author":{"gitId":"ptvrajsk"},"content":"  isRepositoryPresent(owner: string, repo: string): Observable\u003cboolean\u003e {"},{"lineNumber":55,"author":{"gitId":"ptvrajsk"},"content":"    return of(true);"},{"lineNumber":56,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":57,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"   * Creates a GithubIssue with the specified title / description / labels."},{"lineNumber":60,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  createIssue(title: string, description: string, labels: string[]): Observable\u003cGithubIssue\u003e {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"      const githubLabels: GithubLabel[] \u003d labels.map(labelString \u003d\u003e new GithubLabel({name: labelString}));"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"      const githubIssueData \u003d {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        number: this.numIssuesCreated, // Issue\u0027s display ID"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        title: title,"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        body: description,"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        labels: githubLabels"},{"lineNumber":69,"author":{"gitId":"-"},"content":"      };"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"      this.numIssuesCreated++;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"      return of(new GithubIssue(githubIssueData));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"ptvrajsk"},"content":"  /**"},{"lineNumber":76,"author":{"gitId":"ptvrajsk"},"content":"   * Creates a fabricated object that matches the structure of that"},{"lineNumber":77,"author":{"gitId":"ptvrajsk"},"content":"   * returned by the Github API which always results in the required labels"},{"lineNumber":78,"author":{"gitId":"ptvrajsk"},"content":"   * being present."},{"lineNumber":79,"author":{"gitId":"ptvrajsk"},"content":"   */"},{"lineNumber":80,"author":{"gitId":"ptvrajsk"},"content":"  fetchAllLabels(): Observable\u003cArray\u003c{}\u003e\u003e {"},{"lineNumber":81,"author":{"gitId":"ptvrajsk"},"content":"    return of(LabelService.getRequiredLabelsAsArray().map((label: Label) \u003d\u003e {"},{"lineNumber":82,"author":{"gitId":"ptvrajsk"},"content":"      return {"},{"lineNumber":83,"author":{"gitId":"ptvrajsk"},"content":"        name: label.labelCategory ? `${label.labelCategory}.${label.labelValue}` : `${label.labelValue}`,"},{"lineNumber":84,"author":{"gitId":"ptvrajsk"},"content":"        color: `${label.labelColor}`"},{"lineNumber":85,"author":{"gitId":"ptvrajsk"},"content":"      };"},{"lineNumber":86,"author":{"gitId":"ptvrajsk"},"content":"    }));"},{"lineNumber":87,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":88,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":89,"author":{"gitId":"ptvrajsk"},"content":"  /**"},{"lineNumber":90,"author":{"gitId":"ptvrajsk"},"content":"   * @return Empty Observable\u003c[]\u003e"},{"lineNumber":91,"author":{"gitId":"ptvrajsk"},"content":"   */"},{"lineNumber":92,"author":{"gitId":"ptvrajsk"},"content":"  fetchEventsForRepo(): Observable\u003cany[]\u003e {"},{"lineNumber":93,"author":{"gitId":"ptvrajsk"},"content":"    return of([]);"},{"lineNumber":94,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":95,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":96,"author":{"gitId":"ptvrajsk"},"content":"  /**"},{"lineNumber":97,"author":{"gitId":"ptvrajsk"},"content":"   * Creates Fabricated Data File with Tester\u0027s Credentials."},{"lineNumber":98,"author":{"gitId":"ptvrajsk"},"content":"   */"},{"lineNumber":99,"author":{"gitId":"ptvrajsk"},"content":"  fetchDataFile(): Observable\u003c{}\u003e {"},{"lineNumber":100,"author":{"gitId":"ptvrajsk"},"content":"    return of({"},{"lineNumber":101,"author":{"gitId":"ptvrajsk"},"content":"      data: \u0027role,name,team\\n\u0027 +"},{"lineNumber":102,"author":{"gitId":"ptvrajsk"},"content":"        `${AppConfig.role},${AppConfig.username},${AppConfig.team}\\n`"},{"lineNumber":103,"author":{"gitId":"ptvrajsk"},"content":"    });"},{"lineNumber":104,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":105,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":106,"author":{"gitId":"ptvrajsk"},"content":"  /**"},{"lineNumber":107,"author":{"gitId":"ptvrajsk"},"content":"   * Creates a fabricated object that matches the structure of that"},{"lineNumber":108,"author":{"gitId":"ptvrajsk"},"content":"   * returned by the Github API which always results in Release Comparisons"},{"lineNumber":109,"author":{"gitId":"ptvrajsk"},"content":"   * to be true."},{"lineNumber":110,"author":{"gitId":"ptvrajsk"},"content":"   */"},{"lineNumber":111,"author":{"gitId":"ptvrajsk"},"content":"  fetchLatestRelease(): Observable\u003cGithubRelease\u003e {"},{"lineNumber":112,"author":{"gitId":"ptvrajsk"},"content":"    const appSetting \u003d require(\u0027../../../../../package.json\u0027);"},{"lineNumber":113,"author":{"gitId":"ptvrajsk"},"content":"    return of({"},{"lineNumber":114,"author":{"gitId":"ptvrajsk"},"content":"      html_url: `www.github.com/CATcher-org/releases/v${appSetting.version}`,"},{"lineNumber":115,"author":{"gitId":"ptvrajsk"},"content":"      tag_name: `v${appSetting.version}`"},{"lineNumber":116,"author":{"gitId":"ptvrajsk"},"content":"    } as GithubRelease);"},{"lineNumber":117,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":118,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":119,"author":{"gitId":"ptvrajsk"},"content":"  /**"},{"lineNumber":120,"author":{"gitId":"ptvrajsk"},"content":"   * Fabricates session data in accordance with SessionData Requirements."},{"lineNumber":121,"author":{"gitId":"dingyuchen"},"content":"   * @return Observable\u003cSessionData\u003e representing session information."},{"lineNumber":122,"author":{"gitId":"ptvrajsk"},"content":"   */"},{"lineNumber":123,"author":{"gitId":"dingyuchen"},"content":"  fetchSettingsFile(): Observable\u003cSessionData\u003e {"},{"lineNumber":124,"author":{"gitId":"ptvrajsk"},"content":"    return of({"},{"lineNumber":125,"author":{"gitId":"ptvrajsk"},"content":"      openPhases : [Phase.phaseBugReporting, Phase.phaseTeamResponse, Phase.phaseTesterResponse, Phase.phaseModeration],"},{"lineNumber":126,"author":{"gitId":"ptvrajsk"},"content":"      [Phase.phaseBugReporting]: \u0027undefined\u0027,"},{"lineNumber":127,"author":{"gitId":"ptvrajsk"},"content":"      [Phase.phaseTeamResponse]: \u0027undefined\u0027,"},{"lineNumber":128,"author":{"gitId":"ptvrajsk"},"content":"      [Phase.phaseTesterResponse]: \u0027undefined\u0027,"},{"lineNumber":129,"author":{"gitId":"ptvrajsk"},"content":"      [Phase.phaseModeration]: \u0027undefined\u0027"},{"lineNumber":130,"author":{"gitId":"ptvrajsk"},"content":"    } as SessionData);"},{"lineNumber":131,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":132,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":133,"author":{"gitId":"ptvrajsk"},"content":"  /**"},{"lineNumber":134,"author":{"gitId":"ptvrajsk"},"content":"   * @return Observable\u003cGithubUser\u003e representation of TestUser Credentials."},{"lineNumber":135,"author":{"gitId":"ptvrajsk"},"content":"   */"},{"lineNumber":136,"author":{"gitId":"ptvrajsk"},"content":"  fetchAuthenticatedUser(): Observable\u003cGithubUser\u003e {"},{"lineNumber":137,"author":{"gitId":"ptvrajsk"},"content":"    return of({"},{"lineNumber":138,"author":{"gitId":"ptvrajsk"},"content":"      login: AppConfig.username,"},{"lineNumber":139,"author":{"gitId":"ptvrajsk"},"content":"      name: AppConfig.username"},{"lineNumber":140,"author":{"gitId":"ptvrajsk"},"content":"    } as GithubUser);"},{"lineNumber":141,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":142,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":143,"author":{"gitId":"ptvrajsk"},"content":"  reset(): void {"},{"lineNumber":144,"author":{"gitId":"ptvrajsk"},"content":"    // Function currently exists to prevent errors when logout is clicked and"},{"lineNumber":145,"author":{"gitId":"ptvrajsk"},"content":"    // services reset."},{"lineNumber":146,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":147,"author":{"gitId":"ptvrajsk"},"content":"}"}],"authorContributionMap":{"dingyuchen":3,"ptvrajsk":121,"-":23}},{"path":"src/app/core/services/mocks/mock.issue.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"ptvrajsk"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"ptvrajsk"},"content":"import { GithubService } from \u0027../github.service\u0027;"},{"lineNumber":3,"author":{"gitId":"ptvrajsk"},"content":"import { catchError, exhaustMap, flatMap, map } from \u0027rxjs/operators\u0027;"},{"lineNumber":4,"author":{"gitId":"ptvrajsk"},"content":"import { BehaviorSubject, forkJoin, timer, Observable, of, Subscription } from \u0027rxjs\u0027;"},{"lineNumber":5,"author":{"gitId":"ptvrajsk"},"content":"import {"},{"lineNumber":6,"author":{"gitId":"ptvrajsk"},"content":"  Issue,"},{"lineNumber":7,"author":{"gitId":"ptvrajsk"},"content":"  Issues,"},{"lineNumber":8,"author":{"gitId":"ptvrajsk"},"content":"  STATUS,"},{"lineNumber":9,"author":{"gitId":"ptvrajsk"},"content":"} from \u0027../../models/issue.model\u0027;"},{"lineNumber":10,"author":{"gitId":"ptvrajsk"},"content":"import { UserService } from \u0027../user.service\u0027;"},{"lineNumber":11,"author":{"gitId":"dingyuchen"},"content":"import { PhaseService } from \u0027../phase.service\u0027;"},{"lineNumber":12,"author":{"gitId":"dingyuchen"},"content":"import { Phase } from \u0027../../models/phase.model\u0027;"},{"lineNumber":13,"author":{"gitId":"ptvrajsk"},"content":"import { PermissionService } from \u0027../permission.service\u0027;"},{"lineNumber":14,"author":{"gitId":"ptvrajsk"},"content":"import { DataService } from \u0027../data.service\u0027;"},{"lineNumber":15,"author":{"gitId":"ptvrajsk"},"content":"import { ErrorHandlingService } from \u0027../error-handling.service\u0027;"},{"lineNumber":16,"author":{"gitId":"ptvrajsk"},"content":"import { IssueDispute } from \u0027../../models/issue-dispute.model\u0027;"},{"lineNumber":17,"author":{"gitId":"ptvrajsk"},"content":"import { GithubIssue } from \u0027../../models/github/github-issue.model\u0027;"},{"lineNumber":18,"author":{"gitId":"ptvrajsk"},"content":"import { IssueComment } from \u0027../../models/comment.model\u0027;"},{"lineNumber":19,"author":{"gitId":"ptvrajsk"},"content":"import { GithubLabel } from \u0027../../models/github/github-label.model\u0027;"},{"lineNumber":20,"author":{"gitId":"ptvrajsk"},"content":"import { GithubComment } from \u0027../../models/github/github-comment.model\u0027;"},{"lineNumber":21,"author":{"gitId":"ptvrajsk"},"content":"import { HiddenData } from \u0027../../models/hidden-data.model\u0027;"},{"lineNumber":22,"author":{"gitId":"ptvrajsk"},"content":"import { generateIssueWithRandomData } from \u0027../../../../../tests/constants/githubissue.constants\u0027;"},{"lineNumber":23,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":24,"author":{"gitId":"ptvrajsk"},"content":"@Injectable({"},{"lineNumber":25,"author":{"gitId":"ptvrajsk"},"content":"  providedIn: \u0027root\u0027,"},{"lineNumber":26,"author":{"gitId":"ptvrajsk"},"content":"})"},{"lineNumber":27,"author":{"gitId":"ptvrajsk"},"content":"export class MockIssueService {"},{"lineNumber":28,"author":{"gitId":"ptvrajsk"},"content":"  static readonly POLL_INTERVAL \u003d 5000; // 5 seconds"},{"lineNumber":29,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":30,"author":{"gitId":"ptvrajsk"},"content":"  issues: Issues;"},{"lineNumber":31,"author":{"gitId":"ptvrajsk"},"content":"  issues$: BehaviorSubject\u003cIssue[]\u003e;"},{"lineNumber":32,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":33,"author":{"gitId":"ptvrajsk"},"content":"  private sessionId: string;"},{"lineNumber":34,"author":{"gitId":"ptvrajsk"},"content":"  private issueTeamFilter \u003d \u0027All Teams\u0027;"},{"lineNumber":35,"author":{"gitId":"ptvrajsk"},"content":"  private issuesPollSubscription: Subscription;"},{"lineNumber":36,"author":{"gitId":"ptvrajsk"},"content":"  /** Whether the IssueService is downloading the data from Github*/"},{"lineNumber":37,"author":{"gitId":"ptvrajsk"},"content":"  public isLoading \u003d new BehaviorSubject\u003cboolean\u003e(false);"},{"lineNumber":38,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":39,"author":{"gitId":"ptvrajsk"},"content":"  constructor(private githubService: GithubService,"},{"lineNumber":40,"author":{"gitId":"ptvrajsk"},"content":"              private userService: UserService,"},{"lineNumber":41,"author":{"gitId":"ptvrajsk"},"content":"              private phaseService: PhaseService,"},{"lineNumber":42,"author":{"gitId":"ptvrajsk"},"content":"              private permissionService: PermissionService,"},{"lineNumber":43,"author":{"gitId":"ptvrajsk"},"content":"              private errorHandlingService: ErrorHandlingService,"},{"lineNumber":44,"author":{"gitId":"ptvrajsk"},"content":"              private dataService: DataService) {"},{"lineNumber":45,"author":{"gitId":"ptvrajsk"},"content":"    this.issues$ \u003d new BehaviorSubject(new Array\u003cIssue\u003e());"},{"lineNumber":46,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":47,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":48,"author":{"gitId":"ptvrajsk"},"content":"  /**"},{"lineNumber":49,"author":{"gitId":"ptvrajsk"},"content":"   * Loads Issues and Prevents polling during testing."},{"lineNumber":50,"author":{"gitId":"ptvrajsk"},"content":"   */"},{"lineNumber":51,"author":{"gitId":"ptvrajsk"},"content":"  startPollIssues() {"},{"lineNumber":52,"author":{"gitId":"ptvrajsk"},"content":"    if (this.issuesPollSubscription \u003d\u003d\u003d undefined) {"},{"lineNumber":53,"author":{"gitId":"ptvrajsk"},"content":"      if (this.issues$.getValue().length \u003d\u003d\u003d 0) {"},{"lineNumber":54,"author":{"gitId":"ptvrajsk"},"content":"        this.isLoading.next(true);"},{"lineNumber":55,"author":{"gitId":"ptvrajsk"},"content":"      }"},{"lineNumber":56,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":57,"author":{"gitId":"ptvrajsk"},"content":"      this.issuesPollSubscription \u003d of(this.reloadAllIssues())"},{"lineNumber":58,"author":{"gitId":"ptvrajsk"},"content":"        .subscribe(result \u003d\u003e this.isLoading.next(false));"},{"lineNumber":59,"author":{"gitId":"ptvrajsk"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":61,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":62,"author":{"gitId":"ptvrajsk"},"content":"  stopPollIssues() {"},{"lineNumber":63,"author":{"gitId":"ptvrajsk"},"content":"    if (this.issuesPollSubscription) {"},{"lineNumber":64,"author":{"gitId":"ptvrajsk"},"content":"      this.issuesPollSubscription.unsubscribe();"},{"lineNumber":65,"author":{"gitId":"ptvrajsk"},"content":"      this.issuesPollSubscription \u003d undefined;"},{"lineNumber":66,"author":{"gitId":"ptvrajsk"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":68,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":69,"author":{"gitId":"ptvrajsk"},"content":"  /**"},{"lineNumber":70,"author":{"gitId":"-"},"content":"   * Simply returns the existing issue, to simulate polling."},{"lineNumber":71,"author":{"gitId":"ptvrajsk"},"content":"   */"},{"lineNumber":72,"author":{"gitId":"ptvrajsk"},"content":"  pollIssue(issueId: number): Observable\u003cIssue\u003e {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    return of(this.issues[issueId]);"},{"lineNumber":74,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":75,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":76,"author":{"gitId":"ptvrajsk"},"content":"  reloadAllIssues() {"},{"lineNumber":77,"author":{"gitId":"ptvrajsk"},"content":"    return this.initializeData();"},{"lineNumber":78,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":79,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":80,"author":{"gitId":"ptvrajsk"},"content":"  getIssue(id: number): Observable\u003cIssue\u003e {"},{"lineNumber":81,"author":{"gitId":"ptvrajsk"},"content":"    if (this.issues \u003d\u003d\u003d undefined) {"},{"lineNumber":82,"author":{"gitId":"ptvrajsk"},"content":"      return this.getLatestIssue(id);"},{"lineNumber":83,"author":{"gitId":"ptvrajsk"},"content":"    } else {"},{"lineNumber":84,"author":{"gitId":"ptvrajsk"},"content":"      return of(this.issues[id]);"},{"lineNumber":85,"author":{"gitId":"ptvrajsk"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":87,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":88,"author":{"gitId":"ptvrajsk"},"content":"  getLatestIssue(id: number): Observable\u003cIssue\u003e {"},{"lineNumber":89,"author":{"gitId":"ptvrajsk"},"content":"    return this.githubService.fetchIssueGraphql(id).pipe("},{"lineNumber":90,"author":{"gitId":"ptvrajsk"},"content":"      map((response: GithubIssue) \u003d\u003e {"},{"lineNumber":91,"author":{"gitId":"ptvrajsk"},"content":"        this.createAndSaveIssueModel(response);"},{"lineNumber":92,"author":{"gitId":"ptvrajsk"},"content":"        return this.issues[id];"},{"lineNumber":93,"author":{"gitId":"ptvrajsk"},"content":"      }),"},{"lineNumber":94,"author":{"gitId":"ptvrajsk"},"content":"      catchError((err) \u003d\u003e {"},{"lineNumber":95,"author":{"gitId":"ptvrajsk"},"content":"        return of(this.issues[id]);"},{"lineNumber":96,"author":{"gitId":"ptvrajsk"},"content":"      })"},{"lineNumber":97,"author":{"gitId":"ptvrajsk"},"content":"    );"},{"lineNumber":98,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":99,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":100,"author":{"gitId":"ptvrajsk"},"content":"  createIssue(title: string, description: string, severity: string, type: string): Observable\u003cIssue\u003e {"},{"lineNumber":101,"author":{"gitId":"ptvrajsk"},"content":"    const labelsArray \u003d [this.createLabel(\u0027severity\u0027, severity), this.createLabel(\u0027type\u0027, type)];"},{"lineNumber":102,"author":{"gitId":"ptvrajsk"},"content":"    const hiddenData \u003d new Map([[\u0027session\u0027, this.sessionId]]);"},{"lineNumber":103,"author":{"gitId":"ptvrajsk"},"content":"    const issueDescription \u003d HiddenData.embedDataIntoString(description, hiddenData);"},{"lineNumber":104,"author":{"gitId":"ptvrajsk"},"content":"    return this.githubService.createIssue(title, issueDescription, labelsArray).pipe("},{"lineNumber":105,"author":{"gitId":"ptvrajsk"},"content":"      map((response: GithubIssue) \u003d\u003e this.createIssueModel(response))"},{"lineNumber":106,"author":{"gitId":"ptvrajsk"},"content":"    );"},{"lineNumber":107,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":108,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":109,"author":{"gitId":"ptvrajsk"},"content":"  updateIssue(issue: Issue): Observable\u003cIssue\u003e {"},{"lineNumber":110,"author":{"gitId":"ptvrajsk"},"content":"    const assignees \u003d this.phaseService.currentPhase \u003d\u003d\u003d Phase.phaseModeration ? [] : issue.assignees;"},{"lineNumber":111,"author":{"gitId":"ptvrajsk"},"content":"    return this.githubService.updateIssue(issue.id, issue.title, this.createGithubIssueDescription(issue),"},{"lineNumber":112,"author":{"gitId":"ptvrajsk"},"content":"      this.createLabelsForIssue(issue), assignees).pipe("},{"lineNumber":113,"author":{"gitId":"ptvrajsk"},"content":"        map((response: GithubIssue) \u003d\u003e {"},{"lineNumber":114,"author":{"gitId":"ptvrajsk"},"content":"          response.comments \u003d issue.githubComments;"},{"lineNumber":115,"author":{"gitId":"ptvrajsk"},"content":"          return this.createIssueModel(response);"},{"lineNumber":116,"author":{"gitId":"ptvrajsk"},"content":"        })"},{"lineNumber":117,"author":{"gitId":"ptvrajsk"},"content":"    );"},{"lineNumber":118,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":119,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":120,"author":{"gitId":"ptvrajsk"},"content":"  updateIssueWithComment(issue: Issue, issueComment: IssueComment): Observable\u003cIssue\u003e {"},{"lineNumber":121,"author":{"gitId":"ptvrajsk"},"content":"    return this.githubService.updateIssueComment(issueComment).pipe("},{"lineNumber":122,"author":{"gitId":"ptvrajsk"},"content":"      flatMap((updatedComment: GithubComment) \u003d\u003e {"},{"lineNumber":123,"author":{"gitId":"ptvrajsk"},"content":"        issue.githubComments \u003d ["},{"lineNumber":124,"author":{"gitId":"ptvrajsk"},"content":"          updatedComment,"},{"lineNumber":125,"author":{"gitId":"ptvrajsk"},"content":"          ...issue.githubComments.filter(c \u003d\u003e c.id !\u003d\u003d updatedComment.id),"},{"lineNumber":126,"author":{"gitId":"ptvrajsk"},"content":"        ];"},{"lineNumber":127,"author":{"gitId":"ptvrajsk"},"content":"        return this.updateIssue(issue);"},{"lineNumber":128,"author":{"gitId":"ptvrajsk"},"content":"      })"},{"lineNumber":129,"author":{"gitId":"ptvrajsk"},"content":"    );"},{"lineNumber":130,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":131,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":132,"author":{"gitId":"ptvrajsk"},"content":"  updateTesterResponse(issue: Issue, issueComment: IssueComment): Observable\u003cIssue\u003e {"},{"lineNumber":133,"author":{"gitId":"ptvrajsk"},"content":"    const isTesterResponseExist \u003d this.issues[issue.id].testerResponses;"},{"lineNumber":134,"author":{"gitId":"ptvrajsk"},"content":"    const commentApiToCall \u003d isTesterResponseExist ? this.githubService.updateIssueComment(issueComment)"},{"lineNumber":135,"author":{"gitId":"ptvrajsk"},"content":"      : this.githubService.createIssueComment(issue.id, issueComment.description);"},{"lineNumber":136,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":137,"author":{"gitId":"ptvrajsk"},"content":"    const issueClone \u003d issue.clone(this.phaseService.currentPhase);"},{"lineNumber":138,"author":{"gitId":"ptvrajsk"},"content":"    issueClone.status \u003d STATUS.Done;"},{"lineNumber":139,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":140,"author":{"gitId":"ptvrajsk"},"content":"    return forkJoin([commentApiToCall, this.updateIssue(issueClone)]).pipe("},{"lineNumber":141,"author":{"gitId":"ptvrajsk"},"content":"      map((responses) \u003d\u003e {"},{"lineNumber":142,"author":{"gitId":"ptvrajsk"},"content":"        const [githubComment, issue] \u003d responses;"},{"lineNumber":143,"author":{"gitId":"ptvrajsk"},"content":"        issue.updateTesterResponse(githubComment);"},{"lineNumber":144,"author":{"gitId":"ptvrajsk"},"content":"        return issue;"},{"lineNumber":145,"author":{"gitId":"ptvrajsk"},"content":"      })"},{"lineNumber":146,"author":{"gitId":"ptvrajsk"},"content":"    );"},{"lineNumber":147,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":148,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":149,"author":{"gitId":"ptvrajsk"},"content":"  updateTutorResponse(issue: Issue, issueComment: IssueComment): Observable\u003cIssue\u003e {"},{"lineNumber":150,"author":{"gitId":"ptvrajsk"},"content":"    return forkJoin([this.githubService.updateIssueComment(issueComment), this.updateIssue(issue)]).pipe("},{"lineNumber":151,"author":{"gitId":"ptvrajsk"},"content":"      map(responses \u003d\u003e {"},{"lineNumber":152,"author":{"gitId":"ptvrajsk"},"content":"        const [githubComment, issue] \u003d responses;"},{"lineNumber":153,"author":{"gitId":"ptvrajsk"},"content":"        issue.updateDispute(githubComment);"},{"lineNumber":154,"author":{"gitId":"ptvrajsk"},"content":"        return issue;"},{"lineNumber":155,"author":{"gitId":"ptvrajsk"},"content":"      })"},{"lineNumber":156,"author":{"gitId":"ptvrajsk"},"content":"    );"},{"lineNumber":157,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":158,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":159,"author":{"gitId":"ptvrajsk"},"content":"  createTeamResponse(issue: Issue): Observable\u003cIssue\u003e {"},{"lineNumber":160,"author":{"gitId":"ptvrajsk"},"content":"    const teamResponse \u003d issue.createGithubTeamResponse();"},{"lineNumber":161,"author":{"gitId":"ptvrajsk"},"content":"    return this.githubService.createIssueComment(issue.id, teamResponse).pipe("},{"lineNumber":162,"author":{"gitId":"ptvrajsk"},"content":"      flatMap((githubComment: GithubComment) \u003d\u003e {"},{"lineNumber":163,"author":{"gitId":"ptvrajsk"},"content":"        issue.githubComments \u003d ["},{"lineNumber":164,"author":{"gitId":"ptvrajsk"},"content":"          githubComment,"},{"lineNumber":165,"author":{"gitId":"ptvrajsk"},"content":"          ...issue.githubComments.filter(c \u003d\u003e c.id !\u003d\u003d githubComment.id),"},{"lineNumber":166,"author":{"gitId":"ptvrajsk"},"content":"        ];"},{"lineNumber":167,"author":{"gitId":"ptvrajsk"},"content":"        return this.updateIssue(issue);"},{"lineNumber":168,"author":{"gitId":"ptvrajsk"},"content":"      })"},{"lineNumber":169,"author":{"gitId":"ptvrajsk"},"content":"    );"},{"lineNumber":170,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":171,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":172,"author":{"gitId":"ptvrajsk"},"content":"  createTutorResponse(issue: Issue, response: string): Observable\u003cIssue\u003e {"},{"lineNumber":173,"author":{"gitId":"ptvrajsk"},"content":"    return forkJoin([this.githubService.createIssueComment(issue.id, response), this.updateIssue(issue)]).pipe("},{"lineNumber":174,"author":{"gitId":"ptvrajsk"},"content":"      map(responses \u003d\u003e {"},{"lineNumber":175,"author":{"gitId":"ptvrajsk"},"content":"        const [githubComment, issue] \u003d responses;"},{"lineNumber":176,"author":{"gitId":"ptvrajsk"},"content":"        issue.updateDispute(githubComment);"},{"lineNumber":177,"author":{"gitId":"ptvrajsk"},"content":"        return issue;"},{"lineNumber":178,"author":{"gitId":"ptvrajsk"},"content":"      })"},{"lineNumber":179,"author":{"gitId":"ptvrajsk"},"content":"    );"},{"lineNumber":180,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":181,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":182,"author":{"gitId":"ptvrajsk"},"content":"  /**"},{"lineNumber":183,"author":{"gitId":"ptvrajsk"},"content":"   * This function will create a github representation of issue\u0027s description. Given the issue model, it will piece together the different"},{"lineNumber":184,"author":{"gitId":"ptvrajsk"},"content":"   * attributes to create the github\u0027s description."},{"lineNumber":185,"author":{"gitId":"ptvrajsk"},"content":"   *"},{"lineNumber":186,"author":{"gitId":"ptvrajsk"},"content":"   */"},{"lineNumber":187,"author":{"gitId":"ptvrajsk"},"content":"  private createGithubIssueDescription(issue: Issue): string {"},{"lineNumber":188,"author":{"gitId":"ptvrajsk"},"content":"    switch (this.phaseService.currentPhase) {"},{"lineNumber":189,"author":{"gitId":"ptvrajsk"},"content":"      case Phase.phaseModeration:"},{"lineNumber":190,"author":{"gitId":"ptvrajsk"},"content":"        return `# Issue Description\\n${issue.createGithubIssueDescription()}\\n# Team\\\u0027s Response\\n${issue.teamResponse}\\n ` +"},{"lineNumber":191,"author":{"gitId":"ptvrajsk"},"content":"         // `## State the duplicated issue here, if any\\n${issue.duplicateOf ? `Duplicate of #${issue.duplicateOf}` : `--`}\\n` +"},{"lineNumber":192,"author":{"gitId":"ptvrajsk"},"content":"          `# Disputes\\n\\n${this.getIssueDisputeString(issue.issueDisputes)}\\n`;"},{"lineNumber":193,"author":{"gitId":"ptvrajsk"},"content":"      default:"},{"lineNumber":194,"author":{"gitId":"ptvrajsk"},"content":"        return issue.createGithubIssueDescription();"},{"lineNumber":195,"author":{"gitId":"ptvrajsk"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":197,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":198,"author":{"gitId":"ptvrajsk"},"content":"  private getIssueDisputeString(issueDisputes: IssueDispute[]): string {"},{"lineNumber":199,"author":{"gitId":"ptvrajsk"},"content":"    let issueDisputeString \u003d \u0027\u0027;"},{"lineNumber":200,"author":{"gitId":"ptvrajsk"},"content":"    for (const issueDispute of issueDisputes) {"},{"lineNumber":201,"author":{"gitId":"ptvrajsk"},"content":"      issueDisputeString +\u003d issueDispute.toString();"},{"lineNumber":202,"author":{"gitId":"ptvrajsk"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"ptvrajsk"},"content":"    return issueDisputeString;"},{"lineNumber":204,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":205,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":206,"author":{"gitId":"ptvrajsk"},"content":"  deleteIssue(id: number): Observable\u003cIssue\u003e {"},{"lineNumber":207,"author":{"gitId":"ptvrajsk"},"content":"    return this.githubService.closeIssue(id).pipe("},{"lineNumber":208,"author":{"gitId":"ptvrajsk"},"content":"      map((response: GithubIssue) \u003d\u003e {"},{"lineNumber":209,"author":{"gitId":"ptvrajsk"},"content":"        const deletedIssue \u003d this.createIssueModel(response);"},{"lineNumber":210,"author":{"gitId":"ptvrajsk"},"content":"        this.deleteFromLocalStore(deletedIssue);"},{"lineNumber":211,"author":{"gitId":"ptvrajsk"},"content":"        return deletedIssue;"},{"lineNumber":212,"author":{"gitId":"ptvrajsk"},"content":"      })"},{"lineNumber":213,"author":{"gitId":"ptvrajsk"},"content":"    );"},{"lineNumber":214,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":215,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":216,"author":{"gitId":"ptvrajsk"},"content":"  /**"},{"lineNumber":217,"author":{"gitId":"ptvrajsk"},"content":"   * This function will update the issue\u0027s state of the application. This function needs to be called whenever a issue is deleted."},{"lineNumber":218,"author":{"gitId":"ptvrajsk"},"content":"   */"},{"lineNumber":219,"author":{"gitId":"ptvrajsk"},"content":"  deleteFromLocalStore(issueToDelete: Issue) {"},{"lineNumber":220,"author":{"gitId":"ptvrajsk"},"content":"    const { [issueToDelete.id]: issueToRemove, ...withoutIssueToRemove } \u003d this.issues;"},{"lineNumber":221,"author":{"gitId":"ptvrajsk"},"content":"    this.issues \u003d withoutIssueToRemove;"},{"lineNumber":222,"author":{"gitId":"ptvrajsk"},"content":"    this.issues$.next(Object.values(this.issues));"},{"lineNumber":223,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":224,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":225,"author":{"gitId":"ptvrajsk"},"content":"  /**"},{"lineNumber":226,"author":{"gitId":"ptvrajsk"},"content":"   * This function will update the issue\u0027s state of the application. This function needs to be called whenever a issue is added/updated."},{"lineNumber":227,"author":{"gitId":"ptvrajsk"},"content":"   */"},{"lineNumber":228,"author":{"gitId":"ptvrajsk"},"content":"  updateLocalStore(issueToUpdate: Issue) {"},{"lineNumber":229,"author":{"gitId":"ptvrajsk"},"content":"    this.issues \u003d {"},{"lineNumber":230,"author":{"gitId":"ptvrajsk"},"content":"      ...this.issues,"},{"lineNumber":231,"author":{"gitId":"ptvrajsk"},"content":"      [issueToUpdate.id]: issueToUpdate,"},{"lineNumber":232,"author":{"gitId":"ptvrajsk"},"content":"    };"},{"lineNumber":233,"author":{"gitId":"ptvrajsk"},"content":"    this.issues$.next(Object.values(this.issues));"},{"lineNumber":234,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":235,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":236,"author":{"gitId":"ptvrajsk"},"content":"  /**"},{"lineNumber":237,"author":{"gitId":"ptvrajsk"},"content":"   * Check whether the issue has been responded in the phase 2/3."},{"lineNumber":238,"author":{"gitId":"ptvrajsk"},"content":"   */"},{"lineNumber":239,"author":{"gitId":"ptvrajsk"},"content":"  hasTeamResponse(issueId: number): boolean {"},{"lineNumber":240,"author":{"gitId":"ptvrajsk"},"content":"    return !!this.issues[issueId].teamResponse;"},{"lineNumber":241,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":242,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":243,"author":{"gitId":"ptvrajsk"},"content":"  /**"},{"lineNumber":244,"author":{"gitId":"ptvrajsk"},"content":"   * Obtain an observable containing an array of issues that are duplicates of the parentIssue."},{"lineNumber":245,"author":{"gitId":"ptvrajsk"},"content":"   */"},{"lineNumber":246,"author":{"gitId":"ptvrajsk"},"content":"  getDuplicateIssuesFor(parentIssue: Issue): Observable\u003cIssue[]\u003e {"},{"lineNumber":247,"author":{"gitId":"ptvrajsk"},"content":"    return this.issues$.pipe(map((issues) \u003d\u003e {"},{"lineNumber":248,"author":{"gitId":"ptvrajsk"},"content":"      return issues.filter(issue \u003d\u003e {"},{"lineNumber":249,"author":{"gitId":"ptvrajsk"},"content":"        return issue.duplicateOf \u003d\u003d\u003d parentIssue.id;"},{"lineNumber":250,"author":{"gitId":"ptvrajsk"},"content":"      });"},{"lineNumber":251,"author":{"gitId":"ptvrajsk"},"content":"    }));"},{"lineNumber":252,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":253,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":254,"author":{"gitId":"ptvrajsk"},"content":"  reset() {"},{"lineNumber":255,"author":{"gitId":"ptvrajsk"},"content":"    this.issues \u003d undefined;"},{"lineNumber":256,"author":{"gitId":"ptvrajsk"},"content":"    this.sessionId \u003d undefined;"},{"lineNumber":257,"author":{"gitId":"ptvrajsk"},"content":"    this.issues$.next(new Array\u003cIssue\u003e());"},{"lineNumber":258,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":259,"author":{"gitId":"ptvrajsk"},"content":"    this.stopPollIssues();"},{"lineNumber":260,"author":{"gitId":"ptvrajsk"},"content":"    this.isLoading.complete();"},{"lineNumber":261,"author":{"gitId":"ptvrajsk"},"content":"    this.isLoading \u003d new BehaviorSubject\u003cboolean\u003e(false);"},{"lineNumber":262,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":263,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":264,"author":{"gitId":"ptvrajsk"},"content":"  /**"},{"lineNumber":265,"author":{"gitId":"ptvrajsk"},"content":"   * Populates store with random issues depending on the current test phase."},{"lineNumber":266,"author":{"gitId":"ptvrajsk"},"content":"   */"},{"lineNumber":267,"author":{"gitId":"ptvrajsk"},"content":"  private initializeData(): Observable\u003cIssue[]\u003e {"},{"lineNumber":268,"author":{"gitId":"ptvrajsk"},"content":"    if (this.issues !\u003d null) {"},{"lineNumber":269,"author":{"gitId":"ptvrajsk"},"content":"      return of(Object.values(this.issues));"},{"lineNumber":270,"author":{"gitId":"ptvrajsk"},"content":"    }"},{"lineNumber":271,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":272,"author":{"gitId":"ptvrajsk"},"content":"    const NUM_ISSUES \u003d 10;"},{"lineNumber":273,"author":{"gitId":"ptvrajsk"},"content":"    const generatedIssues: Array\u003cGithubIssue\u003e \u003d [];"},{"lineNumber":274,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":275,"author":{"gitId":"ptvrajsk"},"content":"    switch (this.phaseService.currentPhase) {"},{"lineNumber":276,"author":{"gitId":"ptvrajsk"},"content":"      case Phase.phaseBugReporting:"},{"lineNumber":277,"author":{"gitId":"ptvrajsk"},"content":"        for (let i \u003d 0; i \u003c NUM_ISSUES; i++) {"},{"lineNumber":278,"author":{"gitId":"ptvrajsk"},"content":"          generatedIssues.push(generateIssueWithRandomData());"},{"lineNumber":279,"author":{"gitId":"ptvrajsk"},"content":"        }"},{"lineNumber":280,"author":{"gitId":"ptvrajsk"},"content":"        break;"},{"lineNumber":281,"author":{"gitId":"ptvrajsk"},"content":"    }"},{"lineNumber":282,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":283,"author":{"gitId":"ptvrajsk"},"content":"    for (const issue of generatedIssues) {"},{"lineNumber":284,"author":{"gitId":"ptvrajsk"},"content":"      this.createAndSaveIssueModel((issue));"},{"lineNumber":285,"author":{"gitId":"ptvrajsk"},"content":"    }"},{"lineNumber":286,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":287,"author":{"gitId":"ptvrajsk"},"content":"    return of(Object.values(this.issues));"},{"lineNumber":288,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":289,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":290,"author":{"gitId":"ptvrajsk"},"content":"  private createAndSaveIssueModel(githubIssue: GithubIssue): boolean {"},{"lineNumber":291,"author":{"gitId":"ptvrajsk"},"content":"    const issue \u003d this.createIssueModel(githubIssue);"},{"lineNumber":292,"author":{"gitId":"ptvrajsk"},"content":"    this.updateLocalStore(issue);"},{"lineNumber":293,"author":{"gitId":"ptvrajsk"},"content":"    return true;"},{"lineNumber":294,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":295,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":296,"author":{"gitId":"ptvrajsk"},"content":"  /**"},{"lineNumber":297,"author":{"gitId":"ptvrajsk"},"content":"   * Given an issue model, create the necessary labels for github."},{"lineNumber":298,"author":{"gitId":"ptvrajsk"},"content":"   */"},{"lineNumber":299,"author":{"gitId":"ptvrajsk"},"content":"  private createLabelsForIssue(issue: Issue): string[] {"},{"lineNumber":300,"author":{"gitId":"ptvrajsk"},"content":"    const result \u003d [];"},{"lineNumber":301,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":302,"author":{"gitId":"ptvrajsk"},"content":"    if (this.phaseService.currentPhase !\u003d\u003d Phase.phaseBugReporting \u0026\u0026"},{"lineNumber":303,"author":{"gitId":"ptvrajsk"},"content":"        this.phaseService.currentPhase !\u003d\u003d Phase.phaseTesterResponse) {"},{"lineNumber":304,"author":{"gitId":"ptvrajsk"},"content":"      const studentTeam \u003d issue.teamAssigned.id.split(\u0027-\u0027);"},{"lineNumber":305,"author":{"gitId":"ptvrajsk"},"content":"      result.push(this.createLabel(\u0027tutorial\u0027, `${studentTeam[0]}-${studentTeam[1]}`),"},{"lineNumber":306,"author":{"gitId":"ptvrajsk"},"content":"        this.createLabel(\u0027team\u0027, studentTeam[2]));"},{"lineNumber":307,"author":{"gitId":"ptvrajsk"},"content":"    }"},{"lineNumber":308,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":309,"author":{"gitId":"ptvrajsk"},"content":"    if (issue.severity) {"},{"lineNumber":310,"author":{"gitId":"ptvrajsk"},"content":"      result.push(this.createLabel(\u0027severity\u0027, issue.severity));"},{"lineNumber":311,"author":{"gitId":"ptvrajsk"},"content":"    }"},{"lineNumber":312,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":313,"author":{"gitId":"ptvrajsk"},"content":"    if (issue.type) {"},{"lineNumber":314,"author":{"gitId":"ptvrajsk"},"content":"      result.push(this.createLabel(\u0027type\u0027, issue.type));"},{"lineNumber":315,"author":{"gitId":"ptvrajsk"},"content":"    }"},{"lineNumber":316,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":317,"author":{"gitId":"ptvrajsk"},"content":"    if (issue.responseTag) {"},{"lineNumber":318,"author":{"gitId":"ptvrajsk"},"content":"      result.push(this.createLabel(\u0027response\u0027, issue.responseTag));"},{"lineNumber":319,"author":{"gitId":"ptvrajsk"},"content":"    }"},{"lineNumber":320,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":321,"author":{"gitId":"ptvrajsk"},"content":"    if (issue.duplicated) {"},{"lineNumber":322,"author":{"gitId":"ptvrajsk"},"content":"      result.push(\u0027duplicate\u0027);"},{"lineNumber":323,"author":{"gitId":"ptvrajsk"},"content":"    }"},{"lineNumber":324,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":325,"author":{"gitId":"ptvrajsk"},"content":"    if (issue.status) {"},{"lineNumber":326,"author":{"gitId":"ptvrajsk"},"content":"      result.push(this.createLabel(\u0027status\u0027, issue.status));"},{"lineNumber":327,"author":{"gitId":"ptvrajsk"},"content":"    }"},{"lineNumber":328,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":329,"author":{"gitId":"ptvrajsk"},"content":"    if (issue.pending) {"},{"lineNumber":330,"author":{"gitId":"ptvrajsk"},"content":"      if (+issue.pending \u003e 0) {"},{"lineNumber":331,"author":{"gitId":"ptvrajsk"},"content":"        result.push(this.createLabel(\u0027pending\u0027, issue.pending));"},{"lineNumber":332,"author":{"gitId":"ptvrajsk"},"content":"      }"},{"lineNumber":333,"author":{"gitId":"ptvrajsk"},"content":"    }"},{"lineNumber":334,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":335,"author":{"gitId":"ptvrajsk"},"content":"    if (issue.unsure) {"},{"lineNumber":336,"author":{"gitId":"ptvrajsk"},"content":"      result.push(\u0027unsure\u0027);"},{"lineNumber":337,"author":{"gitId":"ptvrajsk"},"content":"    }"},{"lineNumber":338,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":339,"author":{"gitId":"ptvrajsk"},"content":"    return result;"},{"lineNumber":340,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":341,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":342,"author":{"gitId":"ptvrajsk"},"content":"  private createLabel(prepend: string, value: string) {"},{"lineNumber":343,"author":{"gitId":"ptvrajsk"},"content":"    return `${prepend}.${value}`;"},{"lineNumber":344,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":345,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":346,"author":{"gitId":"ptvrajsk"},"content":"  private extractTeamIdFromGithubIssue(githubIssue: GithubIssue): string {"},{"lineNumber":347,"author":{"gitId":"ptvrajsk"},"content":"    return githubIssue.findLabel(GithubLabel.LABELS.tutorial).concat(\u0027-\u0027).concat(githubIssue.findLabel(GithubLabel.LABELS.team));"},{"lineNumber":348,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":349,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":350,"author":{"gitId":"ptvrajsk"},"content":"  private createIssueModel(githubIssue: GithubIssue): Issue {"},{"lineNumber":351,"author":{"gitId":"ptvrajsk"},"content":"    switch (this.phaseService.currentPhase) {"},{"lineNumber":352,"author":{"gitId":"ptvrajsk"},"content":"      case Phase.phaseBugReporting:"},{"lineNumber":353,"author":{"gitId":"ptvrajsk"},"content":"        return Issue.createPhaseBugReportingIssue(githubIssue);"},{"lineNumber":354,"author":{"gitId":"ptvrajsk"},"content":"      case Phase.phaseTeamResponse:"},{"lineNumber":355,"author":{"gitId":"ptvrajsk"},"content":"        return Issue.createPhaseTeamResponseIssue(githubIssue,"},{"lineNumber":356,"author":{"gitId":"ptvrajsk"},"content":"          this.dataService.getTeam(this.extractTeamIdFromGithubIssue(githubIssue)));"},{"lineNumber":357,"author":{"gitId":"ptvrajsk"},"content":"      case Phase.phaseTesterResponse:"},{"lineNumber":358,"author":{"gitId":"ptvrajsk"},"content":"        return Issue.createPhaseTesterResponseIssue(githubIssue);"},{"lineNumber":359,"author":{"gitId":"ptvrajsk"},"content":"      case Phase.phaseModeration:"},{"lineNumber":360,"author":{"gitId":"ptvrajsk"},"content":"        return Issue.createPhaseModerationIssue(githubIssue,"},{"lineNumber":361,"author":{"gitId":"ptvrajsk"},"content":"          this.dataService.getTeam(this.extractTeamIdFromGithubIssue(githubIssue)));"},{"lineNumber":362,"author":{"gitId":"ptvrajsk"},"content":"      default:"},{"lineNumber":363,"author":{"gitId":"ptvrajsk"},"content":"        return;"},{"lineNumber":364,"author":{"gitId":"ptvrajsk"},"content":"    }"},{"lineNumber":365,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":366,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":367,"author":{"gitId":"ptvrajsk"},"content":"  setIssueTeamFilter(filterValue: string) {"},{"lineNumber":368,"author":{"gitId":"ptvrajsk"},"content":"    if (filterValue) {"},{"lineNumber":369,"author":{"gitId":"ptvrajsk"},"content":"      this.issueTeamFilter \u003d filterValue;"},{"lineNumber":370,"author":{"gitId":"ptvrajsk"},"content":"    }"},{"lineNumber":371,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":372,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":373,"author":{"gitId":"ptvrajsk"},"content":"  setSessionId(sessionId: string) {"},{"lineNumber":374,"author":{"gitId":"ptvrajsk"},"content":"    this.sessionId \u003d sessionId;"},{"lineNumber":375,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":376,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":377,"author":{"gitId":"ptvrajsk"},"content":"  getIssueTeamFilter(): string {"},{"lineNumber":378,"author":{"gitId":"ptvrajsk"},"content":"    return this.issueTeamFilter;"},{"lineNumber":379,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":380,"author":{"gitId":"ptvrajsk"},"content":"}"}],"authorContributionMap":{"dingyuchen":2,"ptvrajsk":376,"-":2}},{"path":"src/app/core/services/permission.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { UserService } from \u0027./user.service\u0027;"},{"lineNumber":4,"author":{"gitId":"dingyuchen"},"content":"import { PhaseService } from \u0027./phase.service\u0027;"},{"lineNumber":5,"author":{"gitId":"dingyuchen"},"content":"import { Phase } from \u0027../models/phase.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { UserRole } from \u0027../models/user.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"const enum PermissionLevel { Phase \u003d \u0027Phase\u0027, User \u003d \u0027User\u0027 }"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"const PERMISSIONS \u003d {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  [Phase.phaseBugReporting]: {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    [UserRole.Student]: {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"      \u0027isIssueCreatable\u0027: true,"},{"lineNumber":14,"author":{"gitId":"-"},"content":"      \u0027isIssueDeletable\u0027: true,"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u0027isIssueTitleEditable\u0027: true,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      \u0027isIssueDescriptionEditable\u0027: true,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      \u0027isIssueLabelsEditable\u0027: true,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u0027isTeamResponseEditable\u0027: false,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      \u0027isTesterResponseEditable\u0027: false,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u0027isTutorResponseEditable\u0027: false,"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    [UserRole.Tutor]: {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      \u0027isIssueCreatable\u0027: false,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u0027isIssueDeletable\u0027: false,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      \u0027isIssueTitleEditable\u0027: false,"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u0027isIssueDescriptionEditable\u0027: false,"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      \u0027isIssueLabelsEditable\u0027: false,"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      \u0027isTeamResponseEditable\u0027: false,"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u0027isTesterResponseEditable\u0027: false,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u0027isTutorResponseEditable\u0027: false,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    [UserRole.Admin]: {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u0027isIssueCreatable\u0027: true,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      \u0027isIssueDeletable\u0027: true,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      \u0027isIssueTitleEditable\u0027: true,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      \u0027isIssueDescriptionEditable\u0027: true,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      \u0027isIssueLabelsEditable\u0027: true,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"      \u0027isTeamResponseEditable\u0027: false,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"      \u0027isTesterResponseEditable\u0027: false,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      \u0027isTutorResponseEditable\u0027: false,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"  [Phase.phaseTeamResponse]: {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    [UserRole.Student]: {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"      \u0027isIssueCreatable\u0027: false,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"      \u0027isIssueDeletable\u0027: false,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"      \u0027isIssueTitleEditable\u0027: false,"},{"lineNumber":49,"author":{"gitId":"-"},"content":"      \u0027isIssueDescriptionEditable\u0027: false,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"      \u0027isIssueLabelsEditable\u0027: true,"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      \u0027isTeamResponseEditable\u0027: true,"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      \u0027isTesterResponseEditable\u0027: false,"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      \u0027isTutorResponseEditable\u0027: false,"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    [UserRole.Tutor]: {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      \u0027isIssueCreatable\u0027: false,"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      \u0027isIssueDeletable\u0027: false,"},{"lineNumber":58,"author":{"gitId":"-"},"content":"      \u0027isIssueTitleEditable\u0027: false,"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      \u0027isIssueDescriptionEditable\u0027: false,"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      \u0027isIssueLabelsEditable\u0027: false,"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      \u0027isTeamResponseEditable\u0027: false,"},{"lineNumber":62,"author":{"gitId":"-"},"content":"      \u0027isTesterResponseEditable\u0027: false,"},{"lineNumber":63,"author":{"gitId":"-"},"content":"      \u0027isTutorResponseEditable\u0027: false,"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    [UserRole.Admin]: {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"      \u0027isIssueCreatable\u0027: false,"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      \u0027isIssueDeletable\u0027: false,"},{"lineNumber":68,"author":{"gitId":"-"},"content":"      \u0027isIssueTitleEditable\u0027: false,"},{"lineNumber":69,"author":{"gitId":"-"},"content":"      \u0027isIssueDescriptionEditable\u0027: true,"},{"lineNumber":70,"author":{"gitId":"-"},"content":"      \u0027isIssueLabelsEditable\u0027: true,"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      \u0027isTeamResponseEditable\u0027: true,"},{"lineNumber":72,"author":{"gitId":"-"},"content":"      \u0027isTesterResponseEditable\u0027: false,"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      \u0027isTutorResponseEditable\u0027: false,"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"  [Phase.phaseTesterResponse]: {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    [UserRole.Student]: {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"      \u0027isIssueCreatable\u0027: false,"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      \u0027isIssueDeletable\u0027: false,"},{"lineNumber":81,"author":{"gitId":"-"},"content":"      \u0027isIssueTitleEditable\u0027: false,"},{"lineNumber":82,"author":{"gitId":"-"},"content":"      \u0027isIssueDescriptionEditable\u0027: false,"},{"lineNumber":83,"author":{"gitId":"-"},"content":"      \u0027isIssueLabelsEditable\u0027: false,"},{"lineNumber":84,"author":{"gitId":"-"},"content":"      \u0027isTeamResponseEditable\u0027: false,"},{"lineNumber":85,"author":{"gitId":"-"},"content":"      \u0027isTesterResponseEditable\u0027: true,"},{"lineNumber":86,"author":{"gitId":"-"},"content":"      \u0027isTutorResponseEditable\u0027: false,"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    [UserRole.Tutor]: {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"      \u0027isIssueCreatable\u0027: false,"},{"lineNumber":90,"author":{"gitId":"-"},"content":"      \u0027isIssueDeletable\u0027: false,"},{"lineNumber":91,"author":{"gitId":"-"},"content":"      \u0027isIssueTitleEditable\u0027: false,"},{"lineNumber":92,"author":{"gitId":"-"},"content":"      \u0027isIssueDescriptionEditable\u0027: false,"},{"lineNumber":93,"author":{"gitId":"-"},"content":"      \u0027isIssueLabelsEditable\u0027: false,"},{"lineNumber":94,"author":{"gitId":"-"},"content":"      \u0027isTeamResponseEditable\u0027: false,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      \u0027isTesterResponseEditable\u0027: false,"},{"lineNumber":96,"author":{"gitId":"-"},"content":"      \u0027isTutorResponseEditable\u0027: false,"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    [UserRole.Admin]: {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"      \u0027isIssueCreatable\u0027: false,"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      \u0027isIssueDeletable\u0027: false,"},{"lineNumber":101,"author":{"gitId":"-"},"content":"      \u0027isIssueTitleEditable\u0027: false,"},{"lineNumber":102,"author":{"gitId":"-"},"content":"      \u0027isIssueDescriptionEditable\u0027: true,"},{"lineNumber":103,"author":{"gitId":"-"},"content":"      \u0027isIssueLabelsEditable\u0027: true,"},{"lineNumber":104,"author":{"gitId":"-"},"content":"      \u0027isTeamResponseEditable\u0027: true,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"      \u0027isTesterResponseEditable\u0027: true,"},{"lineNumber":106,"author":{"gitId":"-"},"content":"      \u0027isTutorResponseEditable\u0027: false,"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"  /** Phase 3 Permissions **/"},{"lineNumber":111,"author":{"gitId":"-"},"content":"  [Phase.phaseModeration]: {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    [UserRole.Student]: {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"      \u0027isIssueCreatable\u0027: false,"},{"lineNumber":114,"author":{"gitId":"-"},"content":"      \u0027isIssueDeletable\u0027: false,"},{"lineNumber":115,"author":{"gitId":"-"},"content":"      \u0027isIssueTitleEditable\u0027: false,"},{"lineNumber":116,"author":{"gitId":"-"},"content":"      \u0027isIssueDescriptionEditable\u0027: false,"},{"lineNumber":117,"author":{"gitId":"-"},"content":"      \u0027isIssueLabelsEditable\u0027: false,"},{"lineNumber":118,"author":{"gitId":"-"},"content":"      \u0027isTeamResponseEditable\u0027: false,"},{"lineNumber":119,"author":{"gitId":"-"},"content":"      \u0027isTesterResponseEditable\u0027: false,"},{"lineNumber":120,"author":{"gitId":"-"},"content":"      \u0027isTutorResponseEditable\u0027: false,"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    [UserRole.Tutor]: {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"      \u0027isIssueCreatable\u0027: false,"},{"lineNumber":124,"author":{"gitId":"-"},"content":"      \u0027isIssueDeletable\u0027: false,"},{"lineNumber":125,"author":{"gitId":"-"},"content":"      \u0027isIssueTitleEditable\u0027: false,"},{"lineNumber":126,"author":{"gitId":"-"},"content":"      \u0027isIssueDescriptionEditable\u0027: true,"},{"lineNumber":127,"author":{"gitId":"-"},"content":"      \u0027isIssueLabelsEditable\u0027: true,"},{"lineNumber":128,"author":{"gitId":"-"},"content":"      \u0027isTeamResponseEditable\u0027: false,"},{"lineNumber":129,"author":{"gitId":"-"},"content":"      \u0027isTesterResponseEditable\u0027: false,"},{"lineNumber":130,"author":{"gitId":"-"},"content":"      \u0027isTutorResponseEditable\u0027: true,"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    [UserRole.Admin]: {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"      \u0027isIssueCreatable\u0027: false,"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      \u0027isIssueDeletable\u0027: false,"},{"lineNumber":135,"author":{"gitId":"-"},"content":"      \u0027isIssueTitleEditable\u0027: false,"},{"lineNumber":136,"author":{"gitId":"-"},"content":"      \u0027isIssueDescriptionEditable\u0027: true,"},{"lineNumber":137,"author":{"gitId":"-"},"content":"      \u0027isIssueLabelsEditable\u0027: true,"},{"lineNumber":138,"author":{"gitId":"-"},"content":"      \u0027isTeamResponseEditable\u0027: false,"},{"lineNumber":139,"author":{"gitId":"-"},"content":"      \u0027isTesterResponseEditable\u0027: false,"},{"lineNumber":140,"author":{"gitId":"-"},"content":"      \u0027isTutorResponseEditable\u0027: true,"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":143,"author":{"gitId":"-"},"content":"};"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":146,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027,"},{"lineNumber":147,"author":{"gitId":"-"},"content":"})"},{"lineNumber":148,"author":{"gitId":"-"},"content":"export class PermissionService {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  constructor(private githubService: GithubService, private userService: UserService, private phaseService: PhaseService) {}"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"  isIssueCreatable(): boolean {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    return this.askForPermission(PermissionLevel.User, \u0027isIssueCreatable\u0027);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"  isIssueDeletable(): boolean {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    return this.askForPermission(PermissionLevel.User, \u0027isIssueDeletable\u0027);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"  isIssueTitleEditable(): boolean {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    return this.askForPermission(PermissionLevel.User, \u0027isIssueTitleEditable\u0027);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"  isIssueDescriptionEditable(): boolean {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    return this.askForPermission(PermissionLevel.User, \u0027isIssueDescriptionEditable\u0027);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"  isIssueLabelsEditable(): boolean {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    return this.askForPermission(PermissionLevel.User, \u0027isIssueLabelsEditable\u0027);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"  isTesterResponseEditable(): boolean {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    return this.askForPermission(PermissionLevel.User, \u0027isTesterResponseEditable\u0027);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"  isTeamResponseEditable(): boolean {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    return this.askForPermission(PermissionLevel.User, \u0027isTeamResponseEditable\u0027);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"  isTutorResponseEditable(): boolean {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    return this.askForPermission(PermissionLevel.User, \u0027isTutorResponseEditable\u0027);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"  isIssueEditable(): boolean {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    return this.isIssueTitleEditable() || this.isIssueDescriptionEditable()"},{"lineNumber":185,"author":{"gitId":"-"},"content":"           || this.isIssueLabelsEditable() || this.isTeamResponseEditable()"},{"lineNumber":186,"author":{"gitId":"-"},"content":"           || this.isTesterResponseEditable() || this.isTutorResponseEditable();"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"  private askForPermission(permissionLevel: PermissionLevel, permissionType: string): boolean {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    switch (permissionLevel) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"      case PermissionLevel.Phase:"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        return PERMISSIONS[this.phaseService.currentPhase][permissionType];"},{"lineNumber":193,"author":{"gitId":"-"},"content":"      case PermissionLevel.User:"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        return PERMISSIONS[this.phaseService.currentPhase][this.userService.currentUser.role][permissionType];"},{"lineNumber":195,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        return false;"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":199,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dingyuchen":2,"-":197}},{"path":"src/app/core/services/phase.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { HttpClient } from \u0027@angular/common/http\u0027;"},{"lineNumber":3,"author":{"gitId":"ptvrajsk"},"content":"import { flatMap, map, retry, tap } from \u0027rxjs/operators\u0027;"},{"lineNumber":4,"author":{"gitId":"ptvrajsk"},"content":"import { Observable, of, pipe } from \u0027rxjs\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { LabelService } from \u0027./label.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { UserService } from \u0027./user.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { SessionData, assertSessionDataIntegrity } from \u0027../models/session.model\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { MatDialog } from \u0027@angular/material\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { SessionFixConfirmationComponent } from \u0027./session-fix-confirmation/session-fix-confirmation.component\u0027;"},{"lineNumber":11,"author":{"gitId":"dingyuchen"},"content":"import { Phase } from \u0027../models/phase.model\u0027;"},{"lineNumber":12,"author":{"gitId":"seanlowjk"},"content":"import { throwIfFalse } from \u0027../../shared/lib/custom-ops\u0027;"},{"lineNumber":13,"author":{"gitId":"seanlowjk"},"content":"import { RepoCreatorService } from \u0027./repo-creator.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"seanlowjk"},"content":"export const SESSION_AVALIABILITY_FIX_FAILED \u003d \u0027Session Availability Fix failed.\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"ptvrajsk"},"content":"export const PhaseDescription \u003d {"},{"lineNumber":18,"author":{"gitId":"ptvrajsk"},"content":"  [Phase.phaseBugReporting]: \u0027Bug Reporting Phase\u0027,"},{"lineNumber":19,"author":{"gitId":"ptvrajsk"},"content":"  [Phase.phaseTeamResponse]: \u0027Team\\\u0027s Response Phase\u0027,"},{"lineNumber":20,"author":{"gitId":"ptvrajsk"},"content":"  [Phase.phaseTesterResponse]: \u0027Tester\\\u0027s Response Phase\u0027,"},{"lineNumber":21,"author":{"gitId":"ptvrajsk"},"content":"  [Phase.phaseModeration]: \u0027Moderation Phase\u0027"},{"lineNumber":22,"author":{"gitId":"ptvrajsk"},"content":"};"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027,"},{"lineNumber":26,"author":{"gitId":"-"},"content":"})"},{"lineNumber":27,"author":{"gitId":"-"},"content":"export class PhaseService {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"  public currentPhase: Phase;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  private repoName: string;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  private orgName: string;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"  public sessionData: SessionData;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"  private phaseRepoOwners \u003d {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    phaseBugReporting: \u0027\u0027,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    phaseTeamResponse: \u0027\u0027,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    phaseTesterResponse: \u0027\u0027,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    phaseModeration: \u0027\u0027"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"  constructor(private http: HttpClient,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"              private githubService: GithubService,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"              private labelService: LabelService,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"              private userService: UserService,"},{"lineNumber":46,"author":{"gitId":"seanlowjk"},"content":"              private repoCreatorService: RepoCreatorService,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"              public phaseFixConfirmationDialog: MatDialog) {}"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":49,"author":{"gitId":"-"},"content":"   * Stores the location of the repositories belonging to"},{"lineNumber":50,"author":{"gitId":"-"},"content":"   * each phase of the application."},{"lineNumber":51,"author":{"gitId":"-"},"content":"   * @param org - name of organization."},{"lineNumber":52,"author":{"gitId":"-"},"content":"   * @param user - name of user."},{"lineNumber":53,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  setPhaseOwners(org: string, user: string): void {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    this.orgName \u003d org;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    this.phaseRepoOwners.phaseBugReporting \u003d user;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    this.phaseRepoOwners.phaseTeamResponse \u003d org;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    this.phaseRepoOwners.phaseTesterResponse \u003d user;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    this.phaseRepoOwners.phaseModeration \u003d org;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"   * Returns the name of the owner of a given phase."},{"lineNumber":64,"author":{"gitId":"-"},"content":"   * @param phase"},{"lineNumber":65,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  getPhaseOwner(phase: string): string {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    return this.phaseRepoOwners[phase];"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"  fetchSessionData(): Observable\u003cSessionData\u003e {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    return this.githubService.fetchSettingsFile().pipe("},{"lineNumber":72,"author":{"gitId":"-"},"content":"      map(data \u003d\u003e data as SessionData)"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":74,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"   * Will fetch session data and update phase service with it."},{"lineNumber":78,"author":{"gitId":"-"},"content":"   * @returns - If the session is valid return true, else false"},{"lineNumber":79,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"  storeSessionData(): Observable\u003cboolean\u003e {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    return this.fetchSessionData().pipe("},{"lineNumber":82,"author":{"gitId":"-"},"content":"      assertSessionDataIntegrity(),"},{"lineNumber":83,"author":{"gitId":"-"},"content":"      map((sessionData: SessionData) \u003d\u003e {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        this.updateSessionParameters(sessionData);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return this.currentPhase !\u003d\u003d undefined;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":88,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"   * Determines the github\u0027s level of repo permission required for the phase."},{"lineNumber":92,"author":{"gitId":"-"},"content":"   * Ref: https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/#available-scopes"},{"lineNumber":93,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  githubRepoPermissionLevel(): string {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    if (this.sessionData.openPhases.includes(Phase.phaseModeration)) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"      return \u0027repo\u0027;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"      return \u0027public_repo\u0027;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   * Checks if the necessary repository is available and creates it if the permissions are available."},{"lineNumber":104,"author":{"gitId":"-"},"content":"   * @param sessionData"},{"lineNumber":105,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  verifySessionAvailability(sessionData: SessionData): Observable\u003cboolean\u003e {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    return this.githubService.isRepositoryPresent(this.phaseRepoOwners[this.currentPhase], sessionData[this.currentPhase]);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   * Stores session data and sets current session\u0027s phase."},{"lineNumber":112,"author":{"gitId":"-"},"content":"   * @param sessionData"},{"lineNumber":113,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":114,"author":{"gitId":"-"},"content":"  updateSessionParameters(sessionData: SessionData) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    this.sessionData \u003d sessionData;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    this.currentPhase \u003d Phase[sessionData.openPhases[0]];"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    this.repoName \u003d sessionData[sessionData.openPhases[0]];"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    this.githubService.storePhaseDetails(this.phaseRepoOwners[this.currentPhase], this.repoName);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":122,"author":{"gitId":"-"},"content":"   * Launches the SessionFixConfirmation Dialog."},{"lineNumber":123,"author":{"gitId":"-"},"content":"   * @return Observable\u003cboolean\u003e - Representing user\u0027s permission grant."},{"lineNumber":124,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  openSessionFixConfirmation(): Observable\u003cboolean\u003e {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    const dialogRef \u003d this.phaseFixConfirmationDialog.open(SessionFixConfirmationComponent, {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"      data: {user: this.userService.currentUser.loginId, repoName: this.sessionData[this.currentPhase]}"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    return dialogRef.afterClosed();"},{"lineNumber":131,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":135,"author":{"gitId":"-"},"content":"   * Ensures that the necessary data for the current session is available"},{"lineNumber":136,"author":{"gitId":"-"},"content":"   * and synchronized with the remote server."},{"lineNumber":137,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":138,"author":{"gitId":"-"},"content":"  sessionSetup(): Observable\u003cany\u003e {"},{"lineNumber":139,"author":{"gitId":"ptvrajsk"},"content":"    // Permission Caching Mechanism to prevent repeating permission request."},{"lineNumber":140,"author":{"gitId":"ptvrajsk"},"content":"    let isSessionFixPermissionGranted \u003d false;"},{"lineNumber":141,"author":{"gitId":"ptvrajsk"},"content":"    const cacheSessionFixPermission \u003d () \u003d\u003e {"},{"lineNumber":142,"author":{"gitId":"ptvrajsk"},"content":"      return pipe("},{"lineNumber":143,"author":{"gitId":"ptvrajsk"},"content":"        tap((sessionFixPermission: boolean | null) \u003d\u003e {"},{"lineNumber":144,"author":{"gitId":"ptvrajsk"},"content":"          isSessionFixPermissionGranted \u003d sessionFixPermission ? sessionFixPermission : false;"},{"lineNumber":145,"author":{"gitId":"ptvrajsk"},"content":"        })"},{"lineNumber":146,"author":{"gitId":"ptvrajsk"},"content":"      );"},{"lineNumber":147,"author":{"gitId":"ptvrajsk"},"content":"    };"},{"lineNumber":148,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    return this.fetchSessionData().pipe("},{"lineNumber":150,"author":{"gitId":"-"},"content":"      assertSessionDataIntegrity(),"},{"lineNumber":151,"author":{"gitId":"-"},"content":"      flatMap((sessionData: SessionData) \u003d\u003e {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        this.updateSessionParameters(sessionData);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        return this.verifySessionAvailability(sessionData);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":155,"author":{"gitId":"-"},"content":"      flatMap((isSessionAvailable: boolean) \u003d\u003e {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        if (!isSessionAvailable \u0026\u0026 this.currentPhase \u003d\u003d\u003d Phase.phaseBugReporting) {"},{"lineNumber":157,"author":{"gitId":"ptvrajsk"},"content":"          if (isSessionFixPermissionGranted) {"},{"lineNumber":158,"author":{"gitId":"ptvrajsk"},"content":"            return of(true);"},{"lineNumber":159,"author":{"gitId":"ptvrajsk"},"content":"          }"},{"lineNumber":160,"author":{"gitId":"-"},"content":"          return this.openSessionFixConfirmation();"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"          return of(null);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":165,"author":{"gitId":"ptvrajsk"},"content":"      cacheSessionFixPermission(),"},{"lineNumber":166,"author":{"gitId":"seanlowjk"},"content":"      this.repoCreatorService.verifyRepoCreationPermissions(this.currentPhase),"},{"lineNumber":167,"author":{"gitId":"seanlowjk"},"content":"      this.repoCreatorService.attemptRepoCreation(this.sessionData[this.currentPhase]),"},{"lineNumber":168,"author":{"gitId":"seanlowjk"},"content":"      this.repoCreatorService.verifyRepoCreation(this.getPhaseOwner(this.currentPhase), this.sessionData[this.currentPhase]),"},{"lineNumber":169,"author":{"gitId":"seanlowjk"},"content":"      throwIfFalse("},{"lineNumber":170,"author":{"gitId":"seanlowjk"},"content":"        (isSessionCreated: boolean) \u003d\u003e isSessionCreated,"},{"lineNumber":171,"author":{"gitId":"seanlowjk"},"content":"        () \u003d\u003e new Error(SESSION_AVALIABILITY_FIX_FAILED)),"},{"lineNumber":172,"author":{"gitId":"seanlowjk"},"content":"      this.labelService.syncLabels(),"},{"lineNumber":173,"author":{"gitId":"ptvrajsk"},"content":"      retry(1)  // Retry once, to handle edge case where GitHub API cannot immediately confirm existence of the newly created repo."},{"lineNumber":174,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"  public getPhaseDetail() {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    return this.orgName.concat(\u0027/\u0027).concat(this.repoName);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"  reset() {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    this.currentPhase \u003d null;"},{"lineNumber":183,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dingyuchen":1,"ptvrajsk":23,"seanlowjk":11,"-":150}},{"path":"src/app/core/services/repo-creator.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"seanlowjk"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"seanlowjk"},"content":"import { flatMap, tap } from \u0027rxjs/operators\u0027;"},{"lineNumber":3,"author":{"gitId":"seanlowjk"},"content":"import { Observable, of, pipe, UnaryFunction } from \u0027rxjs\u0027;"},{"lineNumber":4,"author":{"gitId":"seanlowjk"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":5,"author":{"gitId":"seanlowjk"},"content":"import { UserService } from \u0027./user.service\u0027;"},{"lineNumber":6,"author":{"gitId":"seanlowjk"},"content":"import { Phase } from \u0027../models/phase.model\u0027;"},{"lineNumber":7,"author":{"gitId":"seanlowjk"},"content":"import { UserRole } from \u0027../models/user.model\u0027;"},{"lineNumber":8,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":9,"author":{"gitId":"seanlowjk"},"content":"export const MISSING_REQUIRED_REPO \u003d \u0027You cannot proceed without the required repository.\u0027;"},{"lineNumber":10,"author":{"gitId":"seanlowjk"},"content":"export const CURRENT_PHASE_REPO_CLOSED \u003d \u0027Current Phase\\\u0027s Repository has not been opened.\u0027;"},{"lineNumber":11,"author":{"gitId":"seanlowjk"},"content":"export const BUG_REPORTING_INVALID_ROLE \u003d"},{"lineNumber":12,"author":{"gitId":"seanlowjk"},"content":"  \"\u0027Bug-Reporting Phase\\\u0027s repository initialisation is only available to Students.\u0027\";"},{"lineNumber":13,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":14,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":15,"author":{"gitId":"seanlowjk"},"content":"@Injectable({"},{"lineNumber":16,"author":{"gitId":"seanlowjk"},"content":"  providedIn: \u0027root\u0027,"},{"lineNumber":17,"author":{"gitId":"seanlowjk"},"content":"})"},{"lineNumber":18,"author":{"gitId":"seanlowjk"},"content":"export class RepoCreatorService {"},{"lineNumber":19,"author":{"gitId":"seanlowjk"},"content":"  constructor("},{"lineNumber":20,"author":{"gitId":"seanlowjk"},"content":"    private githubService: GithubService,"},{"lineNumber":21,"author":{"gitId":"seanlowjk"},"content":"    private userService: UserService"},{"lineNumber":22,"author":{"gitId":"seanlowjk"},"content":"  ) {}"},{"lineNumber":23,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":24,"author":{"gitId":"seanlowjk"},"content":" /**"},{"lineNumber":25,"author":{"gitId":"seanlowjk"},"content":"  * Checks if the current phase and current user role match the given permissions"},{"lineNumber":26,"author":{"gitId":"seanlowjk"},"content":"  * for the user to create the phase repository if deemed necessary"},{"lineNumber":27,"author":{"gitId":"seanlowjk"},"content":"  * @param currentPhase the current phase of the session."},{"lineNumber":28,"author":{"gitId":"seanlowjk"},"content":"  */"},{"lineNumber":29,"author":{"gitId":"seanlowjk"},"content":"  public verifyRepoCreationPermissions(currentPhase: Phase):"},{"lineNumber":30,"author":{"gitId":"seanlowjk"},"content":"    UnaryFunction\u003cObservable\u003cboolean | null\u003e, Observable\u003cboolean | null\u003e\u003e {"},{"lineNumber":31,"author":{"gitId":"seanlowjk"},"content":"    return pipe("},{"lineNumber":32,"author":{"gitId":"seanlowjk"},"content":"      tap((repoCreationPermission: boolean | null) \u003d\u003e {"},{"lineNumber":33,"author":{"gitId":"seanlowjk"},"content":"        if (repoCreationPermission \u003d\u003d\u003d false) {"},{"lineNumber":34,"author":{"gitId":"seanlowjk"},"content":"          throw new Error(MISSING_REQUIRED_REPO);"},{"lineNumber":35,"author":{"gitId":"seanlowjk"},"content":"        } else if (currentPhase !\u003d\u003d Phase.phaseBugReporting) {"},{"lineNumber":36,"author":{"gitId":"seanlowjk"},"content":"          throw new Error(CURRENT_PHASE_REPO_CLOSED);"},{"lineNumber":37,"author":{"gitId":"seanlowjk"},"content":"        } else if (this.userService.currentUser.role !\u003d\u003d UserRole.Student) {"},{"lineNumber":38,"author":{"gitId":"seanlowjk"},"content":"          throw new Error(BUG_REPORTING_INVALID_ROLE);"},{"lineNumber":39,"author":{"gitId":"seanlowjk"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"seanlowjk"},"content":"      })"},{"lineNumber":41,"author":{"gitId":"seanlowjk"},"content":"    );"},{"lineNumber":42,"author":{"gitId":"seanlowjk"},"content":"  }"},{"lineNumber":43,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":44,"author":{"gitId":"seanlowjk"},"content":"  /**"},{"lineNumber":45,"author":{"gitId":"seanlowjk"},"content":"   * Attempts to create the repository if permissions have been given to do so."},{"lineNumber":46,"author":{"gitId":"seanlowjk"},"content":"   * @param phaseRepo the name of the specified repository."},{"lineNumber":47,"author":{"gitId":"seanlowjk"},"content":"   * @return - Dummy Observable to give the API sometime to propagate if the creation of the new"},{"lineNumber":48,"author":{"gitId":"seanlowjk"},"content":"   *           repository is needed since the API Call used here does not return any response."},{"lineNumber":49,"author":{"gitId":"seanlowjk"},"content":"   */"},{"lineNumber":50,"author":{"gitId":"seanlowjk"},"content":"  public attemptRepoCreation(phaseRepo: string):"},{"lineNumber":51,"author":{"gitId":"seanlowjk"},"content":"    UnaryFunction\u003cObservable\u003cboolean | null\u003e, Observable\u003cboolean | null\u003e\u003e {"},{"lineNumber":52,"author":{"gitId":"seanlowjk"},"content":"    return pipe("},{"lineNumber":53,"author":{"gitId":"seanlowjk"},"content":"      flatMap((repoCreationPermission: boolean | null) \u003d\u003e {"},{"lineNumber":54,"author":{"gitId":"seanlowjk"},"content":"        if (repoCreationPermission \u003d\u003d\u003d null) {"},{"lineNumber":55,"author":{"gitId":"seanlowjk"},"content":"          // No Session Fix Necessary"},{"lineNumber":56,"author":{"gitId":"seanlowjk"},"content":"          return of(null);"},{"lineNumber":57,"author":{"gitId":"seanlowjk"},"content":"        } else {"},{"lineNumber":58,"author":{"gitId":"seanlowjk"},"content":"          this.githubService.createRepository(phaseRepo);"},{"lineNumber":59,"author":{"gitId":"seanlowjk"},"content":"          return new Observable(subscriber \u003d\u003e {"},{"lineNumber":60,"author":{"gitId":"seanlowjk"},"content":"            setTimeout(() \u003d\u003e subscriber.next(true), 1000);"},{"lineNumber":61,"author":{"gitId":"seanlowjk"},"content":"          });"},{"lineNumber":62,"author":{"gitId":"seanlowjk"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"seanlowjk"},"content":"      })"},{"lineNumber":64,"author":{"gitId":"seanlowjk"},"content":"    );"},{"lineNumber":65,"author":{"gitId":"seanlowjk"},"content":"  }"},{"lineNumber":66,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":67,"author":{"gitId":"seanlowjk"},"content":"  /**"},{"lineNumber":68,"author":{"gitId":"seanlowjk"},"content":"   * Checks if the specified repository has been created."},{"lineNumber":69,"author":{"gitId":"seanlowjk"},"content":"   * @param phaseOwner the user or organization holding the specified repository."},{"lineNumber":70,"author":{"gitId":"seanlowjk"},"content":"   * @param phaseRepo the name of the specified repository."},{"lineNumber":71,"author":{"gitId":"seanlowjk"},"content":"   */"},{"lineNumber":72,"author":{"gitId":"seanlowjk"},"content":"  public verifyRepoCreation(phaseOwner: string, phaseRepo: string):"},{"lineNumber":73,"author":{"gitId":"seanlowjk"},"content":"    UnaryFunction\u003cObservable\u003cboolean | null\u003e, Observable\u003cboolean\u003e\u003e {"},{"lineNumber":74,"author":{"gitId":"seanlowjk"},"content":"    return pipe("},{"lineNumber":75,"author":{"gitId":"seanlowjk"},"content":"      flatMap((isFixAttempted: boolean | null) \u003d\u003e {"},{"lineNumber":76,"author":{"gitId":"seanlowjk"},"content":"        if (!isFixAttempted) {"},{"lineNumber":77,"author":{"gitId":"seanlowjk"},"content":"          // If no fix has been attempted, there is no need to verify fix outcome."},{"lineNumber":78,"author":{"gitId":"seanlowjk"},"content":"          return of(true);"},{"lineNumber":79,"author":{"gitId":"seanlowjk"},"content":"        } else {"},{"lineNumber":80,"author":{"gitId":"seanlowjk"},"content":"          // Verify that Repository has been created if a fix attempt has occurred."},{"lineNumber":81,"author":{"gitId":"seanlowjk"},"content":"          return this.githubService.isRepositoryPresent(phaseOwner, phaseRepo);"},{"lineNumber":82,"author":{"gitId":"seanlowjk"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"seanlowjk"},"content":"      })"},{"lineNumber":84,"author":{"gitId":"seanlowjk"},"content":"    );"},{"lineNumber":85,"author":{"gitId":"seanlowjk"},"content":"  }"},{"lineNumber":86,"author":{"gitId":"seanlowjk"},"content":"}"}],"authorContributionMap":{"seanlowjk":86}},{"path":"src/app/core/services/upload.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { uuid } from \u0027../../shared/lib/uuid\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { throwError } from \u0027rxjs\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"dingyuchen"},"content":"const SUPPORTED_VIDEO_FILE_TYPES \u003d [\u0027mp4\u0027, \u0027mov\u0027];"},{"lineNumber":7,"author":{"gitId":"dingyuchen"},"content":"export const SUPPORTED_FILE_TYPES \u003d [\u0027gif\u0027, \u0027jpeg\u0027, \u0027jpg\u0027, \u0027png\u0027, \u0027docx\u0027, \u0027gz\u0027, \u0027log\u0027, \u0027pdf\u0027, \u0027pptx\u0027, \u0027txt\u0027, \u0027xlsx\u0027, \u0027zip\u0027,"},{"lineNumber":8,"author":{"gitId":"dingyuchen"},"content":"                                     ...SUPPORTED_VIDEO_FILE_TYPES];"},{"lineNumber":9,"author":{"gitId":"-"},"content":"export const FILE_TYPE_SUPPORT_ERROR \u003d \u0027We don\\\u0027t support that file type.\u0027 +"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  \u0027 Try again with \u0027 + SUPPORTED_FILE_TYPES.join(\u0027, \u0027) + \u0027.\u0027;"},{"lineNumber":11,"author":{"gitId":"dingyuchen"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"dingyuchen"},"content":" * Returns an error message string for when file exceeds the defined size limit"},{"lineNumber":13,"author":{"gitId":"dingyuchen"},"content":" * @param fileType Canonical name for file, not to be confused with file extension"},{"lineNumber":14,"author":{"gitId":"dingyuchen"},"content":" * @param size Number of MBs"},{"lineNumber":15,"author":{"gitId":"dingyuchen"},"content":" */"},{"lineNumber":16,"author":{"gitId":"dingyuchen"},"content":"export const getSizeExceedErrorMsg \u003d (fileType: string, size: number): string \u003d\u003e"},{"lineNumber":17,"author":{"gitId":"dingyuchen"},"content":"  `Oops, ${fileType} is too big. Keep it under ${size}MB.`;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027,"},{"lineNumber":21,"author":{"gitId":"-"},"content":"})"},{"lineNumber":22,"author":{"gitId":"-"},"content":"export class UploadService {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"  constructor(private githubService: GithubService) {}"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"  uploadFile(base64File: string | ArrayBuffer, userFilename: string) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    let base64String: string;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    if (base64File instanceof ArrayBuffer) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      base64String \u003d String.fromCharCode.apply(null, new Uint16Array(base64File));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      base64String \u003d base64File;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"dingyuchen"},"content":"    const fileType \u003d this.getFileExtension(userFilename);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    if (SUPPORTED_FILE_TYPES.includes(fileType.toLowerCase())) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      base64String \u003d base64String.split(\u0027,\u0027)[1];"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      const onlineFilename \u003d uuid();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"      return this.githubService.uploadFile(`${onlineFilename}.${fileType}`, base64String);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      return throwError(FILE_TYPE_SUPPORT_ERROR);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"dingyuchen"},"content":"  getFileExtension(fileName: string): string {"},{"lineNumber":45,"author":{"gitId":"dingyuchen"},"content":"    return fileName.split(\u0027.\u0027).pop();"},{"lineNumber":46,"author":{"gitId":"dingyuchen"},"content":"  }"},{"lineNumber":47,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":48,"author":{"gitId":"dingyuchen"},"content":"  isVideoFile(fileName): boolean {"},{"lineNumber":49,"author":{"gitId":"dingyuchen"},"content":"    const fileType \u003d this.getFileExtension(fileName);"},{"lineNumber":50,"author":{"gitId":"dingyuchen"},"content":"    return SUPPORTED_VIDEO_FILE_TYPES.includes(fileType.toLowerCase());"},{"lineNumber":51,"author":{"gitId":"dingyuchen"},"content":"  }"},{"lineNumber":52,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"  isSupportedFileType(fileName): boolean {"},{"lineNumber":54,"author":{"gitId":"dingyuchen"},"content":"    const fileType \u003d this.getFileExtension(fileName);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    return SUPPORTED_FILE_TYPES.includes(fileType.toLowerCase());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dingyuchen":21,"-":36}},{"path":"src/app/phase-bug-reporting/phase-bug-reporting.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, OnInit, ViewChild } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { PermissionService } from \u0027../core/services/permission.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../core/services/user.service\u0027;"},{"lineNumber":4,"author":{"gitId":"kkangs0226"},"content":"import { ACTION_BUTTONS, IssueTablesComponent } from \u0027../shared/issue-tables/issue-tables.component\u0027;"},{"lineNumber":5,"author":{"gitId":"kkangs0226"},"content":"import { TABLE_COLUMNS } from \u0027../shared/issue-tables/issue-tables-columns\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  selector: \u0027app-phase-bug-reporting\u0027,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./phase-bug-reporting.component.html\u0027,"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./phase-bug-reporting.component.css\u0027]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"})"},{"lineNumber":12,"author":{"gitId":"-"},"content":"export class PhaseBugReportingComponent implements OnInit {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"  readonly displayedColumns \u003d ["},{"lineNumber":15,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.ID,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.TITLE,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.TYPE,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.SEVERITY,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.ACTIONS"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  ];"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  readonly actionButtons: ACTION_BUTTONS[] \u003d ["},{"lineNumber":22,"author":{"gitId":"-"},"content":"    ACTION_BUTTONS.VIEW_IN_WEB,"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    ACTION_BUTTONS.DELETE_ISSUE,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    ACTION_BUTTONS.FIX_ISSUE"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  ];"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"  @ViewChild(IssueTablesComponent) table: IssueTablesComponent;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"  constructor(public permissions: PermissionService,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"              public userService: UserService) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"  applyFilter(filterValue: string) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    this.table.issues.filter \u003d filterValue;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kkangs0226":2,"-":37}},{"path":"src/app/phase-moderation/phase-moderation.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, OnInit, ViewChild } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { IssuesFilter } from \u0027../core/models/issue.model\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../core/services/issue.service\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../core/services/error-handling.service\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../core/services/user.service\u0027;"},{"lineNumber":6,"author":{"gitId":"dingyuchen"},"content":"import { Phase } from \u0027../core/models/phase.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { DataService } from \u0027../core/services/data.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { LabelService } from \u0027../core/services/label.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027../core/services/github.service\u0027;"},{"lineNumber":10,"author":{"gitId":"kkangs0226"},"content":"import { ACTION_BUTTONS, IssueTablesComponent } from \u0027../shared/issue-tables/issue-tables.component\u0027;"},{"lineNumber":11,"author":{"gitId":"kkangs0226"},"content":"import { TABLE_COLUMNS } from \u0027../shared/issue-tables/issue-tables-columns\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  selector: \u0027app-phase-moderation\u0027,"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./phase-moderation.component.html\u0027,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./phase-moderation.component.css\u0027]"},{"lineNumber":17,"author":{"gitId":"-"},"content":"})"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"export class PhaseModerationComponent implements OnInit {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"  displayedColumns \u003d ["},{"lineNumber":22,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.ID,"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.TITLE,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.TYPE,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.SEVERITY,"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.TODO,"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.ACTIONS"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  ];"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"  public teamFilter \u003d \u0027All Teams\u0027;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"  readonly actionButtons: ACTION_BUTTONS[] \u003d [ACTION_BUTTONS.VIEW_IN_WEB, ACTION_BUTTONS.FIX_ISSUE];"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"  @ViewChild(IssueTablesComponent) table: IssueTablesComponent;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"  constructor(private issueService: IssueService,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"              private errorHandlingService: ErrorHandlingService,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"              public userService: UserService, private labelService: LabelService, private githubService: GithubService,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"              private dataService: DataService) { }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    this.issueService.setIssueTeamFilter(this.teamFilter);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"  applyFilter(filterValue: string) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    this.table.issues.filter \u003d filterValue;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"  get teamList(): string[] {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    const teams \u003d this.dataService.getTeams();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    switch (IssuesFilter[Phase.phaseModeration][this.userService.currentUser.role]) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      case \u0027FILTER_BY_TEAM_ASSIGNED\u0027:"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return [\u0027All Teams\u0027, ...this.userService.currentUser.allocatedTeams.map(team \u003d\u003e team.id)];"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      case \u0027NO_FILTER\u0027:"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return [\u0027All Teams\u0027, ...teams];"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"  updateDisplayedTeam(newTeam: string) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    this.teamFilter \u003d newTeam;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    this.table.issues.teamFilter \u003d this.teamFilter;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kkangs0226":2,"dingyuchen":1,"-":63}},{"path":"src/app/phase-team-response/issues-faulty/issues-faulty.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../core/services/issue.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { IssuesDataTable } from \u0027../../shared/issue-tables/IssuesDataTable\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { Issue } from \u0027../../core/models/issue.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../../core/services/user.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { UserRole } from \u0027../../core/models/user.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { PermissionService } from \u0027../../core/services/permission.service\u0027;"},{"lineNumber":8,"author":{"gitId":"kkangs0226"},"content":"import { ACTION_BUTTONS, IssueTablesComponent } from \u0027../../shared/issue-tables/issue-tables.component\u0027;"},{"lineNumber":9,"author":{"gitId":"kkangs0226"},"content":"import { TABLE_COLUMNS } from \u0027../../shared/issue-tables/issue-tables-columns\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  selector: \u0027app-issues-faulty\u0027,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./issues-faulty.component.html\u0027,"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./issues-faulty.component.css\u0027],"},{"lineNumber":15,"author":{"gitId":"-"},"content":"})"},{"lineNumber":16,"author":{"gitId":"-"},"content":"export class IssuesFaultyComponent implements OnInit, OnChanges {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  displayedColumns: string[];"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  filter: (issue: Issue) \u003d\u003e boolean;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"  readonly actionButtons: ACTION_BUTTONS[] \u003d ["},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ACTION_BUTTONS.VIEW_IN_WEB,"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    ACTION_BUTTONS.FIX_ISSUE"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  ];"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"  @Input() teamFilter: string;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"  @ViewChild(IssueTablesComponent) table: IssueTablesComponent;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"  constructor(public issueService: IssueService, public userService: UserService,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      public permissions: PermissionService) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    if (userService.currentUser.role \u003d\u003d\u003d UserRole.Student) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      this.displayedColumns \u003d ["},{"lineNumber":33,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ID,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TITLE,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TYPE,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.SEVERITY,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.RESPONSE,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ASSIGNEE,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.DUPLICATED_ISSUES,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ACTIONS"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      ];"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      this.displayedColumns \u003d ["},{"lineNumber":44,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ID,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TITLE,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TEAM_ASSIGNED,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TYPE,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.SEVERITY,"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.RESPONSE,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ASSIGNEE,"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.DUPLICATED_ISSUES,"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ACTIONS"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      ];"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"  ngOnChanges(changes: SimpleChanges) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    if (!changes.teamFilter.isFirstChange()) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      this.table.issues.teamFilter \u003d changes.teamFilter.currentValue;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    this.filter \u003d (issue: Issue): boolean \u003d\u003e {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      return this.issueService.hasTeamResponse(issue.id) \u0026\u0026"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        (!!issue.duplicateOf \u0026\u0026 this.issueService.issues$.getValue().filter(childIssue \u003d\u003e {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"          return childIssue.duplicateOf \u003d\u003d\u003d issue.id;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }).length !\u003d\u003d 0);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"  applyFilter(filterValue: string) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    this.table.issues.filter \u003d filterValue;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kkangs0226":2,"-":73}},{"path":"src/app/phase-team-response/issues-pending/issues-pending.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../core/services/issue.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { IssuesDataTable } from \u0027../../shared/issue-tables/IssuesDataTable\u0027;"},{"lineNumber":4,"author":{"gitId":"kkangs0226"},"content":"import { Issue, STATUS } from \u0027../../core/models/issue.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { PermissionService } from \u0027../../core/services/permission.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../../core/services/user.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { UserRole } from \u0027../../core/models/user.model\u0027;"},{"lineNumber":8,"author":{"gitId":"kkangs0226"},"content":"import { ACTION_BUTTONS, IssueTablesComponent } from \u0027../../shared/issue-tables/issue-tables.component\u0027;"},{"lineNumber":9,"author":{"gitId":"kkangs0226"},"content":"import { TABLE_COLUMNS } from \u0027../../shared/issue-tables/issue-tables-columns\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  selector: \u0027app-issues-pending\u0027,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./issues-pending.component.html\u0027,"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./issues-pending.component.css\u0027]"},{"lineNumber":15,"author":{"gitId":"-"},"content":"})"},{"lineNumber":16,"author":{"gitId":"-"},"content":"export class IssuesPendingComponent implements OnInit, OnChanges {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  displayedColumns;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  filter: (issue: Issue) \u003d\u003e boolean;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"  readonly actionButtons: ACTION_BUTTONS[] \u003d ["},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ACTION_BUTTONS.VIEW_IN_WEB,"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    ACTION_BUTTONS.RESPOND_TO_ISSUE,"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    ACTION_BUTTONS.MARK_AS_RESPONDED,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    ACTION_BUTTONS.FIX_ISSUE"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  ];"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"  @Input() teamFilter: string;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"  @ViewChild(IssueTablesComponent) table: IssueTablesComponent;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"  constructor(public issueService: IssueService,"},{"lineNumber":32,"author":{"gitId":"-"},"content":"              public permissions: PermissionService, public userService: UserService) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    if (userService.currentUser.role !\u003d\u003d UserRole.Student) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      this.displayedColumns \u003d ["},{"lineNumber":35,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ID,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TITLE,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TEAM_ASSIGNED,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TYPE,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.SEVERITY,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.DUPLICATED_ISSUES,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ACTIONS"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      ];"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      this.displayedColumns \u003d ["},{"lineNumber":45,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ID,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TITLE,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TYPE,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.SEVERITY,"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.DUPLICATED_ISSUES,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ACTIONS"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      ];"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"  ngOnChanges(changes: SimpleChanges) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    if (!changes.teamFilter.isFirstChange()) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      this.table.issues.teamFilter \u003d changes.teamFilter.currentValue;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":62,"author":{"gitId":"kkangs0226"},"content":"    const isNotDuplicate \u003d (issue: Issue) \u003d\u003e !issue.duplicateOf;"},{"lineNumber":63,"author":{"gitId":"kkangs0226"},"content":"    const doesNotHaveFinalisedResponse \u003d (issue: Issue) \u003d\u003e"},{"lineNumber":64,"author":{"gitId":"kkangs0226"},"content":"        (!this.issueService.hasTeamResponse(issue.id) || (!issue.status || issue.status \u003d\u003d\u003d STATUS.Incomplete));"},{"lineNumber":65,"author":{"gitId":"kkangs0226"},"content":"    this.filter \u003d (issue: Issue) \u003d\u003e doesNotHaveFinalisedResponse(issue) \u0026\u0026 isNotDuplicate(issue);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"  applyFilter(filterValue: string) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    this.table.issues.filter \u003d filterValue;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kkangs0226":7,"-":64}},{"path":"src/app/phase-team-response/issues-responded/issues-responded.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../core/services/issue.service\u0027;"},{"lineNumber":3,"author":{"gitId":"dingyuchen"},"content":"import { Issue, STATUS } from \u0027../../core/models/issue.model\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../../core/services/user.service\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { UserRole } from \u0027../../core/models/user.model\u0027;"},{"lineNumber":6,"author":{"gitId":"kkangs0226"},"content":"import { ACTION_BUTTONS, IssueTablesComponent } from \u0027../../shared/issue-tables/issue-tables.component\u0027;"},{"lineNumber":7,"author":{"gitId":"kkangs0226"},"content":"import { TABLE_COLUMNS } from \u0027../../shared/issue-tables/issue-tables-columns\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  selector: \u0027app-issues-responded\u0027,"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./issues-responded.component.html\u0027,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./issues-responded.component.css\u0027],"},{"lineNumber":13,"author":{"gitId":"-"},"content":"})"},{"lineNumber":14,"author":{"gitId":"-"},"content":"export class IssuesRespondedComponent implements OnInit, OnChanges {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  displayedColumns: string[];"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  filter: (issue: Issue) \u003d\u003e boolean;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"  readonly actionButtons: ACTION_BUTTONS[] \u003d ["},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ACTION_BUTTONS.VIEW_IN_WEB,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    ACTION_BUTTONS.MARK_AS_PENDING,"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ACTION_BUTTONS.FIX_ISSUE"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  ];"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"  @Input() teamFilter: string;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"  @ViewChild(IssueTablesComponent) table: IssueTablesComponent;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"  constructor(public issueService: IssueService, public userService: UserService) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    if (userService.currentUser.role \u003d\u003d\u003d UserRole.Student) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      this.displayedColumns \u003d ["},{"lineNumber":31,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ID,"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TITLE,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TYPE,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.SEVERITY,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.RESPONSE,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ASSIGNEE,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.DUPLICATED_ISSUES,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ACTIONS"},{"lineNumber":39,"author":{"gitId":"-"},"content":"      ];"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      this.displayedColumns \u003d ["},{"lineNumber":42,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ID,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TITLE,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TEAM_ASSIGNED,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TYPE,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.SEVERITY,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.RESPONSE,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ASSIGNEE,"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.DUPLICATED_ISSUES,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ACTIONS"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      ];"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"  ngOnChanges(changes: SimpleChanges) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    if (!changes.teamFilter.isFirstChange()) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      this.table.issues.teamFilter \u003d changes.teamFilter.currentValue;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    this.filter \u003d (issue: Issue) \u003d\u003e {"},{"lineNumber":63,"author":{"gitId":"dingyuchen"},"content":"      const isDuplicateIssue \u003d (issue) \u003d\u003e !!issue.duplicateOf;"},{"lineNumber":64,"author":{"gitId":"dingyuchen"},"content":"      const issueIsDone \u003d (issue: Issue) \u003d\u003e issue.status \u003d\u003d\u003d STATUS.Done;"},{"lineNumber":65,"author":{"gitId":"dingyuchen"},"content":"      const hasTeamResponse \u003d (issue: Issue) \u003d\u003e this.issueService.hasTeamResponse(issue.id);"},{"lineNumber":66,"author":{"gitId":"dingyuchen"},"content":"      return hasTeamResponse(issue) \u0026\u0026 !isDuplicateIssue(issue) \u0026\u0026 issueIsDone(issue);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"  applyFilter(filterValue: string) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    this.table.issues.filter \u003d filterValue;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kkangs0226":2,"dingyuchen":5,"-":66}},{"path":"src/app/phase-team-response/phase-team-response.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, OnInit } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../core/services/user.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { IssuesFilter } from \u0027../core/models/issue.model\u0027;"},{"lineNumber":4,"author":{"gitId":"dingyuchen"},"content":"import { Phase } from \u0027../core/models/phase.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { DataService } from \u0027../core/services/data.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../core/services/issue.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  selector: \u0027app-phase-team-response\u0027,"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./phase-team-response.component.html\u0027,"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./phase-team-response.component.css\u0027]"},{"lineNumber":12,"author":{"gitId":"-"},"content":"})"},{"lineNumber":13,"author":{"gitId":"-"},"content":"export class PhaseTeamResponseComponent implements OnInit {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  public teamFilter \u003d \u0027All Teams\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"  constructor(public userService: UserService, private dataService: DataService, private issueService: IssueService) {}"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    this.issueService.setIssueTeamFilter(this.teamFilter);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"  get teamList(): string[] {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    const teams \u003d this.dataService.getTeams();"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    switch (IssuesFilter[Phase.phaseTeamResponse][this.userService.currentUser.role]) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      case \u0027FILTER_BY_TEAM_ASSIGNED\u0027:"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return [\u0027All Teams\u0027, ...this.userService.currentUser.allocatedTeams.map(team \u003d\u003e team.id)];"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      case \u0027NO_FILTER\u0027:"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return [\u0027All Teams\u0027, ...teams];"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"  updateDisplayedTeam(newTeam: string) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    this.teamFilter \u003d newTeam;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dingyuchen":1,"-":36}},{"path":"src/app/phase-tester-response/issue-pending/issue-pending.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, OnInit, ViewChild } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"kkangs0226"},"content":"import { ACTION_BUTTONS, IssueTablesComponent } from \u0027../../shared/issue-tables/issue-tables.component\u0027;"},{"lineNumber":3,"author":{"gitId":"kkangs0226"},"content":"import { TABLE_COLUMNS } from \u0027../../shared/issue-tables/issue-tables-columns\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { Issue, STATUS } from \u0027../../core/models/issue.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  selector: \u0027app-issue-pending\u0027,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./issue-pending.component.html\u0027,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./issue-pending.component.css\u0027]"},{"lineNumber":10,"author":{"gitId":"-"},"content":"})"},{"lineNumber":11,"author":{"gitId":"-"},"content":"export class IssuePendingComponent implements OnInit {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"  @ViewChild(IssueTablesComponent) table: IssueTablesComponent;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"  readonly displayedColumns \u003d ["},{"lineNumber":16,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.ID,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.TITLE,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.TYPE,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.SEVERITY,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.ACTIONS"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  ];"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  readonly actionButtons: ACTION_BUTTONS[] \u003d ["},{"lineNumber":23,"author":{"gitId":"-"},"content":"    ACTION_BUTTONS.VIEW_IN_WEB,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    ACTION_BUTTONS.RESPOND_TO_ISSUE,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    ACTION_BUTTONS.MARK_AS_RESPONDED,"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    ACTION_BUTTONS.FIX_ISSUE"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  ];"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  filter: (issue: Issue) \u003d\u003e boolean;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"  constructor() { }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":33,"author":{"gitId":"kkangs0226"},"content":"    const hasComment \u003d (issue: Issue) \u003d\u003e !!issue.issueComment;"},{"lineNumber":34,"author":{"gitId":"kkangs0226"},"content":"    const isNotDone \u003d (issue: Issue) \u003d\u003e (!issue.status || issue.status \u003d\u003d\u003d STATUS.Incomplete);"},{"lineNumber":35,"author":{"gitId":"kkangs0226"},"content":"    this.filter \u003d (issue: Issue) \u003d\u003e isNotDone(issue) \u0026\u0026 hasComment(issue);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"  applyFilter(filterValue: string) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    this.table.issues.filter \u003d filterValue;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kkangs0226":5,"-":37}},{"path":"src/app/phase-tester-response/issue-responded/issue-responded.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, OnInit, ViewChild } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"kkangs0226"},"content":"import { ACTION_BUTTONS, IssueTablesComponent } from \u0027../../shared/issue-tables/issue-tables.component\u0027;"},{"lineNumber":3,"author":{"gitId":"kkangs0226"},"content":"import { TABLE_COLUMNS } from \u0027../../shared/issue-tables/issue-tables-columns\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { Issue, STATUS } from \u0027../../core/models/issue.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  selector: \u0027app-issue-responded\u0027,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./issue-responded.component.html\u0027,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./issue-responded.component.css\u0027]"},{"lineNumber":10,"author":{"gitId":"-"},"content":"})"},{"lineNumber":11,"author":{"gitId":"-"},"content":"export class IssueRespondedComponent implements OnInit {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"  @ViewChild(IssueTablesComponent) table: IssueTablesComponent;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  readonly displayedColumns  \u003d ["},{"lineNumber":15,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.ID,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.TITLE,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.TYPE,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.SEVERITY,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    TABLE_COLUMNS.ACTIONS"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  ];"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  readonly actionButtons: ACTION_BUTTONS[] \u003d ["},{"lineNumber":22,"author":{"gitId":"-"},"content":"    ACTION_BUTTONS.VIEW_IN_WEB,"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    ACTION_BUTTONS.MARK_AS_PENDING,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    ACTION_BUTTONS.FIX_ISSUE"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  ];"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  filter: (issue: Issue) \u003d\u003e boolean;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"  constructor() { }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":31,"author":{"gitId":"dingyuchen"},"content":"    const issueIsDone \u003d (issue: Issue) \u003d\u003e issue.status \u003d\u003d\u003d STATUS.Done;"},{"lineNumber":32,"author":{"gitId":"dingyuchen"},"content":"    const issueHasComment \u003d (issue: Issue) \u003d\u003e !!issue.issueComment;"},{"lineNumber":33,"author":{"gitId":"dingyuchen"},"content":"    this.filter \u003d (issue: Issue) \u003d\u003e issueIsDone(issue) \u0026\u0026 issueHasComment(issue);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"  applyFilter(filterValue: string) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    this.table.issues.filter \u003d filterValue;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kkangs0226":2,"dingyuchen":3,"-":35}},{"path":"src/app/shared/comment-editor/comment-editor.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { AbstractControl, FormGroup } from \u0027@angular/forms\u0027;"},{"lineNumber":3,"author":{"gitId":"dingyuchen"},"content":"import {"},{"lineNumber":4,"author":{"gitId":"dingyuchen"},"content":"  FILE_TYPE_SUPPORT_ERROR,"},{"lineNumber":5,"author":{"gitId":"dingyuchen"},"content":"  SUPPORTED_FILE_TYPES,"},{"lineNumber":6,"author":{"gitId":"dingyuchen"},"content":"  UploadService,"},{"lineNumber":7,"author":{"gitId":"dingyuchen"},"content":"  getSizeExceedErrorMsg } from \u0027../../core/services/upload.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../core/services/error-handling.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { HttpErrorResponse } from \u0027@angular/common/http\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { ElectronService } from \u0027../../core/services/electron.service\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"const DISPLAYABLE_CONTENT \u003d [\u0027gif\u0027, \u0027jpeg\u0027, \u0027jpg\u0027, \u0027png\u0027];"},{"lineNumber":13,"author":{"gitId":"dingyuchen"},"content":"const BYTES_PER_MB \u003d 1000000;"},{"lineNumber":14,"author":{"gitId":"dingyuchen"},"content":"const MAX_UPLOAD_SIZE \u003d 10 * BYTES_PER_MB; // 10MB"},{"lineNumber":15,"author":{"gitId":"dingyuchen"},"content":"const MAX_VIDEO_UPLOAD_SIZE \u003d 5 * BYTES_PER_MB; // 5MB"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  selector: \u0027app-comment-editor\u0027,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./comment-editor.component.html\u0027,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./comment-editor.component.css\u0027],"},{"lineNumber":21,"author":{"gitId":"-"},"content":"})"},{"lineNumber":22,"author":{"gitId":"-"},"content":"export class CommentEditorComponent implements OnInit {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  readonly SUPPORTED_FILE_TYPES \u003d SUPPORTED_FILE_TYPES;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"  constructor(private uploadService: UploadService,"},{"lineNumber":26,"author":{"gitId":"-"},"content":"              private errorHandlingService: ErrorHandlingService,"},{"lineNumber":27,"author":{"gitId":"-"},"content":"              private electronService: ElectronService) {}"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"  @Input() commentField: AbstractControl; // Compulsory Input"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  @Input() commentForm: FormGroup; // Compulsory Input"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  @Input() id: string; // Compulsory Input"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"  @Input() initialDescription?: string;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"  // Allows the comment editor to control the overall form\u0027s completeness."},{"lineNumber":36,"author":{"gitId":"-"},"content":"  @Input() isFormPending?: boolean;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  @Output() isFormPendingChange: EventEmitter\u003cboolean\u003e \u003d new EventEmitter\u003cboolean\u003e();"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"  // Allow the comment editor to control the text of the submit button to prompt the user."},{"lineNumber":40,"author":{"gitId":"-"},"content":"  @Input() submitButtonText?: string;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  @Output() submitButtonTextChange: EventEmitter\u003cstring\u003e \u003d new EventEmitter\u003cstring\u003e();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  formatFileUploadingButtonText: (string) \u003d\u003e string \u003d ((currentButtonText: string) \u003d\u003e {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    return currentButtonText + \u0027 (Waiting for File Upload to finish...)\u0027;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  initialSubmitButtonText: string;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  lastUploadingTime: string;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"  @ViewChild(\u0027dropArea\u0027) dropArea;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  @ViewChild(\u0027commentTextArea\u0027) commentTextArea;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  @ViewChild(\u0027markdownArea\u0027) markdownArea;"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"  dragActiveCounter \u003d 0;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  uploadErrorMessage: string;"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    if (this.initialDescription !\u003d\u003d undefined) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      this.commentField.setValue(this.initialDescription);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    if (this.commentField \u003d\u003d\u003d undefined || this.commentForm \u003d\u003d\u003d undefined || this.id \u003d\u003d\u003d undefined) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      throw new Error(\u0027Comment Editor\\\u0027s compulsory properties are not defined.\u0027);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    this.initialSubmitButtonText \u003d this.submitButtonText;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"  onDragEnter(event) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    event.preventDefault();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    this.dragActiveCounter++;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    if (this.commentField.disabled) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      this.dropArea.nativeElement.classList.add(\u0027highlight-drag-box-disabled\u0027);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"      this.dropArea.nativeElement.classList.add(\u0027highlight-drag-box\u0027);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"  // Prevent cursor in textarea from moving when file is dragged over it."},{"lineNumber":80,"author":{"gitId":"-"},"content":"  disableCaretMovement(event) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    event.preventDefault();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"  // To enable file drop in non-input elements, the dragOver event must be cancelled."},{"lineNumber":85,"author":{"gitId":"-"},"content":"  enableFileDrop(event) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    event.preventDefault();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"  onDrop(event) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    event.preventDefault();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    this.removeHighlightBorderStyle();"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    if (this.commentField.disabled) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    const files \u003d event.dataTransfer.files;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    if (files.length \u003e 0) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      this.readAndUploadFile(files[0]);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"      this.commentTextArea.nativeElement.focus();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"  onDragExit(event) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    event.preventDefault();"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    this.removeHighlightBorderStyle();"},{"lineNumber":110,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"  onFileInputUpload(event, fileInput) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    event.preventDefault();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    const files \u003d fileInput.files;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    if (files.length \u003e 0) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"      this.readAndUploadFile(files[0]);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"      fileInput.value \u003d \u0027\u0027;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"  updateParentFormsSubmittability(isFormPending: boolean, submitButtonText: string) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"      this.isFormPendingChange.emit(isFormPending);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"      this.submitButtonTextChange.emit(submitButtonText);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"  readAndUploadFile(file: File): void {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    this.uploadErrorMessage \u003d null;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    const reader \u003d new FileReader();"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    const filename \u003d file.name;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    const insertedText \u003d this.insertUploadingText(filename);"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    if (file.size \u003e\u003d MAX_UPLOAD_SIZE) {"},{"lineNumber":135,"author":{"gitId":"dingyuchen"},"content":"      const uploadSizeLimitMb \u003d MAX_UPLOAD_SIZE / BYTES_PER_MB;"},{"lineNumber":136,"author":{"gitId":"dingyuchen"},"content":"      this.handleUploadError(getSizeExceedErrorMsg(\u0027file\u0027, uploadSizeLimitMb), insertedText);"},{"lineNumber":137,"author":{"gitId":"dingyuchen"},"content":"      return;"},{"lineNumber":138,"author":{"gitId":"dingyuchen"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":140,"author":{"gitId":"dingyuchen"},"content":"    if (this.uploadService.isVideoFile(filename) \u0026\u0026 file.size \u003e\u003d MAX_VIDEO_UPLOAD_SIZE) {"},{"lineNumber":141,"author":{"gitId":"dingyuchen"},"content":"      const videoUploadSizeLimitMb \u003d MAX_VIDEO_UPLOAD_SIZE / BYTES_PER_MB;"},{"lineNumber":142,"author":{"gitId":"dingyuchen"},"content":"      this.handleUploadError(getSizeExceedErrorMsg(\u0027video\u0027, videoUploadSizeLimitMb), insertedText);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"    if (!this.uploadService.isSupportedFileType(filename)) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"      this.handleUploadError(FILE_TYPE_SUPPORT_ERROR, insertedText);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    // Log the most recent upload."},{"lineNumber":152,"author":{"gitId":"-"},"content":"    this.lastUploadingTime \u003d new Date().getTime().toString();"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    const currentFileUploadTime \u003d this.lastUploadingTime;"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    // Prevents Form Submission during Upload"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    this.updateParentFormsSubmittability(true, this.formatFileUploadingButtonText(this.initialSubmitButtonText));"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    reader.onload \u003d () \u003d\u003e {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"      this.uploadService.uploadFile(reader.result, filename).subscribe((response) \u003d\u003e {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        this.insertUploadUrl(filename, response.data.content.download_url);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"      }, (error) \u003d\u003e {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        this.handleUploadError(error, insertedText);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // Allow button enabling if this is the last file that was uploaded."},{"lineNumber":164,"author":{"gitId":"-"},"content":"        if (currentFileUploadTime \u003d\u003d\u003d this.lastUploadingTime) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"          this.updateParentFormsSubmittability(false, this.initialSubmitButtonText);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"-"},"content":"      }, () \u003d\u003e {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // Allow button enabling if this is the last file that was uploaded."},{"lineNumber":169,"author":{"gitId":"-"},"content":"        if (currentFileUploadTime \u003d\u003d\u003d this.lastUploadingTime) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"          this.updateParentFormsSubmittability(false, this.initialSubmitButtonText);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    reader.readAsDataURL(file);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"  onPaste(event) {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    const items \u003d event.clipboardData.items;"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    let blob \u003d null;"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    for (const item of items) {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"      if (item.type.indexOf(\u0027image\u0027) \u003d\u003d\u003d 0) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        blob \u003d item.getAsFile();"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":184,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    if (blob) {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"      this.readAndUploadFile(blob);"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"  get isInErrorState(): boolean {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    return !!this.uploadErrorMessage;"},{"lineNumber":193,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"  private handleUploadError(error, insertedText: string) {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    if (error instanceof HttpErrorResponse) {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"      this.errorHandlingService.handleError(error);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"      this.uploadErrorMessage \u003d \u0027Something went wrong while uploading your file. Please try again.\u0027;"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"      this.uploadErrorMessage \u003d error;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    this.commentField.setValue(this.commentField.value.replace(insertedText, \u0027\u0027));"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"  private insertUploadingText(filename: string): string {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    const originalDescription \u003d this.commentField.value;"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"    const fileType \u003d filename.split(\u0027.\u0027).pop();"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    let toInsert: string;"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    if (DISPLAYABLE_CONTENT.includes(fileType.toLowerCase())) {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"      toInsert \u003d `![Uploading ${filename}...]\\n`;"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"      toInsert \u003d `[Uploading ${filename}...]\\n`;"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"    const cursorPosition \u003d this.commentTextArea.nativeElement.selectionEnd;"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    const endOfLineIndex \u003d originalDescription.indexOf(\u0027\\n\u0027, cursorPosition);"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    const nextCursorPosition \u003d cursorPosition + toInsert.length;"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"    if (endOfLineIndex \u003d\u003d\u003d -1) {"},{"lineNumber":221,"author":{"gitId":"-"},"content":"      if (this.commentField.value \u003d\u003d\u003d \u0027\u0027) {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        this.commentField.setValue(toInsert);"},{"lineNumber":223,"author":{"gitId":"-"},"content":"      } else {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        this.commentField.setValue(`${this.commentField.value}\\n${toInsert}`);"},{"lineNumber":225,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"      const startTillNewline \u003d originalDescription.slice(0, endOfLineIndex + 1);"},{"lineNumber":228,"author":{"gitId":"-"},"content":"      const newlineTillEnd \u003d originalDescription.slice(endOfLineIndex);"},{"lineNumber":229,"author":{"gitId":"-"},"content":"      this.commentField.setValue(`${startTillNewline + toInsert + newlineTillEnd}`);"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"    this.commentTextArea.nativeElement.setSelectionRange(nextCursorPosition, nextCursorPosition);"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    return toInsert;"},{"lineNumber":234,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"  private insertUploadUrl(filename: string, uploadUrl: string) {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    const cursorPosition \u003d this.commentTextArea.nativeElement.selectionEnd;"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    const startIndexOfString \u003d this.commentField.value.indexOf(`[Uploading ${filename}...]`);"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    const endIndexOfString \u003d startIndexOfString + `[Uploading ${filename}...]`.length;"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    const endOfInsertedString \u003d startIndexOfString + `[${filename}](${uploadUrl})`.length;"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"    this.commentField.setValue("},{"lineNumber":243,"author":{"gitId":"-"},"content":"      this.commentField.value.replace(`[Uploading ${filename}...]`, `[${filename}](${uploadUrl})`));"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"    if (cursorPosition \u003e startIndexOfString - 1 \u0026\u0026 cursorPosition \u003c\u003d endIndexOfString) { // within the range of uploading text"},{"lineNumber":246,"author":{"gitId":"-"},"content":"      this.commentTextArea.nativeElement.setSelectionRange(endOfInsertedString, endOfInsertedString);"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":248,"author":{"gitId":"-"},"content":"      this.commentTextArea.nativeElement.setSelectionRange(cursorPosition, cursorPosition);"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"  private removeHighlightBorderStyle() {"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    this.dragActiveCounter--;"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    if (this.dragActiveCounter \u003d\u003d\u003d 0) { // To make sure when dragging over a child element, drop area is still highlight."},{"lineNumber":255,"author":{"gitId":"-"},"content":"      this.dropArea.nativeElement.classList.remove(\u0027highlight-drag-box\u0027);"},{"lineNumber":256,"author":{"gitId":"-"},"content":"      this.dropArea.nativeElement.classList.remove(\u0027highlight-drag-box-disabled\u0027);"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":259,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dingyuchen":16,"-":243}},{"path":"src/app/shared/issue-tables/IssuesDataTable.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { BehaviorSubject, merge, Observable, Subscription } from \u0027rxjs\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { DataSource } from \u0027@angular/cdk/table\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../core/services/issue.service\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { Issue, ISSUE_TYPE_ORDER, SEVERITY_ORDER } from \u0027../../core/models/issue.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { MatPaginator, MatSort } from \u0027@angular/material\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { delay, flatMap, map, startWith, tap } from \u0027rxjs/operators\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../core/services/error-handling.service\u0027;"},{"lineNumber":8,"author":{"gitId":"seanlowjk"},"content":"import { getSortedData } from \u0027./issue-sorter\u0027;"},{"lineNumber":9,"author":{"gitId":"kkangs0226"},"content":"import { applySearchFilter } from \u0027./search-filter\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"export class IssuesDataTable extends DataSource\u003cIssue\u003e {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  private filterChange \u003d new BehaviorSubject(\u0027\u0027);"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  private teamFilterChange \u003d new BehaviorSubject(\u0027\u0027);"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  private issuesSubject \u003d new BehaviorSubject\u003cIssue[]\u003e([]);"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  private issueSubscription: Subscription;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"  public isLoading$ \u003d this.issueService.isLoading.asObservable();"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"  constructor(private issueService: IssueService, private errorHandlingService: ErrorHandlingService, private sort: MatSort,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"              private paginator: MatPaginator, private displayedColumn: string[],"},{"lineNumber":21,"author":{"gitId":"-"},"content":"              private defaultFilter?: (issue: Issue) \u003d\u003e boolean) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    super();"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"  connect(): Observable\u003cIssue[]\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    return this.issuesSubject.asObservable();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"  disconnect() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    this.filterChange.complete();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    this.teamFilterChange.complete();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    this.issuesSubject.complete();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    this.issueSubscription.unsubscribe();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    this.issueService.stopPollIssues();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"  loadIssues() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    const displayDataChanges \u003d ["},{"lineNumber":39,"author":{"gitId":"-"},"content":"      this.issueService.issues$,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      this.paginator.page,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      this.sort.sortChange,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      this.filterChange,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      this.teamFilterChange,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    ];"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    this.issueService.startPollIssues();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    this.issueSubscription \u003d this.issueService.issues$.pipe("},{"lineNumber":48,"author":{"gitId":"-"},"content":"      flatMap(() \u003d\u003e {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return merge(...displayDataChanges).pipe("},{"lineNumber":50,"author":{"gitId":"-"},"content":"          map(() \u003d\u003e {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            let data \u003d \u003cIssue[]\u003eObject.values(this.issueService.issues$.getValue()).reverse();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            if (this.defaultFilter) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"              data \u003d data.filter(this.defaultFilter);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"seanlowjk"},"content":"            data \u003d getSortedData(this.sort, data);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            data \u003d this.getFilteredTeamData(data);"},{"lineNumber":57,"author":{"gitId":"kkangs0226"},"content":"            data \u003d applySearchFilter(this.filter, this.displayedColumn, this.issueService, data);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            data \u003d this.getPaginatedData(data);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return data;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"          })"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":63,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    ).subscribe((issues) \u003d\u003e {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      this.issuesSubject.next(issues);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"  get filter(): string {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    return this.filterChange.value;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"  set filter(filter: string) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    this.filterChange.next(filter);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"  get teamFilter(): string {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    return this.teamFilterChange.value;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"  set teamFilter(teamFilter: string) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    this.teamFilterChange.next(teamFilter);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    this.issueService.setIssueTeamFilter(this.teamFilterChange.value);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"  private getFilteredTeamData(data: Issue[]): Issue[] {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    return data.filter((issue) \u003d\u003e {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"      if (!this.teamFilter || this.teamFilter \u003d\u003d\u003d \u0027All Teams\u0027) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"      return issue.teamAssigned.id \u003d\u003d\u003d this.teamFilter;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"  private getPaginatedData(data: Issue[]): Issue[] {"},{"lineNumber":97,"author":{"gitId":"kkangs0226"},"content":"    this.paginator.length \u003d data.length;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    let startIndex \u003d this.paginator.pageIndex * this.paginator.pageSize;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    const result \u003d data.splice(startIndex, this.paginator.pageSize);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    if (result.length \u003d\u003d\u003d 0) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"      this.paginator.pageIndex -\u003d 1;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"      startIndex \u003d this.paginator.pageIndex * this.paginator.pageSize;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"      return data.splice(startIndex, this.paginator.pageSize);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    return result;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kkangs0226":3,"seanlowjk":2,"-":102}},{"path":"src/app/shared/issue-tables/issue-sorter.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"seanlowjk"},"content":"import { Issue, ISSUE_TYPE_ORDER, SEVERITY_ORDER } from \u0027../../core/models/issue.model\u0027;"},{"lineNumber":2,"author":{"gitId":"seanlowjk"},"content":"import { MatSort } from \u0027@angular/material\u0027;"},{"lineNumber":3,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":4,"author":{"gitId":"seanlowjk"},"content":"export function getSortedData(sort: MatSort, data: Issue[]): Issue[] {"},{"lineNumber":5,"author":{"gitId":"seanlowjk"},"content":"  if (!sort.active) {"},{"lineNumber":6,"author":{"gitId":"seanlowjk"},"content":"      return data;"},{"lineNumber":7,"author":{"gitId":"seanlowjk"},"content":"  }"},{"lineNumber":8,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":9,"author":{"gitId":"seanlowjk"},"content":"  const direction: number \u003d (sort.direction \u003d\u003d\u003d \u0027asc\u0027 ? 1 : -1);"},{"lineNumber":10,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":11,"author":{"gitId":"seanlowjk"},"content":"  return data.sort((a, b) \u003d\u003e {"},{"lineNumber":12,"author":{"gitId":"seanlowjk"},"content":"    switch (sort.active) {"},{"lineNumber":13,"author":{"gitId":"seanlowjk"},"content":"      case \u0027type\u0027:"},{"lineNumber":14,"author":{"gitId":"seanlowjk"},"content":"        return direction * compareByIssueType(a.type, b.type);"},{"lineNumber":15,"author":{"gitId":"seanlowjk"},"content":"      case \u0027severity\u0027:"},{"lineNumber":16,"author":{"gitId":"seanlowjk"},"content":"        return direction * compareBySeverity(a.severity, b.severity);"},{"lineNumber":17,"author":{"gitId":"seanlowjk"},"content":"      case \u0027assignees\u0027:"},{"lineNumber":18,"author":{"gitId":"seanlowjk"},"content":"        return direction * compareByStringValue(a.assignees.join(\u0027, \u0027), b.assignees.join(\u0027, \u0027));"},{"lineNumber":19,"author":{"gitId":"seanlowjk"},"content":"      case \u0027teamAssigned\u0027:"},{"lineNumber":20,"author":{"gitId":"seanlowjk"},"content":"        return direction * compareByStringValue(a.teamAssigned.id, b.teamAssigned.id);"},{"lineNumber":21,"author":{"gitId":"seanlowjk"},"content":"      case \u0027Todo Remaining\u0027:"},{"lineNumber":22,"author":{"gitId":"seanlowjk"},"content":"        return -direction * compareByIntegerValue(a.numOfUnresolvedDisputes(), b.numOfUnresolvedDisputes());"},{"lineNumber":23,"author":{"gitId":"seanlowjk"},"content":"      case \u0027id\u0027:"},{"lineNumber":24,"author":{"gitId":"seanlowjk"},"content":"        return direction * compareByIntegerValue(a.id, b.id);"},{"lineNumber":25,"author":{"gitId":"seanlowjk"},"content":"      default: // title, responseTag are string values"},{"lineNumber":26,"author":{"gitId":"seanlowjk"},"content":"        return direction * compareByStringValue(a[sort.active], b[sort.active]);"},{"lineNumber":27,"author":{"gitId":"seanlowjk"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"seanlowjk"},"content":"  });"},{"lineNumber":29,"author":{"gitId":"seanlowjk"},"content":"}"},{"lineNumber":30,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":31,"author":{"gitId":"seanlowjk"},"content":"function compareBySeverity(severityA: string, severityB: string): number {"},{"lineNumber":32,"author":{"gitId":"seanlowjk"},"content":"  const orderA \u003d SEVERITY_ORDER[severityA];"},{"lineNumber":33,"author":{"gitId":"seanlowjk"},"content":"  const orderB \u003d SEVERITY_ORDER[severityB];"},{"lineNumber":34,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":35,"author":{"gitId":"seanlowjk"},"content":"  return compareByIntegerValue(orderA, orderB);"},{"lineNumber":36,"author":{"gitId":"seanlowjk"},"content":"}"},{"lineNumber":37,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":38,"author":{"gitId":"seanlowjk"},"content":"function compareByIssueType(issueTypeA: string, issueTypeB: string): number {"},{"lineNumber":39,"author":{"gitId":"seanlowjk"},"content":"  const orderA \u003d ISSUE_TYPE_ORDER[issueTypeA];"},{"lineNumber":40,"author":{"gitId":"seanlowjk"},"content":"  const orderB \u003d ISSUE_TYPE_ORDER[issueTypeB];"},{"lineNumber":41,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":42,"author":{"gitId":"seanlowjk"},"content":"  return compareByIntegerValue(orderA, orderB);"},{"lineNumber":43,"author":{"gitId":"seanlowjk"},"content":"}"},{"lineNumber":44,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":45,"author":{"gitId":"seanlowjk"},"content":"function compareByStringValue(valueA: string, valueB: string): number {"},{"lineNumber":46,"author":{"gitId":"seanlowjk"},"content":"  const orderA \u003d String(valueA || \u0027\u0027).toUpperCase();"},{"lineNumber":47,"author":{"gitId":"seanlowjk"},"content":"  const orderB \u003d String(valueB || \u0027\u0027).toUpperCase();"},{"lineNumber":48,"author":{"gitId":"seanlowjk"},"content":"  return (orderA \u003c orderB ? -1 : 1);"},{"lineNumber":49,"author":{"gitId":"seanlowjk"},"content":"}"},{"lineNumber":50,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":51,"author":{"gitId":"seanlowjk"},"content":"function compareByIntegerValue(valueA: number, valueB: number): number {"},{"lineNumber":52,"author":{"gitId":"seanlowjk"},"content":"  return (valueA \u003c valueB ? -1 : 1);"},{"lineNumber":53,"author":{"gitId":"seanlowjk"},"content":"}"}],"authorContributionMap":{"seanlowjk":53}},{"path":"src/app/shared/issue-tables/issue-tables-columns.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"kkangs0226"},"content":"export enum TABLE_COLUMNS {"},{"lineNumber":2,"author":{"gitId":"kkangs0226"},"content":"    ID \u003d \u0027id\u0027,"},{"lineNumber":3,"author":{"gitId":"kkangs0226"},"content":"    TITLE \u003d \u0027title\u0027,"},{"lineNumber":4,"author":{"gitId":"kkangs0226"},"content":"    TEAM_ASSIGNED \u003d \u0027teamAssigned\u0027,"},{"lineNumber":5,"author":{"gitId":"kkangs0226"},"content":"    TYPE \u003d \u0027type\u0027,"},{"lineNumber":6,"author":{"gitId":"kkangs0226"},"content":"    SEVERITY \u003d \u0027severity\u0027,"},{"lineNumber":7,"author":{"gitId":"kkangs0226"},"content":"    RESPONSE \u003d \u0027responseTag\u0027,"},{"lineNumber":8,"author":{"gitId":"kkangs0226"},"content":"    ASSIGNEE \u003d \u0027assignees\u0027,"},{"lineNumber":9,"author":{"gitId":"kkangs0226"},"content":"    DUPLICATED_ISSUES \u003d \u0027duplicatedIssues\u0027,"},{"lineNumber":10,"author":{"gitId":"kkangs0226"},"content":"    TODO \u003d \u0027Todo Remaining\u0027,"},{"lineNumber":11,"author":{"gitId":"kkangs0226"},"content":"    ACTIONS \u003d \u0027actions\u0027"},{"lineNumber":12,"author":{"gitId":"kkangs0226"},"content":"  }"}],"authorContributionMap":{"kkangs0226":12}},{"path":"src/app/shared/issue-tables/issue-tables.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { AfterViewInit, Component, Input, OnInit, ViewChild } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { Issue, STATUS } from \u0027../../core/models/issue.model\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { PermissionService } from \u0027../../core/services/permission.service\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { LabelService } from \u0027../../core/services/label.service\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../../core/services/user.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027../../core/services/github.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../core/services/issue.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../core/services/error-handling.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { finalize } from \u0027rxjs/operators\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { IssuesDataTable } from \u0027./IssuesDataTable\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { MatPaginator, MatSort } from \u0027@angular/material\u0027;"},{"lineNumber":12,"author":{"gitId":"dingyuchen"},"content":"import { PhaseService } from \u0027../../core/services/phase.service\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"export enum ACTION_BUTTONS {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  VIEW_IN_WEB,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  MARK_AS_RESPONDED,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  MARK_AS_PENDING,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  RESPOND_TO_ISSUE,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  FIX_ISSUE,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  DELETE_ISSUE"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  selector: \u0027app-issue-tables\u0027,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./issue-tables.component.html\u0027,"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./issue-tables.component.css\u0027]"},{"lineNumber":27,"author":{"gitId":"-"},"content":"})"},{"lineNumber":28,"author":{"gitId":"-"},"content":"export class IssueTablesComponent implements OnInit, AfterViewInit {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"  @Input() headers: string[];"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  @Input() actions: ACTION_BUTTONS[];"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  @Input() filters?: any \u003d undefined;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"  @ViewChild(MatSort) sort: MatSort;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  @ViewChild(MatPaginator) paginator: MatPaginator;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"  issues: IssuesDataTable;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  issuesPendingDeletion: {[id: number]: boolean};"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  private readonly action_buttons \u003d ACTION_BUTTONS;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"  constructor(public userService: UserService,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"              private permissions: PermissionService,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"              private labelService: LabelService,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"              private githubService: GithubService,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"              private issueService: IssueService,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"              private phaseService: PhaseService,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"              private errorHandlingService: ErrorHandlingService) { }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    this.issues \u003d new IssuesDataTable(this.issueService, this.errorHandlingService, this.sort,"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      this.paginator, this.headers, this.filters);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    this.issuesPendingDeletion \u003d {};"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"  ngAfterViewInit(): void {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    setTimeout(() \u003d\u003e {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      this.issues.loadIssues();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"   * Formats the title text to account for those that contain long words."},{"lineNumber":63,"author":{"gitId":"-"},"content":"   * @param title - Title of Issue that is to be displayed in the Table Row."},{"lineNumber":64,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  fitTitleText(title: string): string {"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    // Arbitrary Length of Characters beyond which an overflow occurs."},{"lineNumber":68,"author":{"gitId":"-"},"content":"    const MAX_WORD_LENGTH \u003d 43;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    const SPLITTER_TEXT \u003d \u0027 \u0027;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    const ELLIPSES \u003d \u0027...\u0027;"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    return title.split(SPLITTER_TEXT).map(word \u003d\u003e {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      if (word.length \u003e MAX_WORD_LENGTH) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return word.substring(0, MAX_WORD_LENGTH - 5).concat(ELLIPSES);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      return word;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }).join(SPLITTER_TEXT);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"  isActionVisible(action: ACTION_BUTTONS): boolean {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    return this.actions.includes(action);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"  markAsResponded(issue: Issue) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    const newIssue \u003d issue.clone(this.phaseService.currentPhase);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    newIssue.status \u003d STATUS.Done;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    this.issueService.updateIssue(newIssue).subscribe((updatedIssue) \u003d\u003e {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"      this.issueService.updateLocalStore(updatedIssue);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }, error \u003d\u003e {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"      this.errorHandlingService.handleError(error);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"  isResponseEditable() {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    return this.permissions.isTeamResponseEditable() || this.permissions.isTesterResponseEditable();"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"  markAsPending(issue: Issue) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    const newIssue \u003d issue.clone(this.phaseService.currentPhase);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    newIssue.status \u003d STATUS.Incomplete;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    this.issueService.updateIssue(newIssue).subscribe((updatedIssue) \u003d\u003e {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"      this.issueService.updateLocalStore(updatedIssue);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }, error \u003d\u003e {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"      this.errorHandlingService.handleError(error);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   * Gets the number of resolved disputes."},{"lineNumber":112,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":113,"author":{"gitId":"-"},"content":"  todoFinished(issue: Issue): number {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    return issue.issueDisputes.length - issue.numOfUnresolvedDisputes();"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":118,"author":{"gitId":"-"},"content":"   * Checks if all the disputes are resolved."},{"lineNumber":119,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  isTodoListChecked(issue: Issue): boolean {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    return issue.issueDisputes \u0026\u0026 issue.numOfUnresolvedDisputes() \u003d\u003d\u003d 0;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"  deleteIssue(id: number) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    this.issuesPendingDeletion \u003d {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"      ...this.issuesPendingDeletion,"},{"lineNumber":127,"author":{"gitId":"-"},"content":"      [id]: true,"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    this.issueService.deleteIssue(id).pipe(finalize(() \u003d\u003e {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"      const { [id]: issueRemoved, ...theRest } \u003d this.issuesPendingDeletion;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      this.issuesPendingDeletion \u003d theRest;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    })).subscribe((removedIssue) \u003d\u003e {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }, (error) \u003d\u003e {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      this.errorHandlingService.handleError(error);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":137,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":138,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dingyuchen":1,"-":137}},{"path":"src/app/shared/issue-tables/search-filter.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"kkangs0226"},"content":"import { IssueService } from \u0027../../core/services/issue.service\u0027;"},{"lineNumber":2,"author":{"gitId":"kkangs0226"},"content":"import { Issue } from \u0027../../core/models/issue.model\u0027;"},{"lineNumber":3,"author":{"gitId":"kkangs0226"},"content":"import { TABLE_COLUMNS } from \u0027./issue-tables-columns\u0027;"},{"lineNumber":4,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":5,"author":{"gitId":"kkangs0226"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"kkangs0226"},"content":" * This module serves to improve separation of concerns in IssuesDataTable.ts module by containing the logic for"},{"lineNumber":7,"author":{"gitId":"kkangs0226"},"content":" * applying search filter to the issues data table in this module."},{"lineNumber":8,"author":{"gitId":"kkangs0226"},"content":" * This module exports a single function applySearchFilter which is called by IssuesDataTable."},{"lineNumber":9,"author":{"gitId":"kkangs0226"},"content":" */"},{"lineNumber":10,"author":{"gitId":"kkangs0226"},"content":"export function applySearchFilter(filter: string, displayedColumn: string[], issueService: IssueService, data: Issue[]): Issue[] {"},{"lineNumber":11,"author":{"gitId":"kkangs0226"},"content":"    const searchKey \u003d filter.toLowerCase();"},{"lineNumber":12,"author":{"gitId":"kkangs0226"},"content":"    const result \u003d data.slice().filter((issue: Issue) \u003d\u003e {"},{"lineNumber":13,"author":{"gitId":"kkangs0226"},"content":"      for (const column of displayedColumn) {"},{"lineNumber":14,"author":{"gitId":"kkangs0226"},"content":"        switch (column) {"},{"lineNumber":15,"author":{"gitId":"kkangs0226"},"content":"          case TABLE_COLUMNS.ASSIGNEE:"},{"lineNumber":16,"author":{"gitId":"kkangs0226"},"content":"            if (matchesAssignee(issue.assignees, searchKey)) {"},{"lineNumber":17,"author":{"gitId":"kkangs0226"},"content":"              return true;"},{"lineNumber":18,"author":{"gitId":"kkangs0226"},"content":"            }"},{"lineNumber":19,"author":{"gitId":"kkangs0226"},"content":"            break;"},{"lineNumber":20,"author":{"gitId":"kkangs0226"},"content":"          case TABLE_COLUMNS.DUPLICATED_ISSUES:"},{"lineNumber":21,"author":{"gitId":"kkangs0226"},"content":"            if (matchesDuplicatedIssue(issueService, issue.id, searchKey)) {"},{"lineNumber":22,"author":{"gitId":"kkangs0226"},"content":"              return true;"},{"lineNumber":23,"author":{"gitId":"kkangs0226"},"content":"            }"},{"lineNumber":24,"author":{"gitId":"kkangs0226"},"content":"            break;"},{"lineNumber":25,"author":{"gitId":"kkangs0226"},"content":"          default:"},{"lineNumber":26,"author":{"gitId":"kkangs0226"},"content":"            if (matchesOtherColumns(issue, column, searchKey)) {"},{"lineNumber":27,"author":{"gitId":"kkangs0226"},"content":"              return true;"},{"lineNumber":28,"author":{"gitId":"kkangs0226"},"content":"            }"},{"lineNumber":29,"author":{"gitId":"kkangs0226"},"content":"            break;"},{"lineNumber":30,"author":{"gitId":"kkangs0226"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"kkangs0226"},"content":"      }"},{"lineNumber":32,"author":{"gitId":"kkangs0226"},"content":"      return false;"},{"lineNumber":33,"author":{"gitId":"kkangs0226"},"content":"    });"},{"lineNumber":34,"author":{"gitId":"kkangs0226"},"content":"    return result;"},{"lineNumber":35,"author":{"gitId":"kkangs0226"},"content":"}"},{"lineNumber":36,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":37,"author":{"gitId":"kkangs0226"},"content":"function containsSearchKey(item: string, searchKey: string): boolean {"},{"lineNumber":38,"author":{"gitId":"kkangs0226"},"content":"  return item.indexOf(searchKey) !\u003d\u003d -1;"},{"lineNumber":39,"author":{"gitId":"kkangs0226"},"content":"}"},{"lineNumber":40,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":41,"author":{"gitId":"kkangs0226"},"content":"function duplicatedIssuesContainsSearchKey(duplicatedIssues: Issue[], searchKey: string): boolean {"},{"lineNumber":42,"author":{"gitId":"kkangs0226"},"content":"  return duplicatedIssues.filter(el \u003d\u003e `#${String(el.id)}`.includes(searchKey)).length !\u003d\u003d 0;"},{"lineNumber":43,"author":{"gitId":"kkangs0226"},"content":"}"},{"lineNumber":44,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":45,"author":{"gitId":"kkangs0226"},"content":"function matchesAssignee(assignees: string[], searchKey: string): boolean {"},{"lineNumber":46,"author":{"gitId":"kkangs0226"},"content":"  for (const assignee of assignees) {"},{"lineNumber":47,"author":{"gitId":"kkangs0226"},"content":"    const lowerCaseAssignee \u003d assignee.toLowerCase();"},{"lineNumber":48,"author":{"gitId":"kkangs0226"},"content":"    return containsSearchKey(lowerCaseAssignee, searchKey);"},{"lineNumber":49,"author":{"gitId":"kkangs0226"},"content":"  }"},{"lineNumber":50,"author":{"gitId":"kkangs0226"},"content":"}"},{"lineNumber":51,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":52,"author":{"gitId":"kkangs0226"},"content":"function matchesDuplicatedIssue(issueService: IssueService, id: number, searchKey: string): boolean {"},{"lineNumber":53,"author":{"gitId":"kkangs0226"},"content":"  const duplicatedIssues \u003d issueService.issues$.getValue().filter(el \u003d\u003e el.duplicateOf \u003d\u003d\u003d id);"},{"lineNumber":54,"author":{"gitId":"kkangs0226"},"content":"  return duplicatedIssuesContainsSearchKey(duplicatedIssues, searchKey);"},{"lineNumber":55,"author":{"gitId":"kkangs0226"},"content":"}"},{"lineNumber":56,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":57,"author":{"gitId":"kkangs0226"},"content":"function matchesOtherColumns(issue: Issue, column: string, searchKey: string): boolean {"},{"lineNumber":58,"author":{"gitId":"kkangs0226"},"content":"  const searchStr \u003d String(issue[column]).toLowerCase();"},{"lineNumber":59,"author":{"gitId":"kkangs0226"},"content":"  return containsSearchKey(searchStr, searchKey);"},{"lineNumber":60,"author":{"gitId":"kkangs0226"},"content":"}"}],"authorContributionMap":{"kkangs0226":60}},{"path":"src/app/shared/layout/header.component.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003cmat-toolbar color\u003d\"primary\" style\u003d\"position: sticky; position: -webkit-sticky; top: 0; z-index: 1000;\"\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \u003cbutton *ngIf\u003d\"isBackButtonShown()\" mat-icon-button class\u003d\"mat-toolbar mat-primary\" style\u003d\"transform: scale(0.9)\" (click)\u003d\"goBack()\"\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \u003cmat-icon\u003earrow_back_ios\u003c/mat-icon\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  \u003c/button\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  \u003ca class\u003d\"mat-toolbar mat-primary\" style\u003d\"text-decoration: none\" [routerLink]\u003d\"phaseService.currentPhase\"\u003eCATcher\u003c/a\u003e"},{"lineNumber":6,"author":{"gitId":"ptvrajsk"},"content":"  \u003cspan id\u003d\"phase-descriptor\" *ngIf\u003d\"auth.isAuthenticated()\" style\u003d\"margin-left: 10px\"\u003e"},{"lineNumber":7,"author":{"gitId":"ptvrajsk"},"content":"    ({{this.getPhaseDescription(phaseService.currentPhase)}})"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  \u003c/span\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"  \u003cdiv *ngIf\u003d\"auth.isAuthenticated() \u0026\u0026 this.phaseService.sessionData.openPhases.length \u003e 1\"\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \u003cbutton mat-button [matMenuTriggerFor]\u003d\"menu\"\u003e\u003cmat-icon style\u003d\"color: white;\"\u003eexpand_more\u003c/mat-icon\u003e\u003c/button\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \u003cmat-menu #menu\u003d\"matMenu\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"      \u003cbutton mat-menu-item *ngFor\u003d\"let openPhase of this.phaseService.sessionData.openPhases\""},{"lineNumber":14,"author":{"gitId":"-"},"content":"       (click)\u003d\"this.routeToSelectedPhase(openPhase)\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        \u003cspan\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"          \u003cmat-icon [ngStyle]\u003d\"{color: \u0027green\u0027,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            visibility: this.phaseService.currentPhase \u003d\u003d\u003d openPhase ? \u0027visible\u0027 : \u0027hidden\u0027}\"\u003edone\u003c/mat-icon\u003e"},{"lineNumber":18,"author":{"gitId":"ptvrajsk"},"content":"          {{this.getPhaseDescription(openPhase)}}"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003c/span\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/button\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \u003c/mat-menu\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"  \u003cspan style\u003d\"flex: 1 1 auto\"\u003e\u003c/span\u003e"},{"lineNumber":25,"author":{"gitId":"ptvrajsk"},"content":"  \u003cbutton *ngIf\u003d\"auth.isAuthenticated()\" mat-button matTooltip\u003d\"Download CATcher Log\" (click)\u003d\"this.loggingService.exportLogFile()\"\u003e"},{"lineNumber":26,"author":{"gitId":"ptvrajsk"},"content":"    Download Log"},{"lineNumber":27,"author":{"gitId":"ptvrajsk"},"content":"    \u003cmat-icon\u003ereceipt\u003c/mat-icon\u003e"},{"lineNumber":28,"author":{"gitId":"ptvrajsk"},"content":"  \u003c/button\u003e"},{"lineNumber":29,"author":{"gitId":"kkangs0226"},"content":"  \u003cbutton *ngIf\u003d\"auth.isAuthenticated() \u0026\u0026 isOpenUrlButtonShown()\" mat-button matTooltip\u003d\"View current page on GitHub\" (click)\u003d\"viewBrowser()\"\u003e"},{"lineNumber":30,"author":{"gitId":"kkangs0226"},"content":"    View on GitHub"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    \u003cmat-icon\u003elink\u003c/mat-icon\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  \u003c/button\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  \u003cbutton *ngIf\u003d\"auth.isAuthenticated() \u0026\u0026 isReloadButtonShown() \u0026\u0026 !this.isReloadButtonDisabled\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    mat-button matTooltip\u003d\"Synchronize with Github data\" (click)\u003d\"reload()\"\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    Sync"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \u003cmat-icon\u003erefresh\u003c/mat-icon\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  \u003c/button\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"sync-spinner\" *ngIf\u003d\"auth.isAuthenticated() \u0026\u0026 isReloadButtonShown() \u0026\u0026 this.isReloadButtonDisabled\"\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    \u003cspan style\u003d\"font-size: 14px; margin-right: 7px;\"\u003eSync\u003c/span\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \u003cmat-spinner class\u003d\"white-spinner\" [diameter]\u003d\"20\"\u003e\u003c/mat-spinner\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"  \u003cbutton *ngIf\u003d\"auth.isAuthenticated()\" mat-button matTooltip\u003d\"Log out\" (click)\u003d\"logOut()\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    ({{userService.currentUser.loginId}})"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    \u003cmat-icon style\u003d\"margin-left: 2px\"\u003eexit_to_app\u003c/mat-icon\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  \u003c/button\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"\u003c/mat-toolbar\u003e"}],"authorContributionMap":{"kkangs0226":2,"ptvrajsk":7,"-":38}},{"path":"src/app/shared/layout/header.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, OnInit } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { Location } from \u0027@angular/common\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { AuthService } from \u0027../../core/services/auth.service\u0027;"},{"lineNumber":4,"author":{"gitId":"dingyuchen"},"content":"import { PhaseService, PhaseDescription } from \u0027../../core/services/phase.service\u0027;"},{"lineNumber":5,"author":{"gitId":"dingyuchen"},"content":"import { Phase } from \u0027../../core/models/phase.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../../core/services/user.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { Router, RoutesRecognized } from \u0027@angular/router\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { filter, pairwise } from \u0027rxjs/operators\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { GithubEventService } from \u0027../../core/services/githubevent.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../core/services/error-handling.service\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../core/services/issue.service\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027../../core/services/github.service\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { UserRole } from \u0027../../core/models/user.model\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { ElectronService } from \u0027../../core/services/electron.service\u0027;"},{"lineNumber":15,"author":{"gitId":"ptvrajsk"},"content":"import { LoggingService } from \u0027../../core/services/logging.service\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  selector: \u0027app-layout-header\u0027,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./header.component.html\u0027"},{"lineNumber":20,"author":{"gitId":"-"},"content":"})"},{"lineNumber":21,"author":{"gitId":"-"},"content":"export class HeaderComponent implements OnInit {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  private prevUrl;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  isReloadButtonDisabled \u003d false;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  ISSUE_FILTER \u003d \u0027/issues?q\u003dis:issue+is:open\u0027; // the filtered list must be an issue and must be open"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  TUTORIAL_LABEL \u003d \u0027+label:tutorial.\u0027;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  TEAM_LABEL \u003d \u0027+label:team.\u0027;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  EXCLUDE_DUPLICATE \u003d \u0027+-label:duplicate\u0027; // exclude duplicate issues"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"  constructor(private router: Router,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"              public auth: AuthService,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"              public phaseService: PhaseService,"},{"lineNumber":32,"author":{"gitId":"-"},"content":"              public userService: UserService,"},{"lineNumber":33,"author":{"gitId":"ptvrajsk"},"content":"              private loggingService: LoggingService,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"              private location: Location,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"              private githubEventService: GithubEventService,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"              private issueService: IssueService,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"              private errorHandlingService: ErrorHandlingService,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"              private githubService: GithubService,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"              private electronService: ElectronService) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    router.events.pipe("},{"lineNumber":41,"author":{"gitId":"-"},"content":"      filter((e: any) \u003d\u003e e instanceof RoutesRecognized),"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      pairwise()"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    ).subscribe(e \u003d\u003e {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      this.prevUrl \u003d e[0].urlAfterRedirects;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"  ngOnInit() {}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   * Replaces and resets the current phase data and routes the app to the"},{"lineNumber":52,"author":{"gitId":"-"},"content":"   * newly selected phase."},{"lineNumber":53,"author":{"gitId":"-"},"content":"   * @param openPhase - Open Phase that is selected by the user."},{"lineNumber":54,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  routeToSelectedPhase(openPhase: string): void {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    // Do nothing if the selected phase is the current phase."},{"lineNumber":57,"author":{"gitId":"-"},"content":"    if (this.phaseService.currentPhase \u003d\u003d\u003d Phase[openPhase]) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    // Replace Current Phase Data."},{"lineNumber":61,"author":{"gitId":"-"},"content":"    this.phaseService.currentPhase \u003d Phase[openPhase];"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    this.githubService.storePhaseDetails(this.phaseService.getPhaseOwner(this.phaseService.currentPhase),"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        this.phaseService.sessionData[openPhase]);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    // Remove current phase issues and load selected phase issues."},{"lineNumber":66,"author":{"gitId":"-"},"content":"    this.githubService.reset();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    this.issueService.reset();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    this.reload();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    // Route app to new phase."},{"lineNumber":71,"author":{"gitId":"-"},"content":"    this.router.navigateByUrl(this.phaseService.currentPhase);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"  isBackButtonShown(): boolean {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    return `/${this.phaseService.currentPhase}` !\u003d\u003d this.router.url \u0026\u0026 this.router.url !\u003d\u003d \u0027/\u0027 \u0026\u0026 !this.router.url.startsWith(\u0027/?code\u0027);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"  isReloadButtonShown(): boolean {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    return this.router.url !\u003d\u003d \u0027/phaseBugReporting/issues/new\u0027;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"  isOpenUrlButtonShown(): boolean {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    return this.phaseService.currentPhase \u003d\u003d\u003d Phase.phaseBugReporting ||"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    this.userService.currentUser.role \u003d\u003d\u003d UserRole.Student ||"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    (this.issueService.getIssueTeamFilter() !\u003d\u003d \u0027All Teams\u0027 || this.router.url.includes(\u0027/issues\u0027));"},{"lineNumber":86,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"ptvrajsk"},"content":"  getPhaseDescription(openPhase: string): string {"},{"lineNumber":89,"author":{"gitId":"ptvrajsk"},"content":"    return PhaseDescription[openPhase];"},{"lineNumber":90,"author":{"gitId":"ptvrajsk"},"content":"  }"},{"lineNumber":91,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"  goBack() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    if (this.prevUrl \u003d\u003d\u003d `/${this.phaseService.currentPhase}/issues/new`) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"      this.router.navigate([\u0027/phaseBugReporting\u0027]);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"      this.location.back();"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"  viewBrowser() {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    const routerUrl \u003d this.router.url.substring(1); // remove the first \u0027/\u0027 from string"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    const issueUrlIndex \u003d routerUrl.indexOf(\u0027/\u0027); // find the index of second \u0027/\u0027"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    let issueUrl: string;"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    // If can\u0027t find the index of second \u0027/\u0027, then router is at the /issues (table list) page"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    if (issueUrlIndex \u003c 0) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"      // Apply filters to the issueUrl"},{"lineNumber":108,"author":{"gitId":"-"},"content":"      issueUrl \u003d this.ISSUE_FILTER.concat(this.getTeamFilterString());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"      // issueUrl will be from the second \u0027/\u0027"},{"lineNumber":111,"author":{"gitId":"-"},"content":"      issueUrl \u003d routerUrl.substring(issueUrlIndex);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    // Open the url in user\u0027s preferred browser"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    this.electronService.openLink(\u0027https://github.com/\u0027.concat(this.githubService.getRepoURL()).concat(issueUrl));"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"  private getTeamFilterString() {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    // First Phase does not need team filtering"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    if (this.phaseService.currentPhase \u003d\u003d\u003d Phase.phaseBugReporting || this.phaseService.currentPhase \u003d\u003d\u003d Phase.phaseTesterResponse) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"      return \u0027\u0027;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    // Initialise the team filter for Students in other Phases, as they do not have team filter assigned by default"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    if (this.userService.currentUser.team) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"      this.issueService.setIssueTeamFilter(this.userService.currentUser.team.id); // e.g W12-3"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    const teamFilter \u003d this.issueService.getIssueTeamFilter().split(\u0027-\u0027); // e.g CS2103T-W12-3 -\u003e CS2103T, W12 and 3"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    // The team filter string E.g \"+label:tutorial.W12+label:team.3\""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    const teamFilterString \u003d this.TUTORIAL_LABEL.concat(`${teamFilter[0]}-${teamFilter[1]}`).concat(this.TEAM_LABEL).concat(teamFilter[2]);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    // Only include duplicate Issues in last Phase"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    return (this.phaseService.currentPhase \u003d\u003d\u003d Phase.phaseModeration) ? teamFilterString : this.EXCLUDE_DUPLICATE.concat(teamFilterString);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"  reload() {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    this.isReloadButtonDisabled \u003d true;"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    this.githubEventService.reloadPage().subscribe("},{"lineNumber":139,"author":{"gitId":"-"},"content":"      (success) \u003d\u003e success,"},{"lineNumber":140,"author":{"gitId":"-"},"content":"      (error) \u003d\u003e {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        this.errorHandlingService.handleError(error, () \u003d\u003e this.githubEventService.reloadPage());"},{"lineNumber":142,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    // Prevent user from spamming the reload button"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    setTimeout(() \u003d\u003e {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"      this.isReloadButtonDisabled \u003d false;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    3000);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"  logOut() {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    this.auth.logOut();"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dingyuchen":2,"ptvrajsk":6,"-":146}},{"path":"src/app/shared/lib/session.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"dingyuchen"},"content":"import { uuid } from \u0027./uuid\u0027;"},{"lineNumber":2,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":3,"author":{"gitId":"dingyuchen"},"content":"export function generateSessionId() {"},{"lineNumber":4,"author":{"gitId":"dingyuchen"},"content":"  return `${Date.now()}-${uuid()}`;"},{"lineNumber":5,"author":{"gitId":"dingyuchen"},"content":"}"}],"authorContributionMap":{"dingyuchen":5}},{"path":"src/app/shared/lib/validate.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"dingyuchen"},"content":"export interface Rule {"},{"lineNumber":2,"author":{"gitId":"dingyuchen"},"content":"  required?: boolean;"},{"lineNumber":3,"author":{"gitId":"dingyuchen"},"content":"  validate: (any) \u003d\u003e boolean;"},{"lineNumber":4,"author":{"gitId":"dingyuchen"},"content":"}"},{"lineNumber":5,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":6,"author":{"gitId":"dingyuchen"},"content":"export interface Schema {"},{"lineNumber":7,"author":{"gitId":"dingyuchen"},"content":"  [keyName: string]: Rule;"},{"lineNumber":8,"author":{"gitId":"dingyuchen"},"content":"}"},{"lineNumber":9,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":10,"author":{"gitId":"dingyuchen"},"content":"export const isValidObject \u003d (object: object, schema: Schema): boolean \u003d\u003e"},{"lineNumber":11,"author":{"gitId":"dingyuchen"},"content":"  Object.entries(schema)"},{"lineNumber":12,"author":{"gitId":"dingyuchen"},"content":"    .every(([key, rule]) \u003d\u003e"},{"lineNumber":13,"author":{"gitId":"dingyuchen"},"content":"      !rule.required || (key in object \u0026\u0026 // if key is present"},{"lineNumber":14,"author":{"gitId":"dingyuchen"},"content":"      rule.validate(object[key])) // if value abides by schema"},{"lineNumber":15,"author":{"gitId":"dingyuchen"},"content":"    );"}],"authorContributionMap":{"dingyuchen":15}},{"path":"src/environments/environment.gen.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"dingyuchen"},"content":"import { Profile } from \u0027../app/core/models/profile.model\u0027;"},{"lineNumber":2,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":3,"author":{"gitId":"ptvrajsk"},"content":"const BaseConfig \u003d {"},{"lineNumber":4,"author":{"gitId":"ptvrajsk"},"content":"  githubUrl: \u0027https://github.com\u0027,"},{"lineNumber":5,"author":{"gitId":"ptvrajsk"},"content":"  accessTokenUrl: \u0027https://catcher-proxy.herokuapp.com/authenticate\u0027"},{"lineNumber":6,"author":{"gitId":"ptvrajsk"},"content":"};"},{"lineNumber":7,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":8,"author":{"gitId":"ptvrajsk"},"content":"export function generateDefaultEnv() {"},{"lineNumber":9,"author":{"gitId":"ptvrajsk"},"content":"  return {"},{"lineNumber":10,"author":{"gitId":"ptvrajsk"},"content":"    ...BaseConfig,"},{"lineNumber":11,"author":{"gitId":"ptvrajsk"},"content":"    production: false,"},{"lineNumber":12,"author":{"gitId":"ptvrajsk"},"content":"    test: false,"},{"lineNumber":13,"author":{"gitId":"ptvrajsk"},"content":"    clientId: \u00270cbc5e651d8b01e36687\u0027,"},{"lineNumber":14,"author":{"gitId":"ptvrajsk"},"content":"    origin: \u0027http://localhost:4200\u0027,"},{"lineNumber":15,"author":{"gitId":"ptvrajsk"},"content":"    profiles: ["},{"lineNumber":16,"author":{"gitId":"ptvrajsk"},"content":"      \u003cProfile\u003e{"},{"lineNumber":17,"author":{"gitId":"ptvrajsk"},"content":"        profileName: \u0027CATcher\u0027,"},{"lineNumber":18,"author":{"gitId":"ptvrajsk"},"content":"        encodedText: \u0027CATcher-org/public_data\u0027"},{"lineNumber":19,"author":{"gitId":"ptvrajsk"},"content":"      }"},{"lineNumber":20,"author":{"gitId":"ptvrajsk"},"content":"    ]"},{"lineNumber":21,"author":{"gitId":"ptvrajsk"},"content":"  };"},{"lineNumber":22,"author":{"gitId":"ptvrajsk"},"content":"}"},{"lineNumber":23,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":24,"author":{"gitId":"ptvrajsk"},"content":"export function generateTestEnv() {"},{"lineNumber":25,"author":{"gitId":"ptvrajsk"},"content":"  return {"},{"lineNumber":26,"author":{"gitId":"ptvrajsk"},"content":"    ...generateDefaultEnv(),"},{"lineNumber":27,"author":{"gitId":"ptvrajsk"},"content":"    test: true,"},{"lineNumber":28,"author":{"gitId":"ptvrajsk"},"content":"    role: \u0027student\u0027,"},{"lineNumber":29,"author":{"gitId":"ptvrajsk"},"content":"    username: \u0027CAT-Tester\u0027,"},{"lineNumber":30,"author":{"gitId":"ptvrajsk"},"content":"    team: \u0027CS2103T-W12-3\u0027"},{"lineNumber":31,"author":{"gitId":"ptvrajsk"},"content":"  };"},{"lineNumber":32,"author":{"gitId":"ptvrajsk"},"content":"}"}],"authorContributionMap":{"dingyuchen":1,"ptvrajsk":31}},{"path":"src/environments/environment.prod.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"dingyuchen"},"content":"import { Profile } from \u0027../app/core/models/profile.model\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"export const AppConfig \u003d {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  production: true,"},{"lineNumber":5,"author":{"gitId":"ptvrajsk"},"content":"  test: false,"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  clientId: \u00275e1ed08cff7f0de1d68d\u0027,"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  githubUrl: \u0027https://github.com\u0027,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  accessTokenUrl: \u0027https://catcher-proxy.herokuapp.com/authenticate\u0027,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  origin: \u0027https://catcher-org.github.io\u0027,"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  profiles: ["},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \u003cProfile\u003e{"},{"lineNumber":12,"author":{"gitId":"-"},"content":"      profileName: \u0027CS2103/T Alpha Test\u0027,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"      encodedText: \u0027nus-cs2103-AY2021S2/alpha\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003cProfile\u003e{"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      profileName: \u0027CS2103/T PE Dry run\u0027,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      encodedText: \u0027nus-cs2103-AY2021S2/PED\u0027"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \u003cProfile\u003e{"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      profileName: \u0027CS2103/T PE\u0027,"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      encodedText: \u0027nus-cs2103-AY2021S2/PE\u0027"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \u003cProfile\u003e{"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      profileName: \u0027CS2113/T Alpha Test\u0027,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      encodedText: \u0027nus-cs2113-AY2021S2/alpha\u0027"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    \u003cProfile\u003e{"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      profileName: \u0027CS2113/T PE Dry run\u0027,"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      encodedText: \u0027nus-cs2113-AY2021S2/PED\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    \u003cProfile\u003e{"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      profileName: \u0027CS2113/T PE\u0027,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      encodedText: \u0027nus-cs2113-AY2021S2/PE\u0027"},{"lineNumber":34,"author":{"gitId":"ptvrajsk"},"content":"    },"},{"lineNumber":35,"author":{"gitId":"ptvrajsk"},"content":"    \u003cProfile\u003e{"},{"lineNumber":36,"author":{"gitId":"ptvrajsk"},"content":"      profileName: \u0027TIC4002 Alpha Test\u0027,"},{"lineNumber":37,"author":{"gitId":"ptvrajsk"},"content":"      encodedText: \u0027nus-tic4002-AY2021S2/alpha\u0027"},{"lineNumber":38,"author":{"gitId":"ptvrajsk"},"content":"    },"},{"lineNumber":39,"author":{"gitId":"ptvrajsk"},"content":"    \u003cProfile\u003e{"},{"lineNumber":40,"author":{"gitId":"ptvrajsk"},"content":"      profileName: \u0027TIC4002 PE Dry run\u0027,"},{"lineNumber":41,"author":{"gitId":"ptvrajsk"},"content":"      encodedText: \u0027nus-tic4002-AY2021S2/PED\u0027"},{"lineNumber":42,"author":{"gitId":"ptvrajsk"},"content":"    },"},{"lineNumber":43,"author":{"gitId":"ptvrajsk"},"content":"    \u003cProfile\u003e{"},{"lineNumber":44,"author":{"gitId":"ptvrajsk"},"content":"      profileName: \u0027TIC4002 PE\u0027,"},{"lineNumber":45,"author":{"gitId":"ptvrajsk"},"content":"      encodedText: \u0027nus-tic4002-AY2021S2/PE\u0027"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  ]"},{"lineNumber":48,"author":{"gitId":"-"},"content":"};"}],"authorContributionMap":{"dingyuchen":1,"ptvrajsk":13,"-":34}},{"path":"src/environments/environment.staging.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"seanlowjk"},"content":"import { AppConfig as ProdAppConfig } from \u0027./environment.prod\u0027;"},{"lineNumber":2,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":3,"author":{"gitId":"seanlowjk"},"content":"export const AppConfig \u003d {"},{"lineNumber":4,"author":{"gitId":"seanlowjk"},"content":"  ...ProdAppConfig,"},{"lineNumber":5,"author":{"gitId":"seanlowjk"},"content":"  clientId: \u002754b9dcc49069dc2f018e\u0027,"},{"lineNumber":6,"author":{"gitId":"seanlowjk"},"content":"  origin: \u0027https://catcher-org.github.io\u0027,"},{"lineNumber":7,"author":{"gitId":"seanlowjk"},"content":"};"}],"authorContributionMap":{"seanlowjk":7}},{"path":"src/environments/environment.test.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"ptvrajsk"},"content":"import { generateTestEnv } from \u0027./environment.gen\u0027;"},{"lineNumber":2,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":3,"author":{"gitId":"ptvrajsk"},"content":"export const AppConfig \u003d {"},{"lineNumber":4,"author":{"gitId":"ptvrajsk"},"content":"  ...generateTestEnv()"},{"lineNumber":5,"author":{"gitId":"ptvrajsk"},"content":"};"}],"authorContributionMap":{"ptvrajsk":5}},{"path":"src/environments/environment.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"ptvrajsk"},"content":"import { generateDefaultEnv } from \u0027./environment.gen\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"export const AppConfig \u003d {"},{"lineNumber":4,"author":{"gitId":"ptvrajsk"},"content":"  ...generateDefaultEnv()"},{"lineNumber":5,"author":{"gitId":"-"},"content":"};"}],"authorContributionMap":{"ptvrajsk":2,"-":3}},{"path":"tests/app/core/models/github/github-label.model.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"seanlowjk"},"content":"import { GithubLabel } from \u0027../../../../../src/app/core/models/github/github-label.model\u0027;"},{"lineNumber":2,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":3,"author":{"gitId":"seanlowjk"},"content":"describe(\u0027GithubLabel\u0027, () \u003d\u003e {"},{"lineNumber":4,"author":{"gitId":"seanlowjk"},"content":"  let githubLabel: GithubLabel;"},{"lineNumber":5,"author":{"gitId":"seanlowjk"},"content":"  const category \u003d \u0027severity\u0027;"},{"lineNumber":6,"author":{"gitId":"seanlowjk"},"content":"  const value \u003d \u0027LOW\u0027;"},{"lineNumber":7,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":8,"author":{"gitId":"seanlowjk"},"content":"  it(\u0027.isCategorical() should return false when provided with no label name\u0027, () \u003d\u003e {"},{"lineNumber":9,"author":{"gitId":"seanlowjk"},"content":"    githubLabel \u003d new GithubLabel({});"},{"lineNumber":10,"author":{"gitId":"seanlowjk"},"content":"    expect(githubLabel.isCategorical()).toEqual(false);"},{"lineNumber":11,"author":{"gitId":"seanlowjk"},"content":"  });"},{"lineNumber":12,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":13,"author":{"gitId":"seanlowjk"},"content":"  it(\u0027.isCategorical() should return false when provided with a non-categorical label name\u0027, () \u003d\u003e {"},{"lineNumber":14,"author":{"gitId":"seanlowjk"},"content":"    githubLabel \u003d new GithubLabel({ name: `${category}${value}` });"},{"lineNumber":15,"author":{"gitId":"seanlowjk"},"content":"    expect(githubLabel.isCategorical()).toEqual(false);"},{"lineNumber":16,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":17,"author":{"gitId":"seanlowjk"},"content":"    githubLabel \u003d new GithubLabel({ name: `${category}             ${value}` });"},{"lineNumber":18,"author":{"gitId":"seanlowjk"},"content":"    expect(githubLabel.isCategorical()).toEqual(false);"},{"lineNumber":19,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":20,"author":{"gitId":"seanlowjk"},"content":"    githubLabel \u003d new GithubLabel({ name: `${category}.......${value}` });"},{"lineNumber":21,"author":{"gitId":"seanlowjk"},"content":"    expect(githubLabel.isCategorical()).toEqual(false);"},{"lineNumber":22,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":23,"author":{"gitId":"seanlowjk"},"content":"    githubLabel \u003d new GithubLabel({ name: `${category}.................${value}` });"},{"lineNumber":24,"author":{"gitId":"seanlowjk"},"content":"    expect(githubLabel.isCategorical()).toEqual(false);"},{"lineNumber":25,"author":{"gitId":"seanlowjk"},"content":"  });"},{"lineNumber":26,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":27,"author":{"gitId":"seanlowjk"},"content":"  it(\u0027.isCategorical() should return true when provided with a categorical label name\u0027, () \u003d\u003e {"},{"lineNumber":28,"author":{"gitId":"seanlowjk"},"content":"    githubLabel \u003d new GithubLabel({ name: `${category}.${value}` });"},{"lineNumber":29,"author":{"gitId":"seanlowjk"},"content":"    expect(githubLabel.isCategorical()).toEqual(true);"},{"lineNumber":30,"author":{"gitId":"seanlowjk"},"content":"  });"},{"lineNumber":31,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":32,"author":{"gitId":"seanlowjk"},"content":"  it(\u0027.getCategory() and .getValue() should return the correct values given a categorical label name\u0027, () \u003d\u003e {"},{"lineNumber":33,"author":{"gitId":"seanlowjk"},"content":"    githubLabel \u003d new GithubLabel({ name: `${category}.${value}` });"},{"lineNumber":34,"author":{"gitId":"seanlowjk"},"content":"    expect(githubLabel.getCategory()).toEqual(category);"},{"lineNumber":35,"author":{"gitId":"seanlowjk"},"content":"    expect(githubLabel.getValue()).toEqual(value);"},{"lineNumber":36,"author":{"gitId":"seanlowjk"},"content":"  });"},{"lineNumber":37,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":38,"author":{"gitId":"seanlowjk"},"content":"  it(\u0027.getCategory() and .getValue() should return the exact label name given a non-categorical label name\u0027, () \u003d\u003e {"},{"lineNumber":39,"author":{"gitId":"seanlowjk"},"content":"    githubLabel \u003d new GithubLabel({ name: `${category}.......${value}` });"},{"lineNumber":40,"author":{"gitId":"seanlowjk"},"content":"    expect(githubLabel.getCategory()).toEqual(githubLabel.name);"},{"lineNumber":41,"author":{"gitId":"seanlowjk"},"content":"    expect(githubLabel.getValue()).toEqual(githubLabel.name);"},{"lineNumber":42,"author":{"gitId":"seanlowjk"},"content":"  });"},{"lineNumber":43,"author":{"gitId":"seanlowjk"},"content":"});"}],"authorContributionMap":{"seanlowjk":43}},{"path":"tests/app/core/models/hidden-data-model.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { HiddenData } from \u0027../../../../src/app/core/models/hidden-data.model\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"const SAMPLE_KEY \u003d \u0027Nunc dolor mauris, @/;\\\u002712345\\\u0027rhoncus \"et\" \u003c!-\u003e facilisis sit amet\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"const SAMPLE_VALUE \u003d \u0027laoreet sit @@#$%^\u0026*()_+amet sem.-\u003e\u0027;"},{"lineNumber":4,"author":{"gitId":"dingyuchen"},"content":"const SAMPLE_KEY2 \u003d \u0027Version\u0027;"},{"lineNumber":5,"author":{"gitId":"dingyuchen"},"content":"const SAMPLE_VALUE2 \u003d \u0027Desktop v3.4.4\u0027;"},{"lineNumber":6,"author":{"gitId":"dingyuchen"},"content":"const SAMPLE_MAP \u003d new Map\u003cstring, string\u003e(["},{"lineNumber":7,"author":{"gitId":"dingyuchen"},"content":"  [SAMPLE_KEY, SAMPLE_VALUE],"},{"lineNumber":8,"author":{"gitId":"dingyuchen"},"content":"  [SAMPLE_KEY2, SAMPLE_VALUE2]"},{"lineNumber":9,"author":{"gitId":"dingyuchen"},"content":"]);"},{"lineNumber":10,"author":{"gitId":"dingyuchen"},"content":"const makeComment \u003d (key: string, value: string) \u003d\u003e `\u003c!--${key}: ${value}--\u003e`;"},{"lineNumber":11,"author":{"gitId":"dingyuchen"},"content":"const COMMENT \u003d makeComment(SAMPLE_KEY, SAMPLE_VALUE);"},{"lineNumber":12,"author":{"gitId":"dingyuchen"},"content":"const COMMENT2 \u003d makeComment(SAMPLE_KEY2, SAMPLE_VALUE2);"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"dingyuchen"},"content":"const embedComment \u003d (comment: string) \u003d\u003e `Lorem ipsum dolor sit amet, consectetur adipiscing elit."},{"lineNumber":15,"author":{"gitId":"-"},"content":"Nulla viverra nunc ac blandit dictum. Praesent vel est a erat"},{"lineNumber":16,"author":{"gitId":"-"},"content":"aliquam lobortis. ${comment}Fusce eu metus ex. In tempus erat magna."},{"lineNumber":17,"author":{"gitId":"-"},"content":"In hac habitasse platea dictumst. Aenean volutpat nibh mauris,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"commodo laoreet risus lacinia vitae.`;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"describe(\u0027HiddenData\u0027, () \u003d\u003e {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  it(\u0027.embedDataIntoString should append meta info as a HTML comment\u0027, () \u003d\u003e {"},{"lineNumber":22,"author":{"gitId":"dingyuchen"},"content":"    const dataWithMetaInfo \u003d HiddenData.embedDataIntoString(embedComment(\u0027\u0027), SAMPLE_MAP);"},{"lineNumber":23,"author":{"gitId":"dingyuchen"},"content":"    expect(dataWithMetaInfo).toEqual([embedComment(\u0027\u0027), COMMENT, COMMENT2].join(\u0027\\n\u0027));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"  it(\u0027constructor should parse string for HTML comments and generate the data map from comments\u0027, () \u003d\u003e {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    const parsedData \u003d new HiddenData(embedComment(COMMENT));"},{"lineNumber":28,"author":{"gitId":"dingyuchen"},"content":"    expect(parsedData.originalStringWithoutHiddenData).toEqual(embedComment(\u0027\u0027));"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    expect(parsedData.toString()).toEqual(COMMENT);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":32,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"dingyuchen":13,"-":19}},{"path":"tests/app/core/models/session-model.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"dingyuchen"},"content":"import {"},{"lineNumber":2,"author":{"gitId":"dingyuchen"},"content":"  assertSessionDataIntegrity,"},{"lineNumber":3,"author":{"gitId":"ptvrajsk"},"content":"  NO_ACCESSIBLE_PHASES,"},{"lineNumber":4,"author":{"gitId":"ptvrajsk"},"content":"  NO_VALID_OPEN_PHASES,"},{"lineNumber":5,"author":{"gitId":"ptvrajsk"},"content":"  OPENED_PHASE_REPO_UNDEFINED,"},{"lineNumber":6,"author":{"gitId":"dingyuchen"},"content":"  SESSION_DATA_UNAVAILABLE,"},{"lineNumber":7,"author":{"gitId":"dingyuchen"},"content":"  SESSION_DATA_MISSING_OPENPHASES_KEY"},{"lineNumber":8,"author":{"gitId":"dingyuchen"},"content":"} from \u0027../../../../src/app/core/models/session.model\u0027;"},{"lineNumber":9,"author":{"gitId":"dingyuchen"},"content":"import { of } from \u0027rxjs\u0027;"},{"lineNumber":10,"author":{"gitId":"seanlowjk"},"content":"import { BUG_REPORTING_PHASE_SESSION_DATA, NO_OPEN_PHASES_SESSION_DATA } from \u0027../../../constants/session.constants\u0027;"},{"lineNumber":11,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":12,"author":{"gitId":"dingyuchen"},"content":"describe(\u0027Session Model\u0027, () \u003d\u003e {"},{"lineNumber":13,"author":{"gitId":"dingyuchen"},"content":"  describe(\u0027assertSessionDataIntegrity()\u0027, () \u003d\u003e {"},{"lineNumber":14,"author":{"gitId":"dingyuchen"},"content":"    it(\u0027should throw error on unavailable session\u0027, () \u003d\u003e {"},{"lineNumber":15,"author":{"gitId":"dingyuchen"},"content":"      of(undefined)"},{"lineNumber":16,"author":{"gitId":"dingyuchen"},"content":"        .pipe(assertSessionDataIntegrity())"},{"lineNumber":17,"author":{"gitId":"dingyuchen"},"content":"        .subscribe({"},{"lineNumber":18,"author":{"gitId":"dingyuchen"},"content":"          next: () \u003d\u003e fail(),"},{"lineNumber":19,"author":{"gitId":"dingyuchen"},"content":"          error: (err) \u003d\u003e expect(err).toEqual(new Error(SESSION_DATA_UNAVAILABLE))"},{"lineNumber":20,"author":{"gitId":"dingyuchen"},"content":"        });"},{"lineNumber":21,"author":{"gitId":"dingyuchen"},"content":"    });"},{"lineNumber":22,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":23,"author":{"gitId":"ptvrajsk"},"content":"    it(\u0027should throw error on session data with missing crucial values\u0027, () \u003d\u003e {"},{"lineNumber":24,"author":{"gitId":"ptvrajsk"},"content":"      of({ dummyKey: undefined })"},{"lineNumber":25,"author":{"gitId":"dingyuchen"},"content":"        .pipe(assertSessionDataIntegrity())"},{"lineNumber":26,"author":{"gitId":"dingyuchen"},"content":"        .subscribe({"},{"lineNumber":27,"author":{"gitId":"ptvrajsk"},"content":"          next: () \u003d\u003e fail(),"},{"lineNumber":28,"author":{"gitId":"dingyuchen"},"content":"          error: (err) \u003d\u003e expect(err).toEqual(new Error(SESSION_DATA_MISSING_OPENPHASES_KEY))"},{"lineNumber":29,"author":{"gitId":"dingyuchen"},"content":"        });"},{"lineNumber":30,"author":{"gitId":"dingyuchen"},"content":"    });"},{"lineNumber":31,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":32,"author":{"gitId":"dingyuchen"},"content":"    it(\u0027should throw error on session with no open phases\u0027, () \u003d\u003e {"},{"lineNumber":33,"author":{"gitId":"seanlowjk"},"content":"      of(NO_OPEN_PHASES_SESSION_DATA)"},{"lineNumber":34,"author":{"gitId":"dingyuchen"},"content":"        .pipe(assertSessionDataIntegrity())"},{"lineNumber":35,"author":{"gitId":"dingyuchen"},"content":"        .subscribe({"},{"lineNumber":36,"author":{"gitId":"dingyuchen"},"content":"          next: () \u003d\u003e fail(),"},{"lineNumber":37,"author":{"gitId":"dingyuchen"},"content":"          error: (err) \u003d\u003e expect(err).toEqual(new Error(NO_ACCESSIBLE_PHASES))"},{"lineNumber":38,"author":{"gitId":"dingyuchen"},"content":"        });"},{"lineNumber":39,"author":{"gitId":"dingyuchen"},"content":"    });"},{"lineNumber":40,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":41,"author":{"gitId":"ptvrajsk"},"content":"    it(\u0027should throw error on session data with invalid open phases\u0027, () \u003d\u003e {"},{"lineNumber":42,"author":{"gitId":"seanlowjk"},"content":"      of({ ...BUG_REPORTING_PHASE_SESSION_DATA, openPhases: [\u0027unknownPhase\u0027] })"},{"lineNumber":43,"author":{"gitId":"ptvrajsk"},"content":"        .pipe(assertSessionDataIntegrity())"},{"lineNumber":44,"author":{"gitId":"ptvrajsk"},"content":"        .subscribe({"},{"lineNumber":45,"author":{"gitId":"ptvrajsk"},"content":"          next: () \u003d\u003e fail(),"},{"lineNumber":46,"author":{"gitId":"dingyuchen"},"content":"          error: (err) \u003d\u003e expect(err).toEqual(new Error(NO_VALID_OPEN_PHASES))"},{"lineNumber":47,"author":{"gitId":"ptvrajsk"},"content":"        });"},{"lineNumber":48,"author":{"gitId":"ptvrajsk"},"content":"    });"},{"lineNumber":49,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":50,"author":{"gitId":"ptvrajsk"},"content":"    it(\u0027should throw error on session data with undefined repo for open phase\u0027, () \u003d\u003e {"},{"lineNumber":51,"author":{"gitId":"seanlowjk"},"content":"      of({ ...BUG_REPORTING_PHASE_SESSION_DATA, phaseBugReporting: undefined })"},{"lineNumber":52,"author":{"gitId":"ptvrajsk"},"content":"        .pipe(assertSessionDataIntegrity())"},{"lineNumber":53,"author":{"gitId":"ptvrajsk"},"content":"        .subscribe({"},{"lineNumber":54,"author":{"gitId":"ptvrajsk"},"content":"          next: () \u003d\u003e fail(),"},{"lineNumber":55,"author":{"gitId":"dingyuchen"},"content":"          error: (err) \u003d\u003e expect(err).toEqual(new Error(OPENED_PHASE_REPO_UNDEFINED))"},{"lineNumber":56,"author":{"gitId":"ptvrajsk"},"content":"        });"},{"lineNumber":57,"author":{"gitId":"seanlowjk"},"content":"      of({ ...BUG_REPORTING_PHASE_SESSION_DATA, phaseBugReporting: null })"},{"lineNumber":58,"author":{"gitId":"ptvrajsk"},"content":"        .pipe(assertSessionDataIntegrity())"},{"lineNumber":59,"author":{"gitId":"ptvrajsk"},"content":"        .subscribe({"},{"lineNumber":60,"author":{"gitId":"ptvrajsk"},"content":"          next: () \u003d\u003e fail(),"},{"lineNumber":61,"author":{"gitId":"dingyuchen"},"content":"          error: (err) \u003d\u003e expect(err).toEqual(new Error(OPENED_PHASE_REPO_UNDEFINED))"},{"lineNumber":62,"author":{"gitId":"ptvrajsk"},"content":"        });"},{"lineNumber":63,"author":{"gitId":"seanlowjk"},"content":"      of({ ...BUG_REPORTING_PHASE_SESSION_DATA, phaseBugReporting: \u0027\u0027 })"},{"lineNumber":64,"author":{"gitId":"ptvrajsk"},"content":"        .pipe(assertSessionDataIntegrity())"},{"lineNumber":65,"author":{"gitId":"ptvrajsk"},"content":"        .subscribe({"},{"lineNumber":66,"author":{"gitId":"ptvrajsk"},"content":"          next: () \u003d\u003e fail(),"},{"lineNumber":67,"author":{"gitId":"dingyuchen"},"content":"          error: (err) \u003d\u003e expect(err).toEqual(new Error(OPENED_PHASE_REPO_UNDEFINED))"},{"lineNumber":68,"author":{"gitId":"ptvrajsk"},"content":"        });"},{"lineNumber":69,"author":{"gitId":"ptvrajsk"},"content":"    });"},{"lineNumber":70,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":71,"author":{"gitId":"ptvrajsk"},"content":"    it(\u0027should not throw error if session data contains repo information of unopened phases\u0027, () \u003d\u003e {"},{"lineNumber":72,"author":{"gitId":"seanlowjk"},"content":"      of(BUG_REPORTING_PHASE_SESSION_DATA)"},{"lineNumber":73,"author":{"gitId":"ptvrajsk"},"content":"        .pipe(assertSessionDataIntegrity())"},{"lineNumber":74,"author":{"gitId":"ptvrajsk"},"content":"        .subscribe({"},{"lineNumber":75,"author":{"gitId":"seanlowjk"},"content":"          next: (el) \u003d\u003e expect(el).toEqual(BUG_REPORTING_PHASE_SESSION_DATA),"},{"lineNumber":76,"author":{"gitId":"dingyuchen"},"content":"          error: () \u003d\u003e fail()"},{"lineNumber":77,"author":{"gitId":"ptvrajsk"},"content":"        });"},{"lineNumber":78,"author":{"gitId":"ptvrajsk"},"content":"    });"},{"lineNumber":79,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":80,"author":{"gitId":"dingyuchen"},"content":"    it(\u0027should pass valid session data\u0027, () \u003d\u003e {"},{"lineNumber":81,"author":{"gitId":"seanlowjk"},"content":"      of(BUG_REPORTING_PHASE_SESSION_DATA)"},{"lineNumber":82,"author":{"gitId":"dingyuchen"},"content":"        .pipe(assertSessionDataIntegrity())"},{"lineNumber":83,"author":{"gitId":"seanlowjk"},"content":"        .subscribe((el) \u003d\u003e expect(el).toEqual(BUG_REPORTING_PHASE_SESSION_DATA));"},{"lineNumber":84,"author":{"gitId":"dingyuchen"},"content":"    });"},{"lineNumber":85,"author":{"gitId":"dingyuchen"},"content":"  });"},{"lineNumber":86,"author":{"gitId":"dingyuchen"},"content":"});"}],"authorContributionMap":{"dingyuchen":42,"ptvrajsk":34,"seanlowjk":10}},{"path":"tests/app/phase-team-response/issues-pending/issues-pending.component.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"kkangs0226"},"content":"import { IssuesPendingComponent } from \u0027../../../../src/app/phase-team-response/issues-pending/issues-pending.component\u0027;"},{"lineNumber":2,"author":{"gitId":"kkangs0226"},"content":"import { Issue, STATUS } from \u0027../../../../src/app/core/models/issue.model\u0027;"},{"lineNumber":3,"author":{"gitId":"kkangs0226"},"content":"import { ISSUE_WITH_EMPTY_DESCRIPTION } from \u0027../../../constants/githubissue.constants\u0027;"},{"lineNumber":4,"author":{"gitId":"kkangs0226"},"content":"import { Team } from \u0027../../../../src/app/core/models/team.model\u0027;"},{"lineNumber":5,"author":{"gitId":"kkangs0226"},"content":"import { IssueService } from \u0027../../../../src/app/core/services/issue.service\u0027;"},{"lineNumber":6,"author":{"gitId":"kkangs0226"},"content":"import { UserService } from \u0027../../../../src/app/core/services/user.service\u0027;"},{"lineNumber":7,"author":{"gitId":"kkangs0226"},"content":"import { USER_Q, TEAM_4 } from \u0027../../../constants/data.constants\u0027;"},{"lineNumber":8,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":9,"author":{"gitId":"kkangs0226"},"content":"describe(\u0027IssuesPendingComponent\u0027, () \u003d\u003e {"},{"lineNumber":10,"author":{"gitId":"kkangs0226"},"content":"  describe(\u0027.ngOnInit()\u0027, () \u003d\u003e {"},{"lineNumber":11,"author":{"gitId":"kkangs0226"},"content":"    const dummyTeam: Team \u003d TEAM_4;"},{"lineNumber":12,"author":{"gitId":"kkangs0226"},"content":"    let dummyIssue: Issue;"},{"lineNumber":13,"author":{"gitId":"kkangs0226"},"content":"    let issuesPendingComponent: IssuesPendingComponent;"},{"lineNumber":14,"author":{"gitId":"dingyuchen"},"content":"    const issueService: IssueService \u003d new IssueService(null, null, null, null, null, null, null);"},{"lineNumber":15,"author":{"gitId":"kkangs0226"},"content":"    const userService: UserService \u003d new UserService(null, null);"},{"lineNumber":16,"author":{"gitId":"kkangs0226"},"content":"    userService.currentUser \u003d USER_Q;"},{"lineNumber":17,"author":{"gitId":"kkangs0226"},"content":"    const DUMMY_DUPLICATE_ISSUE_ID \u003d 1;"},{"lineNumber":18,"author":{"gitId":"kkangs0226"},"content":"    const DUMMY_RESPONSE \u003d \u0027dummy response\u0027;"},{"lineNumber":19,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":20,"author":{"gitId":"kkangs0226"},"content":"    beforeEach(() \u003d\u003e {"},{"lineNumber":21,"author":{"gitId":"kkangs0226"},"content":"      dummyIssue \u003d Issue.createPhaseTeamResponseIssue(ISSUE_WITH_EMPTY_DESCRIPTION, dummyTeam);"},{"lineNumber":22,"author":{"gitId":"kkangs0226"},"content":"      issueService.updateLocalStore(dummyIssue);"},{"lineNumber":23,"author":{"gitId":"kkangs0226"},"content":"      issuesPendingComponent \u003d new IssuesPendingComponent(issueService, null, userService);"},{"lineNumber":24,"author":{"gitId":"kkangs0226"},"content":"      issuesPendingComponent.ngOnInit();"},{"lineNumber":25,"author":{"gitId":"kkangs0226"},"content":"    });"},{"lineNumber":26,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":27,"author":{"gitId":"kkangs0226"},"content":"    it(\u0027should set filter to return false for a duplicate issue with no team response\u0027, () \u003d\u003e {"},{"lineNumber":28,"author":{"gitId":"kkangs0226"},"content":"      dummyIssue.duplicateOf \u003d DUMMY_DUPLICATE_ISSUE_ID;"},{"lineNumber":29,"author":{"gitId":"kkangs0226"},"content":"      issueService.issues[dummyIssue.id].teamResponse \u003d undefined;"},{"lineNumber":30,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":31,"author":{"gitId":"kkangs0226"},"content":"      expect(issuesPendingComponent.filter(dummyIssue)).toBeFalse();"},{"lineNumber":32,"author":{"gitId":"kkangs0226"},"content":"    });"},{"lineNumber":33,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":34,"author":{"gitId":"kkangs0226"},"content":"    it(\u0027should set filter to return false for a non-duplicate issue with responses\u0027, () \u003d\u003e {"},{"lineNumber":35,"author":{"gitId":"kkangs0226"},"content":"      dummyIssue.duplicateOf \u003d undefined;"},{"lineNumber":36,"author":{"gitId":"kkangs0226"},"content":"      issueService.issues[dummyIssue.id].teamResponse \u003d DUMMY_RESPONSE;"},{"lineNumber":37,"author":{"gitId":"kkangs0226"},"content":"      dummyIssue.status \u003d STATUS.Done;"},{"lineNumber":38,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":39,"author":{"gitId":"kkangs0226"},"content":"      expect(issuesPendingComponent.filter(dummyIssue)).toBeFalse();"},{"lineNumber":40,"author":{"gitId":"kkangs0226"},"content":"    });"},{"lineNumber":41,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":42,"author":{"gitId":"kkangs0226"},"content":"    it(\u0027should set filter to return false for a duplicate issue with responses\u0027, () \u003d\u003e {"},{"lineNumber":43,"author":{"gitId":"kkangs0226"},"content":"      dummyIssue.duplicateOf \u003d DUMMY_DUPLICATE_ISSUE_ID;"},{"lineNumber":44,"author":{"gitId":"kkangs0226"},"content":"      issueService.issues[dummyIssue.id].teamResponse \u003d DUMMY_RESPONSE;"},{"lineNumber":45,"author":{"gitId":"kkangs0226"},"content":"      dummyIssue.status \u003d STATUS.Done;"},{"lineNumber":46,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":47,"author":{"gitId":"kkangs0226"},"content":"      expect(issuesPendingComponent.filter(dummyIssue)).toBeFalse();"},{"lineNumber":48,"author":{"gitId":"kkangs0226"},"content":"    });"},{"lineNumber":49,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":50,"author":{"gitId":"kkangs0226"},"content":"    it(\u0027should set filter to return true for a non-duplicate issue with no responses\u0027, () \u003d\u003e {"},{"lineNumber":51,"author":{"gitId":"kkangs0226"},"content":"      dummyIssue.duplicateOf \u003d undefined;"},{"lineNumber":52,"author":{"gitId":"kkangs0226"},"content":"      issueService.issues[dummyIssue.id].teamResponse \u003d undefined;"},{"lineNumber":53,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":54,"author":{"gitId":"kkangs0226"},"content":"      expect(issuesPendingComponent.filter(dummyIssue)).toBeTrue();"},{"lineNumber":55,"author":{"gitId":"kkangs0226"},"content":"    });"},{"lineNumber":56,"author":{"gitId":"kkangs0226"},"content":"  });"},{"lineNumber":57,"author":{"gitId":"kkangs0226"},"content":"});"}],"authorContributionMap":{"kkangs0226":56,"dingyuchen":1}},{"path":"tests/app/phase-team-response/issues-responded/issues-responded.component.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"dingyuchen"},"content":"import { IssuesRespondedComponent } from \u0027../../../../src/app/phase-team-response/issues-responded/issues-responded.component\u0027;"},{"lineNumber":2,"author":{"gitId":"dingyuchen"},"content":"import { Issue, STATUS } from \u0027../../../../src/app/core/models/issue.model\u0027;"},{"lineNumber":3,"author":{"gitId":"dingyuchen"},"content":"import { ISSUE_WITH_EMPTY_DESCRIPTION } from \u0027../../../constants/githubissue.constants\u0027;"},{"lineNumber":4,"author":{"gitId":"dingyuchen"},"content":"import { IssueService } from \u0027../../../../src/app/core/services/issue.service\u0027;"},{"lineNumber":5,"author":{"gitId":"dingyuchen"},"content":"import { UserService } from \u0027../../../../src/app/core/services/user.service\u0027;"},{"lineNumber":6,"author":{"gitId":"dingyuchen"},"content":"import { USER_Q, TEAM_4 } from \u0027../../../constants/data.constants\u0027;"},{"lineNumber":7,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":8,"author":{"gitId":"dingyuchen"},"content":"describe(\u0027IssuesRespondedComponent\u0027, () \u003d\u003e {"},{"lineNumber":9,"author":{"gitId":"dingyuchen"},"content":"  describe(\u0027.ngOnInit()\u0027, () \u003d\u003e {"},{"lineNumber":10,"author":{"gitId":"dingyuchen"},"content":"    const DUMMY_TEAM \u003d TEAM_4;"},{"lineNumber":11,"author":{"gitId":"dingyuchen"},"content":"    const DUMMY_DUPLICATE_ISSUE_ID \u003d 1;"},{"lineNumber":12,"author":{"gitId":"dingyuchen"},"content":"    const DUMMY_RESPONSE \u003d \u0027dummy response\u0027;"},{"lineNumber":13,"author":{"gitId":"dingyuchen"},"content":"    let dummyIssue: Issue;"},{"lineNumber":14,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":15,"author":{"gitId":"dingyuchen"},"content":"    const issueService \u003d new IssueService(null, null, null, null, null, null, null);"},{"lineNumber":16,"author":{"gitId":"dingyuchen"},"content":"    const userService \u003d new UserService(null, null);"},{"lineNumber":17,"author":{"gitId":"dingyuchen"},"content":"    userService.currentUser \u003d USER_Q;"},{"lineNumber":18,"author":{"gitId":"dingyuchen"},"content":"    const issuesRespondedComponent \u003d new IssuesRespondedComponent(issueService, userService);"},{"lineNumber":19,"author":{"gitId":"dingyuchen"},"content":"    issuesRespondedComponent.ngOnInit();"},{"lineNumber":20,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":21,"author":{"gitId":"dingyuchen"},"content":"    beforeEach(() \u003d\u003e {"},{"lineNumber":22,"author":{"gitId":"dingyuchen"},"content":"      dummyIssue \u003d Issue.createPhaseTeamResponseIssue(ISSUE_WITH_EMPTY_DESCRIPTION, DUMMY_TEAM);"},{"lineNumber":23,"author":{"gitId":"dingyuchen"},"content":"      issueService.updateLocalStore(dummyIssue);"},{"lineNumber":24,"author":{"gitId":"dingyuchen"},"content":"    });"},{"lineNumber":25,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":26,"author":{"gitId":"dingyuchen"},"content":"    it(\u0027should set filter to return false for a non-duplicate issue with no team response and not marked done\u0027, () \u003d\u003e {"},{"lineNumber":27,"author":{"gitId":"dingyuchen"},"content":"      dummyIssue.duplicateOf \u003d undefined;"},{"lineNumber":28,"author":{"gitId":"dingyuchen"},"content":"      dummyIssue.status \u003d undefined;"},{"lineNumber":29,"author":{"gitId":"dingyuchen"},"content":"      dummyIssue.teamResponse \u003d undefined;"},{"lineNumber":30,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":31,"author":{"gitId":"dingyuchen"},"content":"      expect(issuesRespondedComponent.filter(dummyIssue)).toBeFalse();"},{"lineNumber":32,"author":{"gitId":"dingyuchen"},"content":"    });"},{"lineNumber":33,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":34,"author":{"gitId":"dingyuchen"},"content":"    it(\u0027should set filter to return false for a non-duplicate issue with responses and not marked done\u0027, () \u003d\u003e {"},{"lineNumber":35,"author":{"gitId":"dingyuchen"},"content":"      dummyIssue.duplicateOf \u003d undefined;"},{"lineNumber":36,"author":{"gitId":"dingyuchen"},"content":"      dummyIssue.status \u003d undefined;"},{"lineNumber":37,"author":{"gitId":"dingyuchen"},"content":"      dummyIssue.teamResponse \u003d DUMMY_RESPONSE;"},{"lineNumber":38,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":39,"author":{"gitId":"dingyuchen"},"content":"      expect(issuesRespondedComponent.filter(dummyIssue)).toBeFalse();"},{"lineNumber":40,"author":{"gitId":"dingyuchen"},"content":"    });"},{"lineNumber":41,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":42,"author":{"gitId":"dingyuchen"},"content":"    it(\u0027should set filter to return false for a duplicate issue with no team response and not marked done\u0027, () \u003d\u003e {"},{"lineNumber":43,"author":{"gitId":"dingyuchen"},"content":"      dummyIssue.duplicateOf \u003d DUMMY_DUPLICATE_ISSUE_ID;"},{"lineNumber":44,"author":{"gitId":"dingyuchen"},"content":"      dummyIssue.status \u003d undefined;"},{"lineNumber":45,"author":{"gitId":"dingyuchen"},"content":"      dummyIssue.teamResponse \u003d undefined;"},{"lineNumber":46,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":47,"author":{"gitId":"dingyuchen"},"content":"      expect(issuesRespondedComponent.filter(dummyIssue)).toBeFalse();"},{"lineNumber":48,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":49,"author":{"gitId":"dingyuchen"},"content":"      dummyIssue.duplicateOf \u003d DUMMY_DUPLICATE_ISSUE_ID;"},{"lineNumber":50,"author":{"gitId":"dingyuchen"},"content":"      dummyIssue.status \u003d STATUS.Incomplete;"},{"lineNumber":51,"author":{"gitId":"dingyuchen"},"content":"      dummyIssue.teamResponse \u003d undefined;"},{"lineNumber":52,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":53,"author":{"gitId":"dingyuchen"},"content":"      expect(issuesRespondedComponent.filter(dummyIssue)).toBeFalse();"},{"lineNumber":54,"author":{"gitId":"dingyuchen"},"content":"    });"},{"lineNumber":55,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":56,"author":{"gitId":"dingyuchen"},"content":"    it(\u0027should set filter to return true for a non-duplicate issue that is marked done with a team response\u0027, () \u003d\u003e {"},{"lineNumber":57,"author":{"gitId":"dingyuchen"},"content":"      dummyIssue.duplicateOf \u003d undefined;"},{"lineNumber":58,"author":{"gitId":"dingyuchen"},"content":"      dummyIssue.status \u003d STATUS.Done;"},{"lineNumber":59,"author":{"gitId":"dingyuchen"},"content":"      dummyIssue.teamResponse \u003d DUMMY_RESPONSE;"},{"lineNumber":60,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":61,"author":{"gitId":"dingyuchen"},"content":"      expect(issuesRespondedComponent.filter(dummyIssue)).toBeTrue();"},{"lineNumber":62,"author":{"gitId":"dingyuchen"},"content":"    });"},{"lineNumber":63,"author":{"gitId":"dingyuchen"},"content":"  });"},{"lineNumber":64,"author":{"gitId":"dingyuchen"},"content":"});"}],"authorContributionMap":{"dingyuchen":64}},{"path":"tests/app/phase-tester-response/issue-pending/issue-pending.component.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"kkangs0226"},"content":"import { IssuePendingComponent } from \u0027../../../../src/app/phase-tester-response/issue-pending/issue-pending.component\u0027;"},{"lineNumber":2,"author":{"gitId":"kkangs0226"},"content":"import { Issue, STATUS } from \u0027../../../../src/app/core/models/issue.model\u0027;"},{"lineNumber":3,"author":{"gitId":"kkangs0226"},"content":"import { ISSUE_WITH_EMPTY_DESCRIPTION } from \u0027../../../constants/githubissue.constants\u0027;"},{"lineNumber":4,"author":{"gitId":"kkangs0226"},"content":"import { Team } from \u0027../../../../src/app/core/models/team.model\u0027;"},{"lineNumber":5,"author":{"gitId":"kkangs0226"},"content":"import { IssueComment } from \u0027../../../../src/app/core/models/comment.model\u0027;"},{"lineNumber":6,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":7,"author":{"gitId":"kkangs0226"},"content":"describe(\u0027IssuePendingComponent\u0027, () \u003d\u003e {"},{"lineNumber":8,"author":{"gitId":"kkangs0226"},"content":"  describe(\u0027.ngOnInit()\u0027, () \u003d\u003e {"},{"lineNumber":9,"author":{"gitId":"kkangs0226"},"content":"    const dummyTeam: Team \u003d new Team({"},{"lineNumber":10,"author":{"gitId":"kkangs0226"},"content":"      id: \u0027dummyId\u0027,"},{"lineNumber":11,"author":{"gitId":"dingyuchen"},"content":"      teamMembers: []"},{"lineNumber":12,"author":{"gitId":"kkangs0226"},"content":"    });"},{"lineNumber":13,"author":{"gitId":"kkangs0226"},"content":"    let dummyIssue: Issue;"},{"lineNumber":14,"author":{"gitId":"kkangs0226"},"content":"    let issuePendingComponent: IssuePendingComponent;"},{"lineNumber":15,"author":{"gitId":"kkangs0226"},"content":"    const issueComment: IssueComment \u003d {"},{"lineNumber":16,"author":{"gitId":"kkangs0226"},"content":"      id: 1,"},{"lineNumber":17,"author":{"gitId":"dingyuchen"},"content":"      description: \u0027This is a dummy comment\u0027"},{"lineNumber":18,"author":{"gitId":"kkangs0226"},"content":"    };"},{"lineNumber":19,"author":{"gitId":"kkangs0226"},"content":"    issuePendingComponent \u003d new IssuePendingComponent();"},{"lineNumber":20,"author":{"gitId":"kkangs0226"},"content":"    issuePendingComponent.ngOnInit();"},{"lineNumber":21,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":22,"author":{"gitId":"kkangs0226"},"content":"    beforeEach(() \u003d\u003e {"},{"lineNumber":23,"author":{"gitId":"kkangs0226"},"content":"      dummyIssue \u003d Issue.createPhaseTeamResponseIssue(ISSUE_WITH_EMPTY_DESCRIPTION, dummyTeam);"},{"lineNumber":24,"author":{"gitId":"kkangs0226"},"content":"    });"},{"lineNumber":25,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":26,"author":{"gitId":"kkangs0226"},"content":"    it(\u0027should set filter to return false for an issue that is done and has a comment\u0027, () \u003d\u003e {"},{"lineNumber":27,"author":{"gitId":"kkangs0226"},"content":"      dummyIssue.status \u003d STATUS.Done;"},{"lineNumber":28,"author":{"gitId":"kkangs0226"},"content":"      dummyIssue.issueComment \u003d issueComment;"},{"lineNumber":29,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":30,"author":{"gitId":"kkangs0226"},"content":"      expect(issuePendingComponent.filter(dummyIssue)).toBeFalse();"},{"lineNumber":31,"author":{"gitId":"kkangs0226"},"content":"    });"},{"lineNumber":32,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":33,"author":{"gitId":"kkangs0226"},"content":"    it(\u0027should set filter to return false for an issue that is not done and has no comment\u0027, () \u003d\u003e {"},{"lineNumber":34,"author":{"gitId":"kkangs0226"},"content":"      // Issue with no status"},{"lineNumber":35,"author":{"gitId":"kkangs0226"},"content":"      expect(issuePendingComponent.filter(dummyIssue)).toBeFalse();"},{"lineNumber":36,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":37,"author":{"gitId":"kkangs0226"},"content":"      // Issue with incomplete status"},{"lineNumber":38,"author":{"gitId":"kkangs0226"},"content":"      dummyIssue.status \u003d STATUS.Incomplete;"},{"lineNumber":39,"author":{"gitId":"kkangs0226"},"content":"      expect(issuePendingComponent.filter(dummyIssue)).toBeFalse();"},{"lineNumber":40,"author":{"gitId":"kkangs0226"},"content":"    });"},{"lineNumber":41,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":42,"author":{"gitId":"kkangs0226"},"content":"    it(\u0027should set filter to return false for an issue that is done and has no comment\u0027, () \u003d\u003e {"},{"lineNumber":43,"author":{"gitId":"kkangs0226"},"content":"      dummyIssue.status \u003d STATUS.Done;"},{"lineNumber":44,"author":{"gitId":"kkangs0226"},"content":"      expect(issuePendingComponent.filter(dummyIssue)).toBeFalse();"},{"lineNumber":45,"author":{"gitId":"kkangs0226"},"content":"    });"},{"lineNumber":46,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":47,"author":{"gitId":"kkangs0226"},"content":"    it(\u0027should set filter to return true for an issue that is not done and has a comment\u0027, () \u003d\u003e {"},{"lineNumber":48,"author":{"gitId":"kkangs0226"},"content":"      dummyIssue.status \u003d STATUS.Incomplete;"},{"lineNumber":49,"author":{"gitId":"kkangs0226"},"content":"      dummyIssue.issueComment \u003d issueComment;"},{"lineNumber":50,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":51,"author":{"gitId":"kkangs0226"},"content":"      expect(issuePendingComponent.filter(dummyIssue)).toBeTrue();"},{"lineNumber":52,"author":{"gitId":"kkangs0226"},"content":"    });"},{"lineNumber":53,"author":{"gitId":"kkangs0226"},"content":"  });"},{"lineNumber":54,"author":{"gitId":"kkangs0226"},"content":"});"}],"authorContributionMap":{"kkangs0226":52,"dingyuchen":2}},{"path":"tests/app/phase-tester-response/issue-responded/issue-responded.component.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"dingyuchen"},"content":"import { IssueRespondedComponent } from \u0027../../../../src/app/phase-tester-response/issue-responded/issue-responded.component\u0027;"},{"lineNumber":2,"author":{"gitId":"dingyuchen"},"content":"import { Issue, STATUS } from \u0027../../../../src/app/core/models/issue.model\u0027;"},{"lineNumber":3,"author":{"gitId":"dingyuchen"},"content":"import { ISSUE_WITH_EMPTY_DESCRIPTION } from \u0027../../../constants/githubissue.constants\u0027;"},{"lineNumber":4,"author":{"gitId":"dingyuchen"},"content":"import { IssueComment } from \u0027../../../../src/app/core/models/comment.model\u0027;"},{"lineNumber":5,"author":{"gitId":"dingyuchen"},"content":"import { USER_JUNWEI } from \u0027../../../constants/data.constants\u0027;"},{"lineNumber":6,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":7,"author":{"gitId":"dingyuchen"},"content":"describe(\u0027IssueRespondedComponent\u0027, () \u003d\u003e {"},{"lineNumber":8,"author":{"gitId":"dingyuchen"},"content":"  describe(\u0027.ngOnInit()\u0027, () \u003d\u003e {"},{"lineNumber":9,"author":{"gitId":"dingyuchen"},"content":"    const issuesRespondedComponent \u003d new IssueRespondedComponent();"},{"lineNumber":10,"author":{"gitId":"dingyuchen"},"content":"    issuesRespondedComponent.ngOnInit();"},{"lineNumber":11,"author":{"gitId":"dingyuchen"},"content":"    const DUMMY_TEAM \u003d USER_JUNWEI.team;"},{"lineNumber":12,"author":{"gitId":"dingyuchen"},"content":"    const DUMMY_COMMENT: IssueComment \u003d {"},{"lineNumber":13,"author":{"gitId":"dingyuchen"},"content":"      id: 1,"},{"lineNumber":14,"author":{"gitId":"dingyuchen"},"content":"      description: \u0027This is some description of an issue comment\u0027"},{"lineNumber":15,"author":{"gitId":"dingyuchen"},"content":"    };"},{"lineNumber":16,"author":{"gitId":"dingyuchen"},"content":"    let dummyIssue: Issue;"},{"lineNumber":17,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":18,"author":{"gitId":"dingyuchen"},"content":"    beforeEach(() \u003d\u003e {"},{"lineNumber":19,"author":{"gitId":"dingyuchen"},"content":"      // generate a well-formed dummy-issue"},{"lineNumber":20,"author":{"gitId":"dingyuchen"},"content":"      // dummy issues does not have status and comment attributes"},{"lineNumber":21,"author":{"gitId":"dingyuchen"},"content":"      dummyIssue \u003d Issue.createPhaseTeamResponseIssue(ISSUE_WITH_EMPTY_DESCRIPTION, DUMMY_TEAM);"},{"lineNumber":22,"author":{"gitId":"dingyuchen"},"content":"    });"},{"lineNumber":23,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":24,"author":{"gitId":"dingyuchen"},"content":"    it(\u0027should set filter to return true for an issue that has a comment and is marked done\u0027, () \u003d\u003e {"},{"lineNumber":25,"author":{"gitId":"dingyuchen"},"content":"      // Issue with done status and a comment"},{"lineNumber":26,"author":{"gitId":"dingyuchen"},"content":"      dummyIssue.status \u003d STATUS.Done;"},{"lineNumber":27,"author":{"gitId":"dingyuchen"},"content":"      dummyIssue.issueComment \u003d DUMMY_COMMENT;"},{"lineNumber":28,"author":{"gitId":"dingyuchen"},"content":"      expect(issuesRespondedComponent.filter(dummyIssue)).toBeTrue();"},{"lineNumber":29,"author":{"gitId":"dingyuchen"},"content":"    });"},{"lineNumber":30,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":31,"author":{"gitId":"dingyuchen"},"content":"    it(\u0027should set filter to return false for an issue that is not done and has a comment\u0027, () \u003d\u003e {"},{"lineNumber":32,"author":{"gitId":"dingyuchen"},"content":"      // Issue with no status but with comment"},{"lineNumber":33,"author":{"gitId":"dingyuchen"},"content":"      dummyIssue.issueComment \u003d DUMMY_COMMENT;"},{"lineNumber":34,"author":{"gitId":"dingyuchen"},"content":"      expect(issuesRespondedComponent.filter(dummyIssue)).toBeFalse();"},{"lineNumber":35,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":36,"author":{"gitId":"dingyuchen"},"content":"      // Issue with incomplete status and comment"},{"lineNumber":37,"author":{"gitId":"dingyuchen"},"content":"      dummyIssue.status \u003d STATUS.Incomplete;"},{"lineNumber":38,"author":{"gitId":"dingyuchen"},"content":"      expect(issuesRespondedComponent.filter(dummyIssue)).toBeFalse();"},{"lineNumber":39,"author":{"gitId":"dingyuchen"},"content":"    });"},{"lineNumber":40,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":41,"author":{"gitId":"dingyuchen"},"content":"    it(\u0027should set filter to return false for an issue that is marked done, and does not have a comment\u0027, () \u003d\u003e {"},{"lineNumber":42,"author":{"gitId":"dingyuchen"},"content":"      // Issue with done status and no comment"},{"lineNumber":43,"author":{"gitId":"dingyuchen"},"content":"      dummyIssue.status \u003d STATUS.Done;"},{"lineNumber":44,"author":{"gitId":"dingyuchen"},"content":"      expect(issuesRespondedComponent.filter(dummyIssue)).toBeFalse();"},{"lineNumber":45,"author":{"gitId":"dingyuchen"},"content":"    });"},{"lineNumber":46,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":47,"author":{"gitId":"dingyuchen"},"content":"    it(\u0027should set filter to return false for an issue that is not marked done, and does not have a comment\u0027, () \u003d\u003e {"},{"lineNumber":48,"author":{"gitId":"dingyuchen"},"content":"      // Issue with no status and no comment"},{"lineNumber":49,"author":{"gitId":"dingyuchen"},"content":"      expect(issuesRespondedComponent.filter(dummyIssue)).toBeFalse();"},{"lineNumber":50,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":51,"author":{"gitId":"dingyuchen"},"content":"      // Issue with incomplete status and no comment"},{"lineNumber":52,"author":{"gitId":"dingyuchen"},"content":"      dummyIssue.status \u003d STATUS.Incomplete;"},{"lineNumber":53,"author":{"gitId":"dingyuchen"},"content":"      expect(issuesRespondedComponent.filter(dummyIssue)).toBeFalse();"},{"lineNumber":54,"author":{"gitId":"dingyuchen"},"content":"    });"},{"lineNumber":55,"author":{"gitId":"dingyuchen"},"content":"  });"},{"lineNumber":56,"author":{"gitId":"dingyuchen"},"content":"});"}],"authorContributionMap":{"dingyuchen":56}},{"path":"tests/app/shared/issue-tables/issue-sorter.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"seanlowjk"},"content":"import { getSortedData } from \u0027../../../../src/app/shared/issue-tables/issue-sorter\u0027;"},{"lineNumber":2,"author":{"gitId":"seanlowjk"},"content":"import { MatSort } from \u0027@angular/material\u0027;"},{"lineNumber":3,"author":{"gitId":"seanlowjk"},"content":"import { Issue } from \u0027../../../../src/app/core/models/issue.model\u0027;"},{"lineNumber":4,"author":{"gitId":"seanlowjk"},"content":"import { ISSUE_WITH_ASSIGNEES, ISSUE_WITH_EMPTY_DESCRIPTION, ISSUE_PENDING_MODERATION } from \u0027../../../constants/githubissue.constants\u0027;"},{"lineNumber":5,"author":{"gitId":"kkangs0226"},"content":"import { TEAM_4 } from \u0027../../../constants/data.constants\u0027;"},{"lineNumber":6,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":7,"author":{"gitId":"seanlowjk"},"content":"describe(\u0027issuer-sorter\u0027, () \u003d\u003e {"},{"lineNumber":8,"author":{"gitId":"seanlowjk"},"content":"  describe(\u0027getSortedData()\u0027, () \u003d\u003e {"},{"lineNumber":9,"author":{"gitId":"kkangs0226"},"content":"    const dummyTeam \u003d TEAM_4;"},{"lineNumber":10,"author":{"gitId":"seanlowjk"},"content":"    const dummyIssue: Issue \u003d Issue.createPhaseTeamResponseIssue(ISSUE_WITH_EMPTY_DESCRIPTION, dummyTeam);"},{"lineNumber":11,"author":{"gitId":"seanlowjk"},"content":"    const otherDummyIssue: Issue \u003d Issue.createPhaseTeamResponseIssue(ISSUE_WITH_ASSIGNEES, dummyTeam);"},{"lineNumber":12,"author":{"gitId":"seanlowjk"},"content":"    const issuesList: Issue[] \u003d [dummyIssue, otherDummyIssue];"},{"lineNumber":13,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":14,"author":{"gitId":"seanlowjk"},"content":"    const moderationIssue: Issue \u003d Issue.createPhaseModerationIssue(ISSUE_WITH_EMPTY_DESCRIPTION, dummyTeam);"},{"lineNumber":15,"author":{"gitId":"seanlowjk"},"content":"    const otherModerationIssue: Issue \u003d Issue.createPhaseModerationIssue(ISSUE_PENDING_MODERATION, dummyTeam);"},{"lineNumber":16,"author":{"gitId":"seanlowjk"},"content":"    const todoIssuesList: Issue[] \u003d [moderationIssue, otherModerationIssue];"},{"lineNumber":17,"author":{"gitId":"seanlowjk"},"content":"    const matSort: MatSort \u003d new MatSort();"},{"lineNumber":18,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":19,"author":{"gitId":"seanlowjk"},"content":"    it(\u0027sorts issues based on their assignees correctly\u0027, () \u003d\u003e {"},{"lineNumber":20,"author":{"gitId":"seanlowjk"},"content":"      matSort.active \u003d \u0027assignees\u0027;"},{"lineNumber":21,"author":{"gitId":"seanlowjk"},"content":"      matSort.direction \u003d \u0027asc\u0027;"},{"lineNumber":22,"author":{"gitId":"seanlowjk"},"content":"      const sortedIssuesByAssigneesAsc \u003d getSortedData(matSort, issuesList);"},{"lineNumber":23,"author":{"gitId":"seanlowjk"},"content":"      assertOrder(sortedIssuesByAssigneesAsc, dummyIssue, otherDummyIssue);"},{"lineNumber":24,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":25,"author":{"gitId":"seanlowjk"},"content":"      matSort.direction \u003d \u0027desc\u0027;"},{"lineNumber":26,"author":{"gitId":"seanlowjk"},"content":"      const sortedIssuesByAssigneesDesc \u003d getSortedData(matSort, issuesList);"},{"lineNumber":27,"author":{"gitId":"seanlowjk"},"content":"      assertOrder(sortedIssuesByAssigneesDesc, otherDummyIssue, dummyIssue);"},{"lineNumber":28,"author":{"gitId":"seanlowjk"},"content":"    });"},{"lineNumber":29,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":30,"author":{"gitId":"seanlowjk"},"content":"    it(\u0027sorts issues based on their string fields correctly\u0027, () \u003d\u003e {"},{"lineNumber":31,"author":{"gitId":"seanlowjk"},"content":"      matSort.active \u003d \u0027title\u0027;"},{"lineNumber":32,"author":{"gitId":"seanlowjk"},"content":"      matSort.direction \u003d \u0027asc\u0027;"},{"lineNumber":33,"author":{"gitId":"seanlowjk"},"content":"      const sortedIssuesByTitleAsc \u003d getSortedData(matSort, issuesList);"},{"lineNumber":34,"author":{"gitId":"seanlowjk"},"content":"      assertOrder(sortedIssuesByTitleAsc, dummyIssue, otherDummyIssue);"},{"lineNumber":35,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":36,"author":{"gitId":"seanlowjk"},"content":"      matSort.direction \u003d \u0027desc\u0027;"},{"lineNumber":37,"author":{"gitId":"seanlowjk"},"content":"      const sortedIssuesByTitleDesc \u003d getSortedData(matSort, issuesList);"},{"lineNumber":38,"author":{"gitId":"seanlowjk"},"content":"      assertOrder(sortedIssuesByTitleDesc, otherDummyIssue, dummyIssue);"},{"lineNumber":39,"author":{"gitId":"seanlowjk"},"content":"    });"},{"lineNumber":40,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":41,"author":{"gitId":"seanlowjk"},"content":"    it(\u0027sorts issues based on their integer fields correctly\u0027, () \u003d\u003e {"},{"lineNumber":42,"author":{"gitId":"seanlowjk"},"content":"      matSort.active \u003d \u0027id\u0027;"},{"lineNumber":43,"author":{"gitId":"seanlowjk"},"content":"      matSort.direction \u003d \u0027asc\u0027;"},{"lineNumber":44,"author":{"gitId":"seanlowjk"},"content":"      const sortedIssuedByIdAsc \u003d getSortedData(matSort, issuesList);"},{"lineNumber":45,"author":{"gitId":"seanlowjk"},"content":"      assertOrder(sortedIssuedByIdAsc, otherDummyIssue, dummyIssue);"},{"lineNumber":46,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":47,"author":{"gitId":"seanlowjk"},"content":"      matSort.direction \u003d \u0027desc\u0027;"},{"lineNumber":48,"author":{"gitId":"seanlowjk"},"content":"      const sortedIssuedByIdDesc \u003d getSortedData(matSort, issuesList);"},{"lineNumber":49,"author":{"gitId":"seanlowjk"},"content":"      assertOrder(sortedIssuedByIdDesc, dummyIssue, otherDummyIssue);"},{"lineNumber":50,"author":{"gitId":"seanlowjk"},"content":"    });"},{"lineNumber":51,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":52,"author":{"gitId":"seanlowjk"},"content":"    it(\u0027sorts issues based on their todos left correctly\u0027, () \u003d\u003e {"},{"lineNumber":53,"author":{"gitId":"seanlowjk"},"content":"      matSort.active \u003d \u0027Todo Remaining\u0027;"},{"lineNumber":54,"author":{"gitId":"seanlowjk"},"content":"      matSort.direction \u003d \u0027asc\u0027;"},{"lineNumber":55,"author":{"gitId":"seanlowjk"},"content":"      const sortedIssuesByTodoAsc \u003d getSortedData(matSort, todoIssuesList);"},{"lineNumber":56,"author":{"gitId":"seanlowjk"},"content":"      assertOrder(sortedIssuesByTodoAsc, otherModerationIssue, moderationIssue);"},{"lineNumber":57,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":58,"author":{"gitId":"seanlowjk"},"content":"      matSort.direction \u003d \u0027desc\u0027;"},{"lineNumber":59,"author":{"gitId":"seanlowjk"},"content":"      const sortedIssuesByTodoDesc \u003d getSortedData(matSort, todoIssuesList);"},{"lineNumber":60,"author":{"gitId":"seanlowjk"},"content":"      assertOrder(sortedIssuesByTodoDesc, moderationIssue, otherModerationIssue);"},{"lineNumber":61,"author":{"gitId":"seanlowjk"},"content":"    });"},{"lineNumber":62,"author":{"gitId":"seanlowjk"},"content":"  });"},{"lineNumber":63,"author":{"gitId":"seanlowjk"},"content":"});"},{"lineNumber":64,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":65,"author":{"gitId":"seanlowjk"},"content":"/**"},{"lineNumber":66,"author":{"gitId":"seanlowjk"},"content":" * This helper method helps to check if the sorted issues are in their"},{"lineNumber":67,"author":{"gitId":"seanlowjk"},"content":" * correct order based on the variable arguments provided."},{"lineNumber":68,"author":{"gitId":"seanlowjk"},"content":" */"},{"lineNumber":69,"author":{"gitId":"seanlowjk"},"content":"function assertOrder(sortedIssues: Issue[], ...expectedSortedIssues: Issue[]) {"},{"lineNumber":70,"author":{"gitId":"seanlowjk"},"content":"  for (let i \u003d 0; i \u003c sortedIssues.length; i++) {"},{"lineNumber":71,"author":{"gitId":"seanlowjk"},"content":"    expect(sortedIssues[i].id).toBe(expectedSortedIssues[i].id);"},{"lineNumber":72,"author":{"gitId":"seanlowjk"},"content":"  }"},{"lineNumber":73,"author":{"gitId":"seanlowjk"},"content":"}"}],"authorContributionMap":{"kkangs0226":2,"seanlowjk":71}},{"path":"tests/app/shared/issue-tables/issue-tables.component.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"kkangs0226"},"content":"import { IssueTablesComponent } from \u0027../../../../src/app/shared/issue-tables/issue-tables.component\u0027;"},{"lineNumber":2,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":3,"author":{"gitId":"kkangs0226"},"content":"describe(\u0027IssueTablesComponent\u0027, () \u003d\u003e {"},{"lineNumber":4,"author":{"gitId":"kkangs0226"},"content":"  let issueTablesComponent: IssueTablesComponent;"},{"lineNumber":5,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":6,"author":{"gitId":"kkangs0226"},"content":"  describe(\u0027.fitTitleText()\u0027, () \u003d\u003e {"},{"lineNumber":7,"author":{"gitId":"kkangs0226"},"content":"    beforeEach(() \u003d\u003e {"},{"lineNumber":8,"author":{"gitId":"kkangs0226"},"content":"      issueTablesComponent \u003d new IssueTablesComponent(null, null, null, null, null, null, null);"},{"lineNumber":9,"author":{"gitId":"kkangs0226"},"content":"    });"},{"lineNumber":10,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":11,"author":{"gitId":"kkangs0226"},"content":"    it(\u0027should format the title text to account for words longer than max word length\u0027, () \u003d\u003e {"},{"lineNumber":12,"author":{"gitId":"kkangs0226"},"content":"      // title consisting of 1 word of 30 characters and 1 word of 50 characters"},{"lineNumber":13,"author":{"gitId":"kkangs0226"},"content":"      const LONG_MIXED_TITLE \u003d \u0027012345678901234567890123456789 01234567890123456789012345678901234567890123456789\u0027;"},{"lineNumber":14,"author":{"gitId":"kkangs0226"},"content":"      const FORMATTED_LONG_MIXED_TITLE \u003d \u0027012345678901234567890123456789 01234567890123456789012345678901234567...\u0027;"},{"lineNumber":15,"author":{"gitId":"kkangs0226"},"content":"      expect(issueTablesComponent.fitTitleText(LONG_MIXED_TITLE)).toEqual(FORMATTED_LONG_MIXED_TITLE);"},{"lineNumber":16,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":17,"author":{"gitId":"kkangs0226"},"content":"      // title consisting of 2 words of 50 characters"},{"lineNumber":18,"author":{"gitId":"kkangs0226"},"content":"      const LONG_TWO_WORDS_TITLE \u003d \u002701234567890123456789012345678901234567890123456789 01234567890123456789012345678901234567890123456789\u0027;"},{"lineNumber":19,"author":{"gitId":"kkangs0226"},"content":"      const FORMATTED_TWO_WORDS_TITLE \u003d \u002701234567890123456789012345678901234567... 01234567890123456789012345678901234567...\u0027;"},{"lineNumber":20,"author":{"gitId":"kkangs0226"},"content":"      expect(issueTablesComponent.fitTitleText(LONG_TWO_WORDS_TITLE)).toEqual(FORMATTED_TWO_WORDS_TITLE);"},{"lineNumber":21,"author":{"gitId":"kkangs0226"},"content":"    });"},{"lineNumber":22,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":23,"author":{"gitId":"kkangs0226"},"content":"    it(\u0027should retain original title if words are not longer than max word length\u0027, () \u003d\u003e {"},{"lineNumber":24,"author":{"gitId":"kkangs0226"},"content":"      // title consisting of 1 word of 30 characters"},{"lineNumber":25,"author":{"gitId":"kkangs0226"},"content":"      const SHORT_TITLE \u003d \u0027012345678901234567890123456789\u0027;"},{"lineNumber":26,"author":{"gitId":"kkangs0226"},"content":"      expect(issueTablesComponent.fitTitleText(SHORT_TITLE)).toEqual(SHORT_TITLE);"},{"lineNumber":27,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":28,"author":{"gitId":"kkangs0226"},"content":"      // title consisting of 2 words of 43 characters (maximum word length)"},{"lineNumber":29,"author":{"gitId":"kkangs0226"},"content":"      const MAX_LENGTH_TITLE \u003d \u00270123456789012345678901234567890123456789012 0123456789012345678901234567890123456789012\u0027;"},{"lineNumber":30,"author":{"gitId":"kkangs0226"},"content":"      expect(issueTablesComponent.fitTitleText(MAX_LENGTH_TITLE)).toEqual(MAX_LENGTH_TITLE);"},{"lineNumber":31,"author":{"gitId":"kkangs0226"},"content":"    });"},{"lineNumber":32,"author":{"gitId":"kkangs0226"},"content":"  });"},{"lineNumber":33,"author":{"gitId":"kkangs0226"},"content":"});"}],"authorContributionMap":{"kkangs0226":33}},{"path":"tests/app/shared/issue-tables/search-filter.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"kkangs0226"},"content":"import { Issue } from \u0027../../../../src/app/core/models/issue.model\u0027;"},{"lineNumber":2,"author":{"gitId":"kkangs0226"},"content":"import { Team } from \u0027../../../../src/app/core/models/team.model\u0027;"},{"lineNumber":3,"author":{"gitId":"dingyuchen"},"content":"import {"},{"lineNumber":4,"author":{"gitId":"dingyuchen"},"content":"  DUPLICATED_ISSUE_WITH_EMPTY_DESCRIPTION_HIGH_SEVERITY,"},{"lineNumber":5,"author":{"gitId":"dingyuchen"},"content":"  ISSUE_WITH_ASSIGNEES,"},{"lineNumber":6,"author":{"gitId":"dingyuchen"},"content":"  ISSUE_WITH_EMPTY_DESCRIPTION,"},{"lineNumber":7,"author":{"gitId":"dingyuchen"},"content":"  ISSUE_WITH_EMPTY_DESCRIPTION_HIGH_SEVERITY,"},{"lineNumber":8,"author":{"gitId":"dingyuchen"},"content":"  ISSUE_WITH_EMPTY_DESCRIPTION_LOW_SEVERITY"},{"lineNumber":9,"author":{"gitId":"dingyuchen"},"content":"} from \u0027../../../constants/githubissue.constants\u0027;"},{"lineNumber":10,"author":{"gitId":"kkangs0226"},"content":"import { TABLE_COLUMNS } from \u0027../../../../src/app/shared/issue-tables/issue-tables-columns\u0027;"},{"lineNumber":11,"author":{"gitId":"kkangs0226"},"content":"import { IssueService } from \u0027../../../../src/app/core/services/issue.service\u0027;"},{"lineNumber":12,"author":{"gitId":"kkangs0226"},"content":"import { applySearchFilter } from \u0027../../../../src/app/shared/issue-tables/search-filter\u0027;"},{"lineNumber":13,"author":{"gitId":"kkangs0226"},"content":"import { USER_ANUBHAV } from \u0027../../../constants/data.constants\u0027;"},{"lineNumber":14,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":15,"author":{"gitId":"kkangs0226"},"content":"describe(\u0027search-filter\u0027, () \u003d\u003e {"},{"lineNumber":16,"author":{"gitId":"kkangs0226"},"content":"  describe(\u0027applySearchFilter()\u0027, () \u003d\u003e {"},{"lineNumber":17,"author":{"gitId":"kkangs0226"},"content":"    const dummyTeam: Team \u003d new Team({"},{"lineNumber":18,"author":{"gitId":"kkangs0226"},"content":"      id: \u0027dummyId\u0027,"},{"lineNumber":19,"author":{"gitId":"dingyuchen"},"content":"      teamMembers: []"},{"lineNumber":20,"author":{"gitId":"kkangs0226"},"content":"    });"},{"lineNumber":21,"author":{"gitId":"kkangs0226"},"content":"    let searchKey: string;"},{"lineNumber":22,"author":{"gitId":"kkangs0226"},"content":"    const mediumSeverityIssueWithResponse: Issue \u003d Issue.createPhaseTeamResponseIssue(ISSUE_WITH_EMPTY_DESCRIPTION, dummyTeam);"},{"lineNumber":23,"author":{"gitId":"kkangs0226"},"content":"    mediumSeverityIssueWithResponse.responseTag \u003d \u0027Accepted\u0027;"},{"lineNumber":24,"author":{"gitId":"kkangs0226"},"content":"    const mediumSeverityIssueWithAssigneee: Issue \u003d Issue.createPhaseTeamResponseIssue(ISSUE_WITH_ASSIGNEES, dummyTeam);"},{"lineNumber":25,"author":{"gitId":"kkangs0226"},"content":"    const lowSeverityFeatureFlawIssue: Issue \u003d Issue.createPhaseTeamResponseIssue(ISSUE_WITH_EMPTY_DESCRIPTION_LOW_SEVERITY, dummyTeam);"},{"lineNumber":26,"author":{"gitId":"dingyuchen"},"content":"    const highSeverityDocumentationBugIssue: Issue \u003d Issue.createPhaseTeamResponseIssue("},{"lineNumber":27,"author":{"gitId":"dingyuchen"},"content":"      ISSUE_WITH_EMPTY_DESCRIPTION_HIGH_SEVERITY,"},{"lineNumber":28,"author":{"gitId":"dingyuchen"},"content":"      dummyTeam"},{"lineNumber":29,"author":{"gitId":"dingyuchen"},"content":"    );"},{"lineNumber":30,"author":{"gitId":"kkangs0226"},"content":"    const duplicatedIssue: Issue \u003d Issue.createPhaseTeamResponseIssue(DUPLICATED_ISSUE_WITH_EMPTY_DESCRIPTION_HIGH_SEVERITY, dummyTeam);"},{"lineNumber":31,"author":{"gitId":"kkangs0226"},"content":"    duplicatedIssue.duplicateOf \u003d highSeverityDocumentationBugIssue.id;"},{"lineNumber":32,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":33,"author":{"gitId":"kkangs0226"},"content":"    const issuesList: Issue[] \u003d ["},{"lineNumber":34,"author":{"gitId":"kkangs0226"},"content":"      mediumSeverityIssueWithResponse,"},{"lineNumber":35,"author":{"gitId":"kkangs0226"},"content":"      mediumSeverityIssueWithAssigneee,"},{"lineNumber":36,"author":{"gitId":"kkangs0226"},"content":"      lowSeverityFeatureFlawIssue,"},{"lineNumber":37,"author":{"gitId":"kkangs0226"},"content":"      highSeverityDocumentationBugIssue"},{"lineNumber":38,"author":{"gitId":"kkangs0226"},"content":"    ];"},{"lineNumber":39,"author":{"gitId":"kkangs0226"},"content":"    const displayedColumns: string[] \u003d ["},{"lineNumber":40,"author":{"gitId":"kkangs0226"},"content":"      TABLE_COLUMNS.ID,"},{"lineNumber":41,"author":{"gitId":"kkangs0226"},"content":"      TABLE_COLUMNS.TITLE,"},{"lineNumber":42,"author":{"gitId":"kkangs0226"},"content":"      TABLE_COLUMNS.TYPE,"},{"lineNumber":43,"author":{"gitId":"kkangs0226"},"content":"      TABLE_COLUMNS.SEVERITY,"},{"lineNumber":44,"author":{"gitId":"kkangs0226"},"content":"      TABLE_COLUMNS.RESPONSE,"},{"lineNumber":45,"author":{"gitId":"kkangs0226"},"content":"      TABLE_COLUMNS.ASSIGNEE,"},{"lineNumber":46,"author":{"gitId":"dingyuchen"},"content":"      TABLE_COLUMNS.DUPLICATED_ISSUES"},{"lineNumber":47,"author":{"gitId":"kkangs0226"},"content":"    ];"},{"lineNumber":48,"author":{"gitId":"dingyuchen"},"content":"    const issueService: IssueService \u003d new IssueService(null, null, null, null, null, null, null);"},{"lineNumber":49,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":50,"author":{"gitId":"kkangs0226"},"content":"    beforeEach(() \u003d\u003e {"},{"lineNumber":51,"author":{"gitId":"kkangs0226"},"content":"      issueService.updateLocalStore(mediumSeverityIssueWithResponse);"},{"lineNumber":52,"author":{"gitId":"kkangs0226"},"content":"      issueService.updateLocalStore(mediumSeverityIssueWithAssigneee);"},{"lineNumber":53,"author":{"gitId":"kkangs0226"},"content":"      issueService.updateLocalStore(lowSeverityFeatureFlawIssue);"},{"lineNumber":54,"author":{"gitId":"kkangs0226"},"content":"      issueService.updateLocalStore(highSeverityDocumentationBugIssue);"},{"lineNumber":55,"author":{"gitId":"kkangs0226"},"content":"      issueService.updateLocalStore(duplicatedIssue);"},{"lineNumber":56,"author":{"gitId":"kkangs0226"},"content":"    });"},{"lineNumber":57,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":58,"author":{"gitId":"kkangs0226"},"content":"    it(\u0027can filter for issues which are assigned to a specific user\u0027, () \u003d\u003e {"},{"lineNumber":59,"author":{"gitId":"kkangs0226"},"content":"      searchKey \u003d USER_ANUBHAV.loginId;"},{"lineNumber":60,"author":{"gitId":"dingyuchen"},"content":"      expect(applySearchFilter(searchKey, displayedColumns, issueService, issuesList)).toEqual([mediumSeverityIssueWithAssigneee]);"},{"lineNumber":61,"author":{"gitId":"kkangs0226"},"content":"    });"},{"lineNumber":62,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":63,"author":{"gitId":"kkangs0226"},"content":"    it(\u0027can filter for an issue by the id of its duplicate issues\u0027, () \u003d\u003e {"},{"lineNumber":64,"author":{"gitId":"kkangs0226"},"content":"      searchKey \u003d duplicatedIssue.id.toString();"},{"lineNumber":65,"author":{"gitId":"dingyuchen"},"content":"      expect(applySearchFilter(searchKey, displayedColumns, issueService, issuesList)).toEqual([highSeverityDocumentationBugIssue]);"},{"lineNumber":66,"author":{"gitId":"kkangs0226"},"content":"    });"},{"lineNumber":67,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":68,"author":{"gitId":"kkangs0226"},"content":"    it(\u0027can filter for issues that contain the search key in any other column\u0027, () \u003d\u003e {"},{"lineNumber":69,"author":{"gitId":"kkangs0226"},"content":"      // Search by id of issue"},{"lineNumber":70,"author":{"gitId":"kkangs0226"},"content":"      searchKey \u003d mediumSeverityIssueWithResponse.id.toString();"},{"lineNumber":71,"author":{"gitId":"dingyuchen"},"content":"      expect(applySearchFilter(searchKey, displayedColumns, issueService, issuesList)).toEqual([mediumSeverityIssueWithResponse]);"},{"lineNumber":72,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":73,"author":{"gitId":"kkangs0226"},"content":"      // Search by title of issue"},{"lineNumber":74,"author":{"gitId":"kkangs0226"},"content":"      searchKey \u003d mediumSeverityIssueWithAssigneee.title;"},{"lineNumber":75,"author":{"gitId":"dingyuchen"},"content":"      expect(applySearchFilter(searchKey, displayedColumns, issueService, issuesList)).toEqual([mediumSeverityIssueWithAssigneee]);"},{"lineNumber":76,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":77,"author":{"gitId":"kkangs0226"},"content":"      // Search by type of issue"},{"lineNumber":78,"author":{"gitId":"kkangs0226"},"content":"      searchKey \u003d highSeverityDocumentationBugIssue.type;"},{"lineNumber":79,"author":{"gitId":"dingyuchen"},"content":"      expect(applySearchFilter(searchKey, displayedColumns, issueService, issuesList)).toEqual([highSeverityDocumentationBugIssue]);"},{"lineNumber":80,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":81,"author":{"gitId":"kkangs0226"},"content":"      // Search by severity of issue"},{"lineNumber":82,"author":{"gitId":"kkangs0226"},"content":"      searchKey \u003d lowSeverityFeatureFlawIssue.severity;"},{"lineNumber":83,"author":{"gitId":"dingyuchen"},"content":"      expect(applySearchFilter(searchKey, displayedColumns, issueService, issuesList)).toEqual([lowSeverityFeatureFlawIssue]);"},{"lineNumber":84,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":85,"author":{"gitId":"kkangs0226"},"content":"      // Search by response of issue"},{"lineNumber":86,"author":{"gitId":"kkangs0226"},"content":"      searchKey \u003d mediumSeverityIssueWithResponse.responseTag;"},{"lineNumber":87,"author":{"gitId":"dingyuchen"},"content":"      expect(applySearchFilter(searchKey, displayedColumns, issueService, issuesList)).toEqual([mediumSeverityIssueWithResponse]);"},{"lineNumber":88,"author":{"gitId":"kkangs0226"},"content":"    });"},{"lineNumber":89,"author":{"gitId":"kkangs0226"},"content":"  });"},{"lineNumber":90,"author":{"gitId":"kkangs0226"},"content":"});"}],"authorContributionMap":{"kkangs0226":69,"dingyuchen":21}},{"path":"tests/app/shared/issue/assignee/assignee.component.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"seanlowjk"},"content":"import { of } from \u0027rxjs\u0027;"},{"lineNumber":2,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":3,"author":{"gitId":"seanlowjk"},"content":"import { DebugElement } from \u0027@angular/core\u0027;"},{"lineNumber":4,"author":{"gitId":"seanlowjk"},"content":"import { ComponentFixture, TestBed, async } from \u0027@angular/core/testing\u0027;"},{"lineNumber":5,"author":{"gitId":"seanlowjk"},"content":"import { FormsModule } from \u0027@angular/forms\u0027;"},{"lineNumber":6,"author":{"gitId":"seanlowjk"},"content":"import { By } from \u0027@angular/platform-browser\u0027;"},{"lineNumber":7,"author":{"gitId":"seanlowjk"},"content":"import { BrowserAnimationsModule } from \u0027@angular/platform-browser/animations\u0027;"},{"lineNumber":8,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":9,"author":{"gitId":"seanlowjk"},"content":"import { PhaseService } from \u0027../../../../../src/app/core/services/phase.service\u0027;"},{"lineNumber":10,"author":{"gitId":"seanlowjk"},"content":"import { User, UserRole } from \u0027../../../../../src/app/core/models/user.model\u0027;"},{"lineNumber":11,"author":{"gitId":"seanlowjk"},"content":"import { AssigneeComponent } from \u0027../../../../../src/app/shared/issue/assignee/assignee.component\u0027;"},{"lineNumber":12,"author":{"gitId":"seanlowjk"},"content":"import { ErrorHandlingService } from \u0027../../../../../src/app/core/services/error-handling.service\u0027;"},{"lineNumber":13,"author":{"gitId":"seanlowjk"},"content":"import { ISSUE_WITH_EMPTY_DESCRIPTION } from \u0027../../../../constants/githubissue.constants\u0027;"},{"lineNumber":14,"author":{"gitId":"seanlowjk"},"content":"import { Issue } from \u0027../../../../../src/app/core/models/issue.model\u0027;"},{"lineNumber":15,"author":{"gitId":"seanlowjk"},"content":"import { IssueService } from \u0027../../../../../src/app/core/services/issue.service\u0027;"},{"lineNumber":16,"author":{"gitId":"seanlowjk"},"content":"import { MaterialModule } from \u0027../../../../../src/app/shared/material.module\u0027;"},{"lineNumber":17,"author":{"gitId":"seanlowjk"},"content":"import { PermissionService } from \u0027../../../../../src/app/core/services/permission.service\u0027;"},{"lineNumber":18,"author":{"gitId":"seanlowjk"},"content":"import { Team } from \u0027../../../../../src/app/core/models/team.model\u0027;"},{"lineNumber":19,"author":{"gitId":"seanlowjk"},"content":"import { UserService } from \u0027../../../../../src/app/core/services/user.service\u0027;"},{"lineNumber":20,"author":{"gitId":"seanlowjk"},"content":"import { Phase } from \u0027../../../../../src/app/core/models/phase.model\u0027;"},{"lineNumber":21,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":22,"author":{"gitId":"seanlowjk"},"content":"describe(\u0027AssigneeComponent\u0027, () \u003d\u003e {"},{"lineNumber":23,"author":{"gitId":"seanlowjk"},"content":"  let component: AssigneeComponent;"},{"lineNumber":24,"author":{"gitId":"seanlowjk"},"content":"  let debugElement: DebugElement;"},{"lineNumber":25,"author":{"gitId":"seanlowjk"},"content":"  let nativeElement: HTMLElement;"},{"lineNumber":26,"author":{"gitId":"seanlowjk"},"content":"  let fixture: ComponentFixture\u003cAssigneeComponent\u003e;"},{"lineNumber":27,"author":{"gitId":"seanlowjk"},"content":"  let dummyIssue: Issue;"},{"lineNumber":28,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":29,"author":{"gitId":"seanlowjk"},"content":"  const testStudent: User \u003d {"},{"lineNumber":30,"author":{"gitId":"seanlowjk"},"content":"    loginId: \u0027testStudent\u0027,"},{"lineNumber":31,"author":{"gitId":"seanlowjk"},"content":"    role: UserRole.Student"},{"lineNumber":32,"author":{"gitId":"seanlowjk"},"content":"  };"},{"lineNumber":33,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":34,"author":{"gitId":"seanlowjk"},"content":"  const testStudent2: User \u003d {"},{"lineNumber":35,"author":{"gitId":"seanlowjk"},"content":"    loginId: \u0027testStudent2\u0027,"},{"lineNumber":36,"author":{"gitId":"seanlowjk"},"content":"    role: UserRole.Student"},{"lineNumber":37,"author":{"gitId":"seanlowjk"},"content":"  };"},{"lineNumber":38,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":39,"author":{"gitId":"seanlowjk"},"content":"  const testStudent3: User \u003d {"},{"lineNumber":40,"author":{"gitId":"seanlowjk"},"content":"    loginId: \u0027testStudent3\u0027,"},{"lineNumber":41,"author":{"gitId":"seanlowjk"},"content":"    role: UserRole.Student"},{"lineNumber":42,"author":{"gitId":"seanlowjk"},"content":"  };"},{"lineNumber":43,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":44,"author":{"gitId":"seanlowjk"},"content":"  const testStudent4: User \u003d {"},{"lineNumber":45,"author":{"gitId":"seanlowjk"},"content":"    loginId: \u0027testStudent4\u0027,"},{"lineNumber":46,"author":{"gitId":"seanlowjk"},"content":"    role: UserRole.Student"},{"lineNumber":47,"author":{"gitId":"seanlowjk"},"content":"  };"},{"lineNumber":48,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":49,"author":{"gitId":"seanlowjk"},"content":"  const dummyTeam: Team \u003d new Team({"},{"lineNumber":50,"author":{"gitId":"seanlowjk"},"content":"    id: \u0027F09-2\u0027,"},{"lineNumber":51,"author":{"gitId":"seanlowjk"},"content":"    teamMembers: [testStudent, testStudent2, testStudent3, testStudent4]"},{"lineNumber":52,"author":{"gitId":"seanlowjk"},"content":"  });"},{"lineNumber":53,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":54,"author":{"gitId":"seanlowjk"},"content":"  const phaseService: any \u003d jasmine.createSpyObj(\u0027PhaseService\u0027, [], { currentPhase: Phase.phaseTeamResponse });"},{"lineNumber":55,"author":{"gitId":"seanlowjk"},"content":"  const issueService: any \u003d jasmine.createSpyObj(\u0027IssueService\u0027, [\u0027getLatestIssue\u0027, \u0027updateIssue\u0027]);"},{"lineNumber":56,"author":{"gitId":"seanlowjk"},"content":"  const permissionsService: any \u003d jasmine.createSpyObj(\u0027PermissionService\u0027, [\u0027isIssueLabelsEditable\u0027]);"},{"lineNumber":57,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":58,"author":{"gitId":"seanlowjk"},"content":"  beforeEach(async(() \u003d\u003e {"},{"lineNumber":59,"author":{"gitId":"seanlowjk"},"content":"    TestBed.configureTestingModule({"},{"lineNumber":60,"author":{"gitId":"dingyuchen"},"content":"      declarations: [AssigneeComponent],"},{"lineNumber":61,"author":{"gitId":"dingyuchen"},"content":"      providers: [IssueService, ErrorHandlingService, PhaseService, PermissionService],"},{"lineNumber":62,"author":{"gitId":"dingyuchen"},"content":"      imports: [FormsModule, MaterialModule, BrowserAnimationsModule]"},{"lineNumber":63,"author":{"gitId":"seanlowjk"},"content":"    })"},{"lineNumber":64,"author":{"gitId":"seanlowjk"},"content":"      .overrideProvider(IssueService, { useValue: issueService })"},{"lineNumber":65,"author":{"gitId":"seanlowjk"},"content":"      .overrideProvider(PhaseService, { useValue: phaseService })"},{"lineNumber":66,"author":{"gitId":"seanlowjk"},"content":"      .overrideProvider(PermissionService, { useValue: permissionsService })"},{"lineNumber":67,"author":{"gitId":"seanlowjk"},"content":"      .compileComponents();"},{"lineNumber":68,"author":{"gitId":"seanlowjk"},"content":"  }));"},{"lineNumber":69,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":70,"author":{"gitId":"seanlowjk"},"content":"  beforeEach(() \u003d\u003e {"},{"lineNumber":71,"author":{"gitId":"seanlowjk"},"content":"    permissionsService.isIssueLabelsEditable.and.callFake(() \u003d\u003e true);"},{"lineNumber":72,"author":{"gitId":"seanlowjk"},"content":"    fixture \u003d TestBed.createComponent(AssigneeComponent);"},{"lineNumber":73,"author":{"gitId":"seanlowjk"},"content":"    component \u003d fixture.componentInstance;"},{"lineNumber":74,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":75,"author":{"gitId":"seanlowjk"},"content":"    dummyIssue \u003d Issue.createPhaseTeamResponseIssue(ISSUE_WITH_EMPTY_DESCRIPTION, dummyTeam);"},{"lineNumber":76,"author":{"gitId":"seanlowjk"},"content":"    component.team \u003d dummyTeam;"},{"lineNumber":77,"author":{"gitId":"seanlowjk"},"content":"    component.issue \u003d dummyIssue;"},{"lineNumber":78,"author":{"gitId":"seanlowjk"},"content":"    fixture.detectChanges();"},{"lineNumber":79,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":80,"author":{"gitId":"seanlowjk"},"content":"    debugElement \u003d fixture.debugElement;"},{"lineNumber":81,"author":{"gitId":"seanlowjk"},"content":"    nativeElement \u003d fixture.nativeElement;"},{"lineNumber":82,"author":{"gitId":"seanlowjk"},"content":"  });"},{"lineNumber":83,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":84,"author":{"gitId":"seanlowjk"},"content":"  it(\u0027should have a placeholder value of - given no assignees\u0027, () \u003d\u003e {"},{"lineNumber":85,"author":{"gitId":"seanlowjk"},"content":"    const matPlaceholderValue: HTMLElement \u003d debugElement.query(By.css(\u0027p\u0027)).nativeElement;"},{"lineNumber":86,"author":{"gitId":"seanlowjk"},"content":"    expect(matPlaceholderValue.innerText).toEqual(\u0027-\u0027); // Placeholder Value"},{"lineNumber":87,"author":{"gitId":"seanlowjk"},"content":"  });"},{"lineNumber":88,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":89,"author":{"gitId":"seanlowjk"},"content":"  it(\u0027should be able to open the assignee selector\u0027, () \u003d\u003e {"},{"lineNumber":90,"author":{"gitId":"seanlowjk"},"content":"    openMatSelect();"},{"lineNumber":91,"author":{"gitId":"seanlowjk"},"content":"    const matOption: HTMLElement \u003d debugElement.query(By.css(\u0027.mat-option\u0027)).nativeElement;"},{"lineNumber":92,"author":{"gitId":"seanlowjk"},"content":"    const inputElement: HTMLElement \u003d debugElement.query(By.css(\u0027.mat-select-panel\u0027)).nativeElement;"},{"lineNumber":93,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":94,"author":{"gitId":"seanlowjk"},"content":"    expect(inputElement.children.length).toBe(dummyTeam.teamMembers.length);"},{"lineNumber":95,"author":{"gitId":"seanlowjk"},"content":"    expect(matOption.attributes.getNamedItem(\u0027aria-selected\u0027).value).toEqual(\u0027false\u0027);"},{"lineNumber":96,"author":{"gitId":"seanlowjk"},"content":"  });"},{"lineNumber":97,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":98,"author":{"gitId":"seanlowjk"},"content":"  it(\u0027should emit an event containing the issue with updated assignees, upon closing the MatSelect\u0027, () \u003d\u003e {"},{"lineNumber":99,"author":{"gitId":"seanlowjk"},"content":"    spyOn(component.issueUpdated, \u0027emit\u0027);"},{"lineNumber":100,"author":{"gitId":"seanlowjk"},"content":"    openMatSelect();"},{"lineNumber":101,"author":{"gitId":"seanlowjk"},"content":"    addAssignee();"},{"lineNumber":102,"author":{"gitId":"seanlowjk"},"content":"    dispatchClosedEvent();"},{"lineNumber":103,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":104,"author":{"gitId":"seanlowjk"},"content":"    expect(component.issueUpdated.emit).toHaveBeenCalledWith(jasmine.objectContaining({ assignees: [testStudent.loginId] }));"},{"lineNumber":105,"author":{"gitId":"seanlowjk"},"content":"  });"},{"lineNumber":106,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":107,"author":{"gitId":"seanlowjk"},"content":"  it(\u0027should show the updated assignees upon receiving an updated issue\u0027, () \u003d\u003e {"},{"lineNumber":108,"author":{"gitId":"seanlowjk"},"content":"    component.issue.assignees \u003d [testStudent.loginId];"},{"lineNumber":109,"author":{"gitId":"seanlowjk"},"content":"    fixture.detectChanges();"},{"lineNumber":110,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":111,"author":{"gitId":"seanlowjk"},"content":"    const matListText: HTMLElement \u003d debugElement.query(By.css(\u0027.mat-list-item-content\u0027)).nativeElement;"},{"lineNumber":112,"author":{"gitId":"seanlowjk"},"content":"    expect(matListText.innerText).toEqual(testStudent.loginId);"},{"lineNumber":113,"author":{"gitId":"seanlowjk"},"content":"  });"},{"lineNumber":114,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":115,"author":{"gitId":"seanlowjk"},"content":"  function openMatSelect(): void {"},{"lineNumber":116,"author":{"gitId":"seanlowjk"},"content":"    const matSelectButton: HTMLElement \u003d nativeElement.querySelector(\u0027button\u0027);"},{"lineNumber":117,"author":{"gitId":"seanlowjk"},"content":"    matSelectButton.click();"},{"lineNumber":118,"author":{"gitId":"seanlowjk"},"content":"    fixture.detectChanges();"},{"lineNumber":119,"author":{"gitId":"seanlowjk"},"content":"  }"},{"lineNumber":120,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":121,"author":{"gitId":"seanlowjk"},"content":"  function addAssignee(): void {"},{"lineNumber":122,"author":{"gitId":"seanlowjk"},"content":"    const matOption: HTMLElement \u003d debugElement.query(By.css(\u0027.mat-option\u0027)).nativeElement;"},{"lineNumber":123,"author":{"gitId":"seanlowjk"},"content":"    matOption.click();"},{"lineNumber":124,"author":{"gitId":"seanlowjk"},"content":"    fixture.detectChanges();"},{"lineNumber":125,"author":{"gitId":"seanlowjk"},"content":"  }"},{"lineNumber":126,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":127,"author":{"gitId":"seanlowjk"},"content":"  function dispatchClosedEvent() {"},{"lineNumber":128,"author":{"gitId":"seanlowjk"},"content":"    const matSelectElement: HTMLElement \u003d debugElement.query(By.css(\u0027.mat-select\u0027)).nativeElement;"},{"lineNumber":129,"author":{"gitId":"seanlowjk"},"content":"    issueService.updateIssue.and.callFake((updatedIssue: Issue) \u003d\u003e of(updatedIssue));"},{"lineNumber":130,"author":{"gitId":"seanlowjk"},"content":"    matSelectElement.dispatchEvent(new Event(\u0027closed\u0027));"},{"lineNumber":131,"author":{"gitId":"seanlowjk"},"content":"    fixture.detectChanges();"},{"lineNumber":132,"author":{"gitId":"seanlowjk"},"content":"  }"},{"lineNumber":133,"author":{"gitId":"seanlowjk"},"content":"});"}],"authorContributionMap":{"dingyuchen":3,"seanlowjk":130}},{"path":"tests/app/shared/issue/description/description.component.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { DescriptionComponent } from \u0027../../../../../src/app/shared/issue/description/description.component\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { FormBuilder, NgForm } from \u0027@angular/forms\u0027;"},{"lineNumber":3,"author":{"gitId":"dingyuchen"},"content":"import { PhaseService } from \u0027../../../../../src/app/core/services/phase.service\u0027;"},{"lineNumber":4,"author":{"gitId":"dingyuchen"},"content":"import { Phase } from \u0027../../../../../src/app/core/models/phase.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { Issue } from \u0027../../../../../src/app/core/models/issue.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { ISSUE_WITH_EMPTY_DESCRIPTION } from \u0027../../../../constants/githubissue.constants\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { of } from \u0027rxjs\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"describe(\u0027DescriptionComponent\u0027, () \u003d\u003e {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  let descriptionComponent: DescriptionComponent;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  let issueService: any;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  let phaseService: PhaseService;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  let formBuilder: FormBuilder;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  let thisIssue: Issue;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  let dialog: any;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  let errorHandlingService: any;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"  beforeEach(() \u003d\u003e {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    formBuilder \u003d new FormBuilder();"},{"lineNumber":20,"author":{"gitId":"seanlowjk"},"content":"    phaseService \u003d new PhaseService(null, null, null, null, null, null);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    phaseService.currentPhase \u003d Phase.phaseTeamResponse;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    dialog \u003d jasmine.createSpyObj(\u0027MatDialog\u0027, [\u0027open\u0027]);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    errorHandlingService \u003d jasmine.createSpyObj(\u0027ErrorHandlingService\u0027, [\u0027handleError\u0027]);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    issueService \u003d jasmine.createSpyObj(\u0027IssueService\u0027, [\u0027getLatestIssue\u0027, \u0027updateIssue\u0027]);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    descriptionComponent \u003d new DescriptionComponent(issueService, formBuilder, errorHandlingService, dialog, phaseService, null);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    thisIssue \u003d Issue.createPhaseBugReportingIssue(ISSUE_WITH_EMPTY_DESCRIPTION);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    descriptionComponent.issue \u003d thisIssue;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"  it(\u0027should be initialised with a FromGroup instance\u0027, () \u003d\u003e {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    descriptionComponent.ngOnInit();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    expect(descriptionComponent.issueDescriptionForm.value).toEqual({ description: \u0027\u0027 });"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"  it(\u0027should update the form value correctly and emit an event when entering edit mode\u0027, () \u003d\u003e {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    const descriptionComponentEditState \u003d spyOn(descriptionComponent.changeEditState, \u0027emit\u0027);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    descriptionComponent.ngOnInit();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    descriptionComponent.changeToEditMode();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    expect(descriptionComponentEditState).toHaveBeenCalledTimes(1);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    expect(descriptionComponent.issueDescriptionForm.value).toEqual({ description: thisIssue.description });"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"  it(\u0027should not have its value updated with issue description is invalid\u0027, () \u003d\u003e {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    descriptionComponent.issue.description \u003d undefined;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    descriptionComponent.ngOnInit();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    descriptionComponent.changeToEditMode();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    expect(descriptionComponent.issueDescriptionForm.value).toEqual({ description: \u0027\u0027 });"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"  it(\u0027should highlight conflicting changes, if the issue description was updated simultaneously by another user\u0027, () \u003d\u003e {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    // Simulation of getting updated issue from Github."},{"lineNumber":55,"author":{"gitId":"-"},"content":"    const updatedIssue \u003d thisIssue.clone(phaseService.currentPhase);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    updatedIssue.description \u003d \u0027Issue description was modified simultaneously on GitHub\u0027;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    issueService.issues \u003d [];"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    issueService.issues[updatedIssue.id] \u003d updatedIssue;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    descriptionComponent.issue \u003d thisIssue;"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    const viewChangesCall \u003d spyOn(descriptionComponent, \u0027viewChanges\u0027);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    const form \u003d new NgForm([], []);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    descriptionComponent.ngOnInit();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    descriptionComponent.changeToEditMode();"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    issueService.getLatestIssue.and.callFake((x: number) \u003d\u003e of(updatedIssue));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    dialog.open.and.callFake((x: any) \u003d\u003e {});"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    errorHandlingService.handleError.and.callFake((x: any) \u003d\u003e {});"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    descriptionComponent.updateDescription(form);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    expect(viewChangesCall).toHaveBeenCalledTimes(1);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    expect(descriptionComponent.conflict.outdatedContent).toEqual(thisIssue.description);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    expect(descriptionComponent.conflict.updatedContent).toEqual(updatedIssue.description);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"  it(\u0027should be configured correctly when description is updated\u0027, () \u003d\u003e {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    const form \u003d new NgForm([], []);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    const formResetForm \u003d spyOn(form, \u0027resetForm\u0027);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    const issueUpdatedEmit \u003d spyOn(descriptionComponent.issueUpdated, \u0027emit\u0027);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    const resetCall \u003d spyOn(descriptionComponent, \u0027resetToDefault\u0027);"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    descriptionComponent.ngOnInit();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    descriptionComponent.changeToEditMode();"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    issueService.getLatestIssue.and.callFake((x: number) \u003d\u003e of(thisIssue));"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    issueService.updateIssue.and.callFake((x: Issue) \u003d\u003e of(x));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    descriptionComponent.updateDescription(form);"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    expect(formResetForm).toHaveBeenCalledTimes(1);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    expect(issueUpdatedEmit).toHaveBeenCalledTimes(1);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    expect(resetCall).toHaveBeenCalledTimes(1);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":94,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"dingyuchen":2,"seanlowjk":1,"-":91}},{"path":"tests/app/shared/issue/label/label.component.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { LabelComponent } from \u0027../../../../../src/app/shared/issue/label/label.component\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { LabelService } from \u0027../../../../../src/app/core/services/label.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { PermissionService } from \u0027../../../../../src/app/core/services/permission.service\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { ISSUE_WITH_EMPTY_DESCRIPTION } from \u0027../../../../constants/githubissue.constants\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { Issue } from \u0027../../../../../src/app/core/models/issue.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { SEVERITY_LABELS, COLOR_SEVERITY_LOW, SEVERITY, COLOR_SEVERITY_HIGH, SEVERITY_HIGH } from \u0027../../../../constants/label.constants\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { of } from \u0027rxjs\u0027;"},{"lineNumber":8,"author":{"gitId":"dingyuchen"},"content":"import { PhaseService } from \u0027../../../../../src/app/core/services/phase.service\u0027;"},{"lineNumber":9,"author":{"gitId":"dingyuchen"},"content":"import { Phase } from \u0027../../../../../src/app/core/models/phase.model\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"describe(\u0027LabelComponent\u0027, () \u003d\u003e {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  let labelComponent: any;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  let issueService: any;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  let labelService: any;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  let phaseService: any;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  let thisIssue: Issue;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  let issueUpdatedEmit: any;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"  beforeEach(() \u003d\u003e {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    labelService \u003d jasmine.createSpyObj(LabelService, [\u0027getLabelList\u0027, \u0027getColorOfLabel\u0027]);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    issueService \u003d jasmine.createSpyObj(\u0027IssueService\u0027, [\u0027updateIssue\u0027]);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    phaseService \u003d jasmine.createSpyObj(PhaseService, [\u0027currentPhase\u0027]);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    labelComponent \u003d new LabelComponent(issueService, null, null, phaseService, labelService, null);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    thisIssue \u003d Issue.createPhaseBugReportingIssue(ISSUE_WITH_EMPTY_DESCRIPTION);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    labelComponent.issue \u003d thisIssue;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    labelComponent.attributeName \u003d SEVERITY;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    issueUpdatedEmit \u003d spyOn(labelComponent.issueUpdated, \u0027emit\u0027);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"  it(\u0027should be initialised with a list of label values and a labelColor\u0027, () \u003d\u003e {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    labelService.getLabelList.and.returnValue(SEVERITY_LABELS);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    labelService.getColorOfLabel.and.returnValue(COLOR_SEVERITY_LOW);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    labelComponent.ngOnInit();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    labelComponent.ngOnChanges();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    expect(labelComponent.labelValues).toEqual(SEVERITY_LABELS);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    expect(labelComponent.labelColor).toEqual(COLOR_SEVERITY_LOW);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"  it(\u0027should change label color when updateLabel is called\u0027, () \u003d\u003e {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    labelService.getLabelList.and.returnValue(SEVERITY_LABELS);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    labelService.getColorOfLabel.and.returnValue(COLOR_SEVERITY_LOW);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    labelComponent.ngOnInit();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    labelComponent.ngOnChanges();"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    labelService.getColorOfLabel.and.returnValue(COLOR_SEVERITY_HIGH);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    phaseService.currentPhase.and.returnValue(Phase.phaseBugReporting);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    issueService.updateIssue.and.callFake((x: Issue) \u003d\u003e of(x));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    labelComponent.updateLabel(SEVERITY_HIGH);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    expect(issueUpdatedEmit).toHaveBeenCalledTimes(1);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    expect(labelComponent.labelValues).toEqual(SEVERITY_LABELS);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    expect(labelComponent.labelColor).toEqual(COLOR_SEVERITY_HIGH);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":57,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"dingyuchen":2,"-":55}},{"path":"tests/app/shared/issue/title/title.component.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { TitleComponent } from \u0027../../../../../src/app/shared/issue/title/title.component\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { ISSUE_WITH_EMPTY_DESCRIPTION } from \u0027../../../../constants/githubissue.constants\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { Issue } from \u0027../../../../../src/app/core/models/issue.model\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { FormBuilder, NgForm } from \u0027@angular/forms\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { of } from \u0027rxjs\u0027;"},{"lineNumber":6,"author":{"gitId":"dingyuchen"},"content":"import { PhaseService } from \u0027../../../../../src/app/core/services/phase.service\u0027;"},{"lineNumber":7,"author":{"gitId":"dingyuchen"},"content":"import { Phase } from \u0027../../../../../src/app/core/models/phase.model\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"describe(\u0027TitleComponent\u0027, () \u003d\u003e {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  let titleComponent: TitleComponent;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  let issueService: any;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  let thisIssue: Issue;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  let formBuilder: any;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  let phaseService: PhaseService;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"  beforeEach(() \u003d\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    formBuilder \u003d new FormBuilder();"},{"lineNumber":18,"author":{"gitId":"seanlowjk"},"content":"    phaseService \u003d new PhaseService(null, null, null, null, null, null);"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    phaseService.currentPhase \u003d Phase.phaseTeamResponse;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    issueService \u003d jasmine.createSpyObj(\u0027IssueService\u0027, [\u0027updateIssue\u0027]);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    titleComponent \u003d new TitleComponent(issueService, formBuilder, null, null, phaseService);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    thisIssue \u003d Issue.createPhaseBugReportingIssue(ISSUE_WITH_EMPTY_DESCRIPTION);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    titleComponent.issue \u003d thisIssue;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"  it(\u0027should be initialised with an issueTitleForm\u0027, () \u003d\u003e {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    titleComponent.ngOnInit();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    expect(titleComponent.issueTitleForm.value).toEqual({ title: \u0027\u0027 });"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"  it(\u0027should be updated with correct flags and values in editing mode\u0027, () \u003d\u003e {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    titleComponent.ngOnInit();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    titleComponent.changeToEditMode();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    expect(titleComponent.isEditing).toEqual(true);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    expect(titleComponent.issueTitleForm.value).toEqual({ title: thisIssue.title });"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"  it(\u0027should not have its value updated with issue title is invalid\u0027, () \u003d\u003e {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    thisIssue.title \u003d undefined;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    titleComponent.issue \u003d thisIssue;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    titleComponent.ngOnInit();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    titleComponent.changeToEditMode();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    expect(titleComponent.isEditing).toEqual(true);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    expect(titleComponent.issueTitleForm.value).toEqual({ title: \u0027\u0027 });"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"  it(\u0027should be configured correctly when title is updated\u0027, () \u003d\u003e {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    const form \u003d new NgForm([], []);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    const formResetForm \u003d spyOn(form, \u0027resetForm\u0027);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    const titleComponentEmitter \u003d spyOn(titleComponent.issueUpdated, \u0027emit\u0027);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    titleComponent.ngOnInit();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    titleComponent.changeToEditMode();"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    issueService.updateIssue.and.callFake((x: Issue) \u003d\u003e of(x));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    titleComponent.updateTitle(form);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    expect(formResetForm).toHaveBeenCalledTimes(1);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    expect(titleComponentEmitter).toHaveBeenCalledTimes(1);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    expect(titleComponent.isEditing).toEqual(false);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":63,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"dingyuchen":2,"seanlowjk":1,"-":60}},{"path":"tests/app/shared/label-dropdown/label-dropdown.component.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"dingyuchen"},"content":"import {"},{"lineNumber":2,"author":{"gitId":"dingyuchen"},"content":"  LabelDropdownComponent,"},{"lineNumber":3,"author":{"gitId":"dingyuchen"},"content":"  BLACK_TEXT_CLASS,"},{"lineNumber":4,"author":{"gitId":"dingyuchen"},"content":"  WHITE_TEXT_CLASS"},{"lineNumber":5,"author":{"gitId":"dingyuchen"},"content":"} from \u0027../../../../src/app/shared/label-dropdown/label-dropdown.component\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { LabelService } from \u0027../../../../src/app/core/services/label.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { FormGroup, FormBuilder, Validators } from \u0027@angular/forms\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { SEVERITY_LABELS, COLOR_WHITE, SEVERITY } from \u0027../../../constants/label.constants\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"describe(\u0027LabelDropdownComponent\u0027, () \u003d\u003e {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  let labelDropdownComponent: LabelDropdownComponent;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  let labelService: any;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"  beforeEach(() \u003d\u003e {"},{"lineNumber":15,"author":{"gitId":"dingyuchen"},"content":"    labelService \u003d jasmine.createSpyObj(LabelService, [\u0027getLabelList\u0027, \u0027getColorOfLabel\u0027, \u0027isDarkColor\u0027]);"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"dingyuchen"},"content":"    const formGroup: FormGroup \u003d new FormBuilder().group({"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      title: [\u0027\u0027, Validators.required],"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      description: [\u0027No details provided.\u0027],"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      severity: [\u0027\u0027, Validators.required],"},{"lineNumber":21,"author":{"gitId":"dingyuchen"},"content":"      type: [\u0027\u0027, Validators.required]"},{"lineNumber":22,"author":{"gitId":"dingyuchen"},"content":"    });"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    labelDropdownComponent \u003d new LabelDropdownComponent(labelService);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    labelDropdownComponent.dropdownForm \u003d formGroup;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"  it(\u0027should be initialised with a list of labels, an initial colour and a dropdown control\u0027, () \u003d\u003e {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    labelDropdownComponent.attributeName \u003d SEVERITY;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    labelDropdownComponent.initialValue \u003d \u0027\u0027;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    labelService.getLabelList.and.returnValue(SEVERITY_LABELS);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    labelService.getColorOfLabel.and.returnValue(COLOR_WHITE);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    labelDropdownComponent.ngOnInit();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    expect(labelDropdownComponent.labelList).toEqual(SEVERITY_LABELS);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    expect(labelDropdownComponent.selectedColor).toEqual(COLOR_WHITE);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    expect(labelDropdownComponent.dropdownControl).toBeDefined();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"  it(\u0027should set its dropdown text colour based on the darkness of the current colour\u0027, () \u003d\u003e {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    labelService.isDarkColor.and.returnValue(false);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    expect(labelDropdownComponent.dropdownTextColor).toBe(BLACK_TEXT_CLASS);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    labelService.isDarkColor.and.returnValue(true);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    expect(labelDropdownComponent.dropdownTextColor).toBe(WHITE_TEXT_CLASS);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":46,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"dingyuchen":9,"-":37}},{"path":"tests/auto-spy.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"/** Create an object with methods that are autoSpy-ed to use as mock dependency */"},{"lineNumber":2,"author":{"gitId":"-"},"content":"export function autoSpy\u003cT\u003e(obj: new (...args: any[]) \u003d\u003e T): SpyOf\u003cT\u003e {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  const res: SpyOf\u003cT\u003e \u003d {} as any;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"  // turns out that in target:es2015 the methods attached to the prototype are not enumerable so Object.keys returns []."},{"lineNumber":6,"author":{"gitId":"-"},"content":"  // So to workaround that and keep some backwards compatibility - merge with ownPropertyNames - that disregards the enumerable property."},{"lineNumber":7,"author":{"gitId":"-"},"content":"  const keys \u003d [...Object.keys(obj.prototype), ...Object.getOwnPropertyNames(obj.prototype)];"},{"lineNumber":8,"author":{"gitId":"dingyuchen"},"content":"  keys.forEach((key) \u003d\u003e {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    res[key] \u003d jasmine.createSpy(key);"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"  return res;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/** Keeps the types of properties of a type but assigns type of Spy to the methods */"},{"lineNumber":16,"author":{"gitId":"dingyuchen"},"content":"type SpyOf\u003cT\u003e \u003d T \u0026 Partial\u003c{ [k in keyof T]: T[k] extends (...args: any[]) \u003d\u003e any ? jasmine.Spy : T[k] }\u003e;"}],"authorContributionMap":{"dingyuchen":2,"-":14}},{"path":"tests/constants/data.constants.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { DataFile } from \u0027../../src/app/core/models/data-file.model\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { Team } from \u0027../../src/app/core/models/team.model\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { UserRole } from \u0027../../src/app/core/models/user.model\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"dingyuchen"},"content":"export const csvString \u003d"},{"lineNumber":6,"author":{"gitId":"dingyuchen"},"content":"  `"},{"lineNumber":7,"author":{"gitId":"-"},"content":"role,name,team"},{"lineNumber":8,"author":{"gitId":"-"},"content":"student,JunWei96,CS2103T-W12-3"},{"lineNumber":9,"author":{"gitId":"-"},"content":"admin,damithc,"},{"lineNumber":10,"author":{"gitId":"-"},"content":"tutor,anubh-v,CS2103T-W12-3"},{"lineNumber":11,"author":{"gitId":"-"},"content":"admin,geshuming,"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"tutor,jj-lim,CS2103T-W12-3"},{"lineNumber":14,"author":{"gitId":"-"},"content":"tutor,jj-lim,CS2103T-W12-3"},{"lineNumber":15,"author":{"gitId":"-"},"content":"tutor,jj-lim,CS2103T-W12-4"},{"lineNumber":16,"author":{"gitId":"-"},"content":"tutor,q     ,CS2103T-W12-4"},{"lineNumber":17,"author":{"gitId":"-"},"content":"student,003-samuel,CS2103T-W12-3"},{"lineNumber":18,"author":{"gitId":"-"},"content":"student,damithc,CS2103T-W12-3"},{"lineNumber":19,"author":{"gitId":"-"},"content":"student,RonakLakhotia,CS2103T-W12-4"},{"lineNumber":20,"author":{"gitId":"dingyuchen"},"content":"student,ptvrajsk,CS2103T-W12-3` + `                       `;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"// jsonData is a json representation of csvString"},{"lineNumber":23,"author":{"gitId":"-"},"content":"export const jsonData \u003d {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  roles: {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    students: {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      junwei96: \u0027true\u0027,"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      \u0027003-samuel\u0027: \u0027true\u0027,"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      damithc: \u0027true\u0027,"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      ronaklakhotia: \u0027true\u0027,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      ptvrajsk: \u0027true\u0027"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    tutors: { \u0027anubh-v\u0027: \u0027true\u0027, \u0027jj-lim\u0027: \u0027true\u0027, q: \u0027true\u0027 },"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    admins: { damithc: \u0027true\u0027, geshuming: \u0027true\u0027 }"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  \u0027team-structure\u0027: {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \u0027CS2103T-W12-3\u0027: {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      junwei96: \u0027true\u0027,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"      \u0027003-samuel\u0027: \u0027true\u0027,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"      damithc: \u0027true\u0027,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      ptvrajsk: \u0027true\u0027"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \u0027CS2103T-W12-4\u0027: { ronaklakhotia: \u0027true\u0027 }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  \u0027students-allocation\u0027: {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    junwei96: { teamId: \u0027CS2103T-W12-3\u0027 },"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    \u0027003-samuel\u0027: { teamId: \u0027CS2103T-W12-3\u0027 },"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    damithc: { teamId: \u0027CS2103T-W12-3\u0027 },"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    ronaklakhotia: { teamId: \u0027CS2103T-W12-4\u0027 },"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    ptvrajsk: { teamId: \u0027CS2103T-W12-3\u0027 }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  \u0027tutors-allocation\u0027: {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    \u0027anubh-v\u0027: { \u0027CS2103T-W12-3\u0027: \u0027true\u0027 },"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    \u0027jj-lim\u0027: { \u0027CS2103T-W12-3\u0027: \u0027true\u0027, \u0027CS2103T-W12-4\u0027: \u0027true\u0027 },"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    q: { \u0027CS2103T-W12-4\u0027: \u0027true\u0027 }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  \u0027admins-allocation\u0027: { damithc: {}, geshuming: {} }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"};"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"// These are objects representing some users and teams in jsonData"},{"lineNumber":60,"author":{"gitId":"-"},"content":"const TEAM_3 \u003d new Team({"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  id: \u0027CS2103T-W12-3\u0027,"},{"lineNumber":62,"author":{"gitId":"dingyuchen"},"content":"  teamMembers: ["},{"lineNumber":63,"author":{"gitId":"dingyuchen"},"content":"    { loginId: \u0027junwei96\u0027, role: UserRole.Student },"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    { loginId: \u0027003-samuel\u0027, role: UserRole.Student },"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    { loginId: \u0027damithc\u0027, role: UserRole.Student },"},{"lineNumber":66,"author":{"gitId":"dingyuchen"},"content":"    { loginId: \u0027ptvrajsk\u0027, role: UserRole.Student }"},{"lineNumber":67,"author":{"gitId":"dingyuchen"},"content":"  ]"},{"lineNumber":68,"author":{"gitId":"-"},"content":"});"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"kkangs0226"},"content":"export const TEAM_4 \u003d new Team({"},{"lineNumber":71,"author":{"gitId":"-"},"content":"  id: \u0027CS2103T-W12-4\u0027,"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  teamMembers: [{ loginId: \u0027ronaklakhotia\u0027, role: UserRole.Student }]"},{"lineNumber":73,"author":{"gitId":"-"},"content":"});"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"export const USER_JUNWEI \u003d {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"  loginId: \u0027junwei96\u0027,"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  role: UserRole.Student,"},{"lineNumber":78,"author":{"gitId":"-"},"content":"  team: TEAM_3"},{"lineNumber":79,"author":{"gitId":"-"},"content":"};"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"kkangs0226"},"content":"export const USER_ANUBHAV \u003d {"},{"lineNumber":82,"author":{"gitId":"kkangs0226"},"content":"  loginId: \u0027anubh-v\u0027,"},{"lineNumber":83,"author":{"gitId":"kkangs0226"},"content":"  role: UserRole.Student,"},{"lineNumber":84,"author":{"gitId":"kkangs0226"},"content":"  team: TEAM_3"},{"lineNumber":85,"author":{"gitId":"kkangs0226"},"content":"};"},{"lineNumber":86,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"export const USER_Q \u003d {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"  loginId: \u0027q\u0027,"},{"lineNumber":89,"author":{"gitId":"-"},"content":"  role: UserRole.Tutor,"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  allocatedTeams: [TEAM_4]"},{"lineNumber":91,"author":{"gitId":"-"},"content":"};"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"export const USER_SHUMING \u003d {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  loginId: \u0027geshuming\u0027,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  role: UserRole.Admin,"},{"lineNumber":96,"author":{"gitId":"-"},"content":"  allocatedTeams: []"},{"lineNumber":97,"author":{"gitId":"-"},"content":"};"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"export const USER_WITH_TWO_ROLES \u003d {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  loginId: \u0027damithc\u0027,"},{"lineNumber":101,"author":{"gitId":"-"},"content":"  role: UserRole.Admin,"},{"lineNumber":102,"author":{"gitId":"-"},"content":"  allocatedTeams: []"},{"lineNumber":103,"author":{"gitId":"-"},"content":"};"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"export const dataFileTeamStructure: DataFile \u003d {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  teamStructure: new Map\u003cstring, Team\u003e(["},{"lineNumber":107,"author":{"gitId":"dingyuchen"},"content":"    ["},{"lineNumber":108,"author":{"gitId":"dingyuchen"},"content":"      \u0027CS2103T-W12-3\u0027,"},{"lineNumber":109,"author":{"gitId":"dingyuchen"},"content":"      new Team({"},{"lineNumber":110,"author":{"gitId":"dingyuchen"},"content":"        id: \u0027CS2103T-W12-3\u0027,"},{"lineNumber":111,"author":{"gitId":"dingyuchen"},"content":"        teamMembers: ["},{"lineNumber":112,"author":{"gitId":"-"},"content":"          { loginId: \u0027junwei96\u0027, role: UserRole.Student },"},{"lineNumber":113,"author":{"gitId":"-"},"content":"          { loginId: \u0027003-samuel\u0027, role: UserRole.Student },"},{"lineNumber":114,"author":{"gitId":"-"},"content":"          { loginId: \u0027damithc\u0027, role: UserRole.Student },"},{"lineNumber":115,"author":{"gitId":"-"},"content":"          { loginId: \u0027ptvrajsk\u0027, role: UserRole.Student }"},{"lineNumber":116,"author":{"gitId":"dingyuchen"},"content":"        ]"},{"lineNumber":117,"author":{"gitId":"dingyuchen"},"content":"      })"},{"lineNumber":118,"author":{"gitId":"dingyuchen"},"content":"    ],"},{"lineNumber":119,"author":{"gitId":"dingyuchen"},"content":"    [\u0027CS2103T-W12-4\u0027, new Team({ id: \u0027CS2103T-W12-4\u0027, teamMembers: [{ loginId: \u0027ronaklakhotia\u0027, role: UserRole.Student }] })]"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  ])"},{"lineNumber":121,"author":{"gitId":"-"},"content":"};"}],"authorContributionMap":{"kkangs0226":7,"dingyuchen":16,"-":98}},{"path":"tests/constants/githubcomment.constants.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { GithubComment } from \u0027../../src/app/core/models/github/github-comment.model\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"export const EMPTY_TEAM_RESPONSE: GithubComment \u003d {"},{"lineNumber":4,"author":{"gitId":"dingyuchen"},"content":"  body: \"# Team\u0027s Response\\n\" + \u0027\\n\u0027 + \u0027 ## Duplicate status (if any):\\n\u0027 + \u0027--\u0027,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  created_at: \u00272020-02-16T18:31:38Z\u0027,"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  id: 586737495,"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  issue_url: \u0027https://api.github.com/repos/CATcher-org/pe-results/issues/91\u0027,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  updated_at: \u00272020-03-02T12:50:02Z\u0027,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-results/issues/comments/586737495\u0027,"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  user: {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    login: \u0027testathorStudent\u0027,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    id: 46639862,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    avatar_url: \u0027https://avatars3.githubusercontent.com/u/46639862?v\u003d4\u0027,"},{"lineNumber":14,"author":{"gitId":"dingyuchen"},"content":"    url: \u0027https://api.github.com/users/testathorStudent\u0027"},{"lineNumber":15,"author":{"gitId":"dingyuchen"},"content":"  }"},{"lineNumber":16,"author":{"gitId":"-"},"content":"};"},{"lineNumber":17,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":18,"author":{"gitId":"seanlowjk"},"content":"export const PENDING_TUTOR_MODERATION: GithubComment \u003d {"},{"lineNumber":19,"author":{"gitId":"dingyuchen"},"content":"  body:"},{"lineNumber":20,"author":{"gitId":"dingyuchen"},"content":"    \u0027# Tutor Moderation\\n\\n\u0027 +"},{"lineNumber":21,"author":{"gitId":"seanlowjk"},"content":"    \u0027## :question: Issue Type\\n\\n- [x] Done\\n\\ntest\\n\\n-------------------\\n\u0027 +"},{"lineNumber":22,"author":{"gitId":"seanlowjk"},"content":"    \u0027## :question: Issue Severity\\n\\n- [ ] Done\\n\\n\u0027 +"},{"lineNumber":23,"author":{"gitId":"seanlowjk"},"content":"    \u0027[replace this with your explanation]\\n\\n-------------------\\n\u0027 +"},{"lineNumber":24,"author":{"gitId":"seanlowjk"},"content":"    \u0027## :question: Not Related Question\\n\\n- [ ] Done\\n\\n\u0027 +"},{"lineNumber":25,"author":{"gitId":"seanlowjk"},"content":"    \u0027[replace this with your explanation]\\n\\n-------------------\\n\u0027,"},{"lineNumber":26,"author":{"gitId":"seanlowjk"},"content":"  created_at: \u00272020-08-15T06:39:24Z\u0027,"},{"lineNumber":27,"author":{"gitId":"seanlowjk"},"content":"  id: 674357972,"},{"lineNumber":28,"author":{"gitId":"seanlowjk"},"content":"  issue_url: \u0027https://api.github.com/repos/CATcher-org/pe-evaluation/issues/26\u0027,"},{"lineNumber":29,"author":{"gitId":"seanlowjk"},"content":"  updated_at: \u00272020-08-15T06:39:40Z\u0027,"},{"lineNumber":30,"author":{"gitId":"seanlowjk"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-evaluation/issues/comments/674357972\u0027,"},{"lineNumber":31,"author":{"gitId":"seanlowjk"},"content":"  user: {"},{"lineNumber":32,"author":{"gitId":"seanlowjk"},"content":"    login: \u0027testathorTutor\u0027,"},{"lineNumber":33,"author":{"gitId":"seanlowjk"},"content":"    id: 46640218,"},{"lineNumber":34,"author":{"gitId":"seanlowjk"},"content":"    avatar_url: \u0027https://avatars2.githubusercontent.com/u/46640218?v\u003d4\u0027,"},{"lineNumber":35,"author":{"gitId":"dingyuchen"},"content":"    url: \u0027https://api.github.com/users/testathorTutor\u0027"},{"lineNumber":36,"author":{"gitId":"dingyuchen"},"content":"  }"},{"lineNumber":37,"author":{"gitId":"seanlowjk"},"content":"};"}],"authorContributionMap":{"dingyuchen":7,"seanlowjk":17,"-":13}},{"path":"tests/constants/githubissue.constants.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { GithubIssue } from \u0027../../src/app/core/models/github/github-issue.model\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":3,"author":{"gitId":"ptvrajsk"},"content":"  GITHUB_LABEL_DOCUMENTATION_BUG,"},{"lineNumber":4,"author":{"gitId":"ptvrajsk"},"content":"  GITHUB_LABEL_FEATURE_FLAW,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  GITHUB_LABEL_FUNCTIONALITY_BUG,"},{"lineNumber":6,"author":{"gitId":"ptvrajsk"},"content":"  GITHUB_LABEL_HIGH_SEVERITY,"},{"lineNumber":7,"author":{"gitId":"ptvrajsk"},"content":"  GITHUB_LABEL_LOW_SEVERITY,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  GITHUB_LABEL_MEDIUM_SEVERITY,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  GITHUB_LABEL_TEAM_LABEL,"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  GITHUB_LABEL_TUTORIAL_LABEL"},{"lineNumber":11,"author":{"gitId":"ptvrajsk"},"content":"} from \u0027./githublabel.constants\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { IssueState } from \u0027../../graphql/graphql-types\u0027;"},{"lineNumber":13,"author":{"gitId":"seanlowjk"},"content":"import { EMPTY_TEAM_RESPONSE, PENDING_TUTOR_MODERATION } from \u0027./githubcomment.constants\u0027;"},{"lineNumber":14,"author":{"gitId":"ptvrajsk"},"content":"import { GithubLabel } from \u0027../../src/app/core/models/github/github-label.model\u0027;"},{"lineNumber":15,"author":{"gitId":"kkangs0226"},"content":"import { USER_ANUBHAV } from \u0027./data.constants\u0027;"},{"lineNumber":16,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":17,"author":{"gitId":"ptvrajsk"},"content":"const randomId: () \u003d\u003e string \u003d () \u003d\u003e {"},{"lineNumber":18,"author":{"gitId":"ptvrajsk"},"content":"  return Math.floor(Math.random() * 1000000000).toString();"},{"lineNumber":19,"author":{"gitId":"ptvrajsk"},"content":"};"},{"lineNumber":20,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":21,"author":{"gitId":"ptvrajsk"},"content":"const randomIssueNumber: () \u003d\u003e number \u003d () \u003d\u003e {"},{"lineNumber":22,"author":{"gitId":"ptvrajsk"},"content":"  return Math.round(Math.random() * 1000);"},{"lineNumber":23,"author":{"gitId":"ptvrajsk"},"content":"};"},{"lineNumber":24,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":25,"author":{"gitId":"dingyuchen"},"content":"const randomISODate: (startDate?: Date, endDate?: Date) \u003d\u003e string \u003d ("},{"lineNumber":26,"author":{"gitId":"dingyuchen"},"content":"  startDate: Date \u003d new Date(2020, 1, 1),"},{"lineNumber":27,"author":{"gitId":"dingyuchen"},"content":"  endDate: Date \u003d new Date()"},{"lineNumber":28,"author":{"gitId":"dingyuchen"},"content":") \u003d\u003e {"},{"lineNumber":29,"author":{"gitId":"ptvrajsk"},"content":"  return new Date(startDate.getTime() + Math.random() * (startDate.getTime() - endDate.getTime())).toISOString();"},{"lineNumber":30,"author":{"gitId":"ptvrajsk"},"content":"};"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"export const ISSUE_WITH_EMPTY_DESCRIPTION \u003d new GithubIssue({"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  id: \u0027574085971\u0027,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  number: 92,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  assignees: [],"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  comments: [],"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  body: \u0027\u0027,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  created_at: \u00272020-03-02T16:19:02Z\u0027,"},{"lineNumber":39,"author":{"gitId":"dingyuchen"},"content":"  labels: [GITHUB_LABEL_TEAM_LABEL, GITHUB_LABEL_TUTORIAL_LABEL, GITHUB_LABEL_FUNCTIONALITY_BUG, GITHUB_LABEL_MEDIUM_SEVERITY],"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  state: IssueState.Open,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  title: \u0027App starts to lag when given large amount of input\u0027,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  updated_at: \u00272020-03-13T13:37:32Z\u0027,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-results/issues/92\u0027,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  user: {"},{"lineNumber":45,"author":{"gitId":"kkangs0226"},"content":"    login: USER_ANUBHAV.loginId,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    avatar_url: \u0027https://avatars1.githubusercontent.com/u/35621759?v\u003d4\u0027,"},{"lineNumber":47,"author":{"gitId":"dingyuchen"},"content":"    url: \u0027https://api.github.com/users/anubh-v\u0027"},{"lineNumber":48,"author":{"gitId":"dingyuchen"},"content":"  }"},{"lineNumber":49,"author":{"gitId":"kkangs0226"},"content":"});"},{"lineNumber":50,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":51,"author":{"gitId":"kkangs0226"},"content":"export const ISSUE_WITH_EMPTY_DESCRIPTION_LOW_SEVERITY \u003d new GithubIssue({"},{"lineNumber":52,"author":{"gitId":"kkangs0226"},"content":"  id: \u0027384830567\u0027,"},{"lineNumber":53,"author":{"gitId":"kkangs0226"},"content":"  number: 130,"},{"lineNumber":54,"author":{"gitId":"kkangs0226"},"content":"  assignees: [],"},{"lineNumber":55,"author":{"gitId":"kkangs0226"},"content":"  comments: [],"},{"lineNumber":56,"author":{"gitId":"kkangs0226"},"content":"  body: \u0027\u0027,"},{"lineNumber":57,"author":{"gitId":"kkangs0226"},"content":"  created_at: \u00272020-03-02T16:19:02Z\u0027,"},{"lineNumber":58,"author":{"gitId":"dingyuchen"},"content":"  labels: [GITHUB_LABEL_TEAM_LABEL, GITHUB_LABEL_TUTORIAL_LABEL, GITHUB_LABEL_FEATURE_FLAW, GITHUB_LABEL_LOW_SEVERITY],"},{"lineNumber":59,"author":{"gitId":"kkangs0226"},"content":"  state: IssueState.Open,"},{"lineNumber":60,"author":{"gitId":"kkangs0226"},"content":"  title: \u0027App is sometimes slow\u0027,"},{"lineNumber":61,"author":{"gitId":"kkangs0226"},"content":"  updated_at: \u00272020-03-13T13:37:32Z\u0027,"},{"lineNumber":62,"author":{"gitId":"kkangs0226"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-results/issues/130\u0027,"},{"lineNumber":63,"author":{"gitId":"kkangs0226"},"content":"  user: {"},{"lineNumber":64,"author":{"gitId":"kkangs0226"},"content":"    login: USER_ANUBHAV.loginId,"},{"lineNumber":65,"author":{"gitId":"kkangs0226"},"content":"    avatar_url: \u0027https://avatars1.githubusercontent.com/u/35621759?v\u003d4\u0027,"},{"lineNumber":66,"author":{"gitId":"dingyuchen"},"content":"    url: \u0027https://api.github.com/users/anubh-v\u0027"},{"lineNumber":67,"author":{"gitId":"dingyuchen"},"content":"  }"},{"lineNumber":68,"author":{"gitId":"kkangs0226"},"content":"});"},{"lineNumber":69,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":70,"author":{"gitId":"kkangs0226"},"content":"export const ISSUE_WITH_EMPTY_DESCRIPTION_HIGH_SEVERITY \u003d new GithubIssue({"},{"lineNumber":71,"author":{"gitId":"kkangs0226"},"content":"  id: \u0027573957398\u0027,"},{"lineNumber":72,"author":{"gitId":"kkangs0226"},"content":"  number: 32,"},{"lineNumber":73,"author":{"gitId":"kkangs0226"},"content":"  assignees: [],"},{"lineNumber":74,"author":{"gitId":"kkangs0226"},"content":"  comments: [],"},{"lineNumber":75,"author":{"gitId":"kkangs0226"},"content":"  body: \u0027\u0027,"},{"lineNumber":76,"author":{"gitId":"kkangs0226"},"content":"  created_at: \u00272010-03-12T19:12:02Z\u0027,"},{"lineNumber":77,"author":{"gitId":"dingyuchen"},"content":"  labels: [GITHUB_LABEL_TEAM_LABEL, GITHUB_LABEL_TUTORIAL_LABEL, GITHUB_LABEL_DOCUMENTATION_BUG, GITHUB_LABEL_HIGH_SEVERITY],"},{"lineNumber":78,"author":{"gitId":"kkangs0226"},"content":"  state: IssueState.Open,"},{"lineNumber":79,"author":{"gitId":"kkangs0226"},"content":"  title: \u0027Too many typos\u0027,"},{"lineNumber":80,"author":{"gitId":"kkangs0226"},"content":"  updated_at: \u00272012-03-12T19:12:02Z\u0027,"},{"lineNumber":81,"author":{"gitId":"kkangs0226"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-results/issues/130\u0027,"},{"lineNumber":82,"author":{"gitId":"kkangs0226"},"content":"  user: {"},{"lineNumber":83,"author":{"gitId":"kkangs0226"},"content":"    login: USER_ANUBHAV.loginId,"},{"lineNumber":84,"author":{"gitId":"kkangs0226"},"content":"    avatar_url: \u0027https://avatars1.githubusercontent.com/u/35621759?v\u003d4\u0027,"},{"lineNumber":85,"author":{"gitId":"dingyuchen"},"content":"    url: \u0027https://api.github.com/users/anubh-v\u0027"},{"lineNumber":86,"author":{"gitId":"dingyuchen"},"content":"  }"},{"lineNumber":87,"author":{"gitId":"kkangs0226"},"content":"});"},{"lineNumber":88,"author":{"gitId":"kkangs0226"},"content":""},{"lineNumber":89,"author":{"gitId":"kkangs0226"},"content":"export const DUPLICATED_ISSUE_WITH_EMPTY_DESCRIPTION_HIGH_SEVERITY \u003d new GithubIssue({"},{"lineNumber":90,"author":{"gitId":"kkangs0226"},"content":"  id: \u0027573957399\u0027,"},{"lineNumber":91,"author":{"gitId":"kkangs0226"},"content":"  number: 33,"},{"lineNumber":92,"author":{"gitId":"kkangs0226"},"content":"  assignees: [],"},{"lineNumber":93,"author":{"gitId":"kkangs0226"},"content":"  comments: [],"},{"lineNumber":94,"author":{"gitId":"kkangs0226"},"content":"  body: \u0027\u0027,"},{"lineNumber":95,"author":{"gitId":"kkangs0226"},"content":"  created_at: \u00272010-04-12T19:12:02Z\u0027,"},{"lineNumber":96,"author":{"gitId":"dingyuchen"},"content":"  labels: [GITHUB_LABEL_TEAM_LABEL, GITHUB_LABEL_TUTORIAL_LABEL, GITHUB_LABEL_DOCUMENTATION_BUG, GITHUB_LABEL_HIGH_SEVERITY],"},{"lineNumber":97,"author":{"gitId":"kkangs0226"},"content":"  state: IssueState.Open,"},{"lineNumber":98,"author":{"gitId":"kkangs0226"},"content":"  title: \u0027Too many typos 2\u0027,"},{"lineNumber":99,"author":{"gitId":"kkangs0226"},"content":"  updated_at: \u00272012-04-12T19:12:02Z\u0027,"},{"lineNumber":100,"author":{"gitId":"kkangs0226"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-results/issues/130\u0027,"},{"lineNumber":101,"author":{"gitId":"kkangs0226"},"content":"  user: {"},{"lineNumber":102,"author":{"gitId":"kkangs0226"},"content":"    login: USER_ANUBHAV.loginId,"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    avatar_url: \u0027https://avatars1.githubusercontent.com/u/35621759?v\u003d4\u0027,"},{"lineNumber":104,"author":{"gitId":"dingyuchen"},"content":"    url: \u0027https://api.github.com/users/anubh-v\u0027"},{"lineNumber":105,"author":{"gitId":"dingyuchen"},"content":"  }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"});"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"export const ISSUE_WITH_ASSIGNEES \u003d new GithubIssue({"},{"lineNumber":109,"author":{"gitId":"-"},"content":"  id: \u0027551732011\u0027,"},{"lineNumber":110,"author":{"gitId":"-"},"content":"  number: 91,"},{"lineNumber":111,"author":{"gitId":"-"},"content":"  assignees: ["},{"lineNumber":112,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":113,"author":{"gitId":"kkangs0226"},"content":"      login: USER_ANUBHAV.loginId,"},{"lineNumber":114,"author":{"gitId":"-"},"content":"      id: 35621759,"},{"lineNumber":115,"author":{"gitId":"dingyuchen"},"content":"      url: \u0027https://api.github.com/users/anubh-v\u0027"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":"  ],"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  body: \u0027Screen freezes every few minutes\u0027,"},{"lineNumber":119,"author":{"gitId":"-"},"content":"  created_at: \u00272020-01-18T07:01:45Z\u0027,"},{"lineNumber":120,"author":{"gitId":"dingyuchen"},"content":"  labels: [GITHUB_LABEL_TEAM_LABEL, GITHUB_LABEL_TUTORIAL_LABEL, GITHUB_LABEL_FUNCTIONALITY_BUG, GITHUB_LABEL_MEDIUM_SEVERITY],"},{"lineNumber":121,"author":{"gitId":"-"},"content":"  state: IssueState.Open,"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  title: \u0027Screen freezes\u0027,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"  updated_at: \u00272020-03-02T12:50:02Z\u0027,"},{"lineNumber":124,"author":{"gitId":"-"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-results/issues/91\u0027,"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  user: {"},{"lineNumber":126,"author":{"gitId":"kkangs0226"},"content":"    login: USER_ANUBHAV.loginId,"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    avatar_url: \u0027https://avatars1.githubusercontent.com/u/35621759?v\u003d4\u0027,"},{"lineNumber":128,"author":{"gitId":"dingyuchen"},"content":"    url: \u0027https://api.github.com/users/anubh-v\u0027"},{"lineNumber":129,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":130,"author":{"gitId":"dingyuchen"},"content":"  comments: [EMPTY_TEAM_RESPONSE]"},{"lineNumber":131,"author":{"gitId":"-"},"content":"});"},{"lineNumber":132,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":133,"author":{"gitId":"ptvrajsk"},"content":"export const generateIssueWithRandomData: () \u003d\u003e GithubIssue \u003d () \u003d\u003e {"},{"lineNumber":134,"author":{"gitId":"ptvrajsk"},"content":"  const created_and_updated_date: string \u003d randomISODate();"},{"lineNumber":135,"author":{"gitId":"ptvrajsk"},"content":"  const issueNumber: number \u003d randomIssueNumber();"},{"lineNumber":136,"author":{"gitId":"ptvrajsk"},"content":"  const severityLabels: GithubLabel[] \u003d [GITHUB_LABEL_LOW_SEVERITY, GITHUB_LABEL_MEDIUM_SEVERITY, GITHUB_LABEL_HIGH_SEVERITY];"},{"lineNumber":137,"author":{"gitId":"ptvrajsk"},"content":"  const typeLabels: GithubLabel[] \u003d [GITHUB_LABEL_FUNCTIONALITY_BUG, GITHUB_LABEL_FEATURE_FLAW, GITHUB_LABEL_DOCUMENTATION_BUG];"},{"lineNumber":138,"author":{"gitId":"ptvrajsk"},"content":"  return new GithubIssue({"},{"lineNumber":139,"author":{"gitId":"ptvrajsk"},"content":"    id: randomId(),"},{"lineNumber":140,"author":{"gitId":"ptvrajsk"},"content":"    number: issueNumber,"},{"lineNumber":141,"author":{"gitId":"ptvrajsk"},"content":"    assignees: [],"},{"lineNumber":142,"author":{"gitId":"ptvrajsk"},"content":"    comments: [],"},{"lineNumber":143,"author":{"gitId":"ptvrajsk"},"content":"    body: `Issue No.: ${issueNumber}\\nSample Content.`,"},{"lineNumber":144,"author":{"gitId":"ptvrajsk"},"content":"    created_at: created_and_updated_date,"},{"lineNumber":145,"author":{"gitId":"dingyuchen"},"content":"    labels: [GITHUB_LABEL_TEAM_LABEL, GITHUB_LABEL_TUTORIAL_LABEL, typeLabels[issueNumber % 3], severityLabels[issueNumber % 3]],"},{"lineNumber":146,"author":{"gitId":"ptvrajsk"},"content":"    state: IssueState.Open,"},{"lineNumber":147,"author":{"gitId":"ptvrajsk"},"content":"    title: `Random Issue: ${issueNumber}`,"},{"lineNumber":148,"author":{"gitId":"ptvrajsk"},"content":"    updated_at: created_and_updated_date,"},{"lineNumber":149,"author":{"gitId":"ptvrajsk"},"content":"    url: `https://api.github.com/repos/CATcher-org/pe-results/issues/${issueNumber}`,"},{"lineNumber":150,"author":{"gitId":"ptvrajsk"},"content":"    user: {"},{"lineNumber":151,"author":{"gitId":"kkangs0226"},"content":"      login: USER_ANUBHAV.loginId,"},{"lineNumber":152,"author":{"gitId":"ptvrajsk"},"content":"      avatar_url: \u0027https://avatars1.githubusercontent.com/u/35621759?v\u003d4\u0027,"},{"lineNumber":153,"author":{"gitId":"dingyuchen"},"content":"      url: \u0027https://api.github.com/users/anubh-v\u0027"},{"lineNumber":154,"author":{"gitId":"dingyuchen"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"ptvrajsk"},"content":"  });"},{"lineNumber":156,"author":{"gitId":"ptvrajsk"},"content":"};"},{"lineNumber":157,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":158,"author":{"gitId":"seanlowjk"},"content":"export const ISSUE_PENDING_MODERATION \u003d new GithubIssue({"},{"lineNumber":159,"author":{"gitId":"seanlowjk"},"content":"  id: \u0027574674360\u0027,"},{"lineNumber":160,"author":{"gitId":"seanlowjk"},"content":"  number: 26,"},{"lineNumber":161,"author":{"gitId":"seanlowjk"},"content":"  assignees: ["},{"lineNumber":162,"author":{"gitId":"seanlowjk"},"content":"    {"},{"lineNumber":163,"author":{"gitId":"seanlowjk"},"content":"      login: \u0027geshuming\u0027,"},{"lineNumber":164,"author":{"gitId":"seanlowjk"},"content":"      id: 43642522,"},{"lineNumber":165,"author":{"gitId":"dingyuchen"},"content":"      url: \u0027https://api.github.com/users/geshuming\u0027"},{"lineNumber":166,"author":{"gitId":"seanlowjk"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"seanlowjk"},"content":"  ],"},{"lineNumber":168,"author":{"gitId":"dingyuchen"},"content":"  body:"},{"lineNumber":169,"author":{"gitId":"dingyuchen"},"content":"    \u0027# Issue Description\\n{original issue description}\\n\u0027 +"},{"lineNumber":170,"author":{"gitId":"dingyuchen"},"content":"    \"# Team\u0027s Response\\n{team\u0027s response}\\n # Disputes\\n\\n\" +"},{"lineNumber":171,"author":{"gitId":"dingyuchen"},"content":"    \"## :question: Issue Type\\n\\n### Team says:\\r\\n{the team\u0027s action that is being disputed}\\r\\n\\r\\n\" +"},{"lineNumber":172,"author":{"gitId":"dingyuchen"},"content":"    \"### Tester says:\\r\\n{tester\u0027s objection}\\n\\n-------------------\\n## :question: Issue Severity\\n\\n\" +"},{"lineNumber":173,"author":{"gitId":"dingyuchen"},"content":"    \"### Team says:\\r\\n{the team\u0027s action that is being disputed}\\r\\n\\r\\n\" +"},{"lineNumber":174,"author":{"gitId":"dingyuchen"},"content":"    \"### Tester says:\\r\\n{tester\u0027s objection}\\n\\n-------------------\\n## :question: Not Related Question\\n\\n\" +"},{"lineNumber":175,"author":{"gitId":"dingyuchen"},"content":"    \"### Team says:\\r\\n{the team\u0027s action that is being disputed}\\r\\n\\r\\n\" +"},{"lineNumber":176,"author":{"gitId":"dingyuchen"},"content":"    \"### Tester says:\\r\\n{tester\u0027s objection}\\n\\n-------------------\\n\\n\","},{"lineNumber":177,"author":{"gitId":"seanlowjk"},"content":"  created_at: \u00272020-03-03T13:38:32Z\u0027,"},{"lineNumber":178,"author":{"gitId":"dingyuchen"},"content":"  labels: [GITHUB_LABEL_TEAM_LABEL, GITHUB_LABEL_TUTORIAL_LABEL, GITHUB_LABEL_FUNCTIONALITY_BUG, GITHUB_LABEL_MEDIUM_SEVERITY],"},{"lineNumber":179,"author":{"gitId":"seanlowjk"},"content":"  state: IssueState.Open,"},{"lineNumber":180,"author":{"gitId":"seanlowjk"},"content":"  title: \u0027Basic Issue, Three Disputes, Unsure\u0027,"},{"lineNumber":181,"author":{"gitId":"seanlowjk"},"content":"  updated_at: \u00272020-08-15T06:39:40Z\u0027,"},{"lineNumber":182,"author":{"gitId":"seanlowjk"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-results/issues/26\u0027,"},{"lineNumber":183,"author":{"gitId":"seanlowjk"},"content":"  user: {"},{"lineNumber":184,"author":{"gitId":"seanlowjk"},"content":"    login: \u0027geshuming\u0027,"},{"lineNumber":185,"author":{"gitId":"seanlowjk"},"content":"    avatar_url: \u0027https://avatars0.githubusercontent.com/u/43642522?v\u003d4\u0027,"},{"lineNumber":186,"author":{"gitId":"dingyuchen"},"content":"    url: \u0027https://api.github.com/users/geshuming\u0027"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":188,"author":{"gitId":"dingyuchen"},"content":"  comments: [PENDING_TUTOR_MODERATION]"},{"lineNumber":189,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"kkangs0226":52,"dingyuchen":36,"ptvrajsk":38,"seanlowjk":19,"-":44}},{"path":"tests/constants/githublabel.constants.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { GithubLabel } from \u0027../../src/app/core/models/github/github-label.model\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"export const GITHUB_LABEL_FUNCTIONALITY_BUG \u003d {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  color: \u00279900cc\u0027,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  name: \u0027type.FunctionalityBug\u0027,"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  id: 1226647550,"},{"lineNumber":7,"author":{"gitId":"dingyuchen"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-results/labels/type.FunctionalityBug\u0027"},{"lineNumber":8,"author":{"gitId":"-"},"content":"} as GithubLabel;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"ptvrajsk"},"content":"export const GITHUB_LABEL_FEATURE_FLAW \u003d {"},{"lineNumber":11,"author":{"gitId":"ptvrajsk"},"content":"  id: 1462485994,"},{"lineNumber":12,"author":{"gitId":"ptvrajsk"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-results/labels/type.FeatureFlaw\u0027,"},{"lineNumber":13,"author":{"gitId":"ptvrajsk"},"content":"  name: \u0027type.FeatureFlaw\u0027,"},{"lineNumber":14,"author":{"gitId":"dingyuchen"},"content":"  color: \u0027d966ff\u0027"},{"lineNumber":15,"author":{"gitId":"ptvrajsk"},"content":"} as GithubLabel;"},{"lineNumber":16,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":17,"author":{"gitId":"ptvrajsk"},"content":"export const GITHUB_LABEL_DOCUMENTATION_BUG \u003d {"},{"lineNumber":18,"author":{"gitId":"ptvrajsk"},"content":"  id: 1226647431,"},{"lineNumber":19,"author":{"gitId":"ptvrajsk"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-results/labels/type.DocumentationBug\u0027,"},{"lineNumber":20,"author":{"gitId":"ptvrajsk"},"content":"  name: \u0027type.DocumentationBug\u0027,"},{"lineNumber":21,"author":{"gitId":"dingyuchen"},"content":"  color: \u0027d966ff\u0027"},{"lineNumber":22,"author":{"gitId":"ptvrajsk"},"content":"} as GithubLabel;"},{"lineNumber":23,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":24,"author":{"gitId":"ptvrajsk"},"content":"export const GITHUB_LABEL_LOW_SEVERITY \u003d {"},{"lineNumber":25,"author":{"gitId":"ptvrajsk"},"content":"  id: 1226646828,"},{"lineNumber":26,"author":{"gitId":"ptvrajsk"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-results/labels/severity.Low\u0027,"},{"lineNumber":27,"author":{"gitId":"ptvrajsk"},"content":"  name: \u0027severity.Low\u0027,"},{"lineNumber":28,"author":{"gitId":"dingyuchen"},"content":"  color: \u0027ffcccc\u0027"},{"lineNumber":29,"author":{"gitId":"ptvrajsk"},"content":"} as GithubLabel;"},{"lineNumber":30,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":31,"author":{"gitId":"ptvrajsk"},"content":"export const GITHUB_LABEL_HIGH_SEVERITY \u003d {"},{"lineNumber":32,"author":{"gitId":"ptvrajsk"},"content":"  id: 1226646649,"},{"lineNumber":33,"author":{"gitId":"ptvrajsk"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-results/labels/severity.High\u0027,"},{"lineNumber":34,"author":{"gitId":"ptvrajsk"},"content":"  name: \u0027severity.High\u0027,"},{"lineNumber":35,"author":{"gitId":"dingyuchen"},"content":"  color: \u0027ff6666\u0027"},{"lineNumber":36,"author":{"gitId":"ptvrajsk"},"content":"} as GithubLabel;"},{"lineNumber":37,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"export const GITHUB_LABEL_MEDIUM_SEVERITY \u003d {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  color: \u0027ff9999\u0027,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  name: \u0027severity.Medium\u0027,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  id: 1226647149,"},{"lineNumber":42,"author":{"gitId":"dingyuchen"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-results/labels/severity.Medium\u0027"},{"lineNumber":43,"author":{"gitId":"-"},"content":"} as GithubLabel;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"export const GITHUB_LABEL_TUTORIAL_LABEL \u003d {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-results/labels/tutorial.CS2103T-W12\u0027,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  name: \u0027tutorial.CS2103T-W12\u0027,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  color: \u0027c2e0c6\u0027,"},{"lineNumber":49,"author":{"gitId":"dingyuchen"},"content":"  id: 1226649736"},{"lineNumber":50,"author":{"gitId":"-"},"content":"} as GithubLabel;"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"export const GITHUB_LABEL_TEAM_LABEL \u003d {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  id: 1226649835,"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-results/labels/team.3\u0027,"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  name: \u0027team.3\u0027,"},{"lineNumber":56,"author":{"gitId":"dingyuchen"},"content":"  color: \u0027d4c5f9\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"} as GithubLabel;"}],"authorContributionMap":{"dingyuchen":8,"ptvrajsk":24,"-":25}},{"path":"tests/constants/label.constants.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Label } from \u0027../../src/app/core/models/label.model\u0027;"},{"lineNumber":2,"author":{"gitId":"seanlowjk"},"content":"import { LabelService } from \u0027../../src/app/core/services/label.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"// Label name constants"},{"lineNumber":5,"author":{"gitId":"-"},"content":"export const SEVERITY_LOW \u003d \u0027Low\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"export const SEVERITY_MEDIUM \u003d \u0027Medium\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"export const SEVERITY_HIGH \u003d \u0027High\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"export const TYPE_DOCUMENTATION_BUG \u003d \u0027DocumentationBug\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"export const TYPE_FUNCTIONALITY_BUG \u003d \u0027FunctionalityBug\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"export const RESPONSE_ACCEPTED \u003d \u0027Accepted\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"export const RESPONSE_REJECTED \u003d \u0027Rejected\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"export const RESPONSE_ISSUE_UNCLEAR \u003d \u0027IssueUnclear\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"export const RESPONSE_CANNOT_REPRODUCE \u003d \u0027CannotReproduce\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"export const STATUS_DONE \u003d \u0027Done\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"export const STATUS_INCOMPLETE \u003d \u0027Incomplete\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"// Label category constants"},{"lineNumber":18,"author":{"gitId":"-"},"content":"export const SEVERITY \u003d \u0027severity\u0027;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"export const TYPE \u003d \u0027type\u0027;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"export const RESPONSE \u003d \u0027response\u0027;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"export const STATUS \u003d \u0027status\u0027;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"// Label color constants"},{"lineNumber":24,"author":{"gitId":"-"},"content":"export const COLOR_BLACK \u003d \u0027000000\u0027;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"export const COLOR_WHITE \u003d \u0027FFFFFF\u0027;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"export const COLOR_SEVERITY_LOW \u003d \u0027ffcccc\u0027;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"export const COLOR_SEVERITY_MEDIUM \u003d \u0027ff9999\u0027;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"export const COLOR_SEVERITY_HIGH \u003d \u0027ff6666\u0027;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"export const COLOR_TYPE_DOCUMENTATION_BUG \u003d \u0027d966ff\u0027;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"export const COLOR_TYPE_FUNCTIONALITY_BUG \u003d \u00279900cc\u0027;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"export const COLOR_RESPONSE_ACCEPTED \u003d \u002700802b\u0027;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"export const COLOR_RESPONSE_REJECTED \u003d \u0027ff9900\u0027;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"export const COLOR_RESPONSE_ISSUE_UNCLEAR \u003d \u0027ffcc80\u0027;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"export const COLOR_RESPONSE_CANNOT_REPRODUCE \u003d \u0027ffebcc\u0027;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"export const COLOR_STATUS_DONE \u003d \u0027a6a6a6\u0027;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"export const COLOR_STATUS_INCOMPLETE \u003d \u0027000000\u0027;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"// CSS style constants"},{"lineNumber":39,"author":{"gitId":"-"},"content":"export const DARK_BG_LIGHT_TEXT \u003d {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  \u0027background-color\u0027: `#${COLOR_BLACK}`,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  \u0027border-radius\u0027: \u00273px\u0027,"},{"lineNumber":42,"author":{"gitId":"dingyuchen"},"content":"  cursor: \u0027default\u0027,"},{"lineNumber":43,"author":{"gitId":"dingyuchen"},"content":"  padding: \u00273px\u0027,"},{"lineNumber":44,"author":{"gitId":"dingyuchen"},"content":"  color: `#${COLOR_WHITE}`,"},{"lineNumber":45,"author":{"gitId":"dingyuchen"},"content":"  \u0027font-weight\u0027: \u0027410\u0027"},{"lineNumber":46,"author":{"gitId":"-"},"content":"};"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"export const LIGHT_BG_DARK_TEXT \u003d {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  \u0027background-color\u0027: `#${COLOR_WHITE}`,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  \u0027border-radius\u0027: \u00273px\u0027,"},{"lineNumber":51,"author":{"gitId":"dingyuchen"},"content":"  cursor: \u0027default\u0027,"},{"lineNumber":52,"author":{"gitId":"dingyuchen"},"content":"  padding: \u00273px\u0027,"},{"lineNumber":53,"author":{"gitId":"dingyuchen"},"content":"  color: `#${COLOR_BLACK}`,"},{"lineNumber":54,"author":{"gitId":"dingyuchen"},"content":"  \u0027font-weight\u0027: \u0027410\u0027"},{"lineNumber":55,"author":{"gitId":"-"},"content":"};"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"seanlowjk"},"content":"export const RESPONSE_REJECTED_LABEL \u003d new Label(RESPONSE, RESPONSE_REJECTED, COLOR_RESPONSE_REJECTED);"},{"lineNumber":58,"author":{"gitId":"seanlowjk"},"content":"export const STATUS_DONE_LABEL \u003d new Label(STATUS, STATUS_DONE, COLOR_STATUS_DONE);"},{"lineNumber":59,"author":{"gitId":"seanlowjk"},"content":"export const TYPE_DOCUMENTATION_BUG_LABEL \u003d new Label(TYPE, TYPE_DOCUMENTATION_BUG, COLOR_TYPE_DOCUMENTATION_BUG);"},{"lineNumber":60,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":61,"author":{"gitId":"seanlowjk"},"content":"export const SEVERITY_HIGH_LABEL \u003d new Label(SEVERITY, SEVERITY_HIGH, COLOR_SEVERITY_HIGH);"},{"lineNumber":62,"author":{"gitId":"seanlowjk"},"content":"export const SEVERITY_MEDIUM_LABEL \u003d new Label(SEVERITY, SEVERITY_MEDIUM, COLOR_SEVERITY_MEDIUM);"},{"lineNumber":63,"author":{"gitId":"seanlowjk"},"content":"export const SEVERITY_LOW_LABEL \u003d new Label(SEVERITY, SEVERITY_LOW, COLOR_SEVERITY_LOW);"},{"lineNumber":64,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"// Constant array of labels to simulate Github response"},{"lineNumber":66,"author":{"gitId":"-"},"content":"export const LABEL_ARRAY \u003d ["},{"lineNumber":67,"author":{"gitId":"-"},"content":"  {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    color: COLOR_RESPONSE_ACCEPTED,"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    name: RESPONSE + \u0027.\u0027 + RESPONSE_ACCEPTED"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":71,"author":{"gitId":"-"},"content":"  {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    color: COLOR_SEVERITY_LOW,"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    name: SEVERITY + \u0027.\u0027 + SEVERITY_LOW"},{"lineNumber":74,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":75,"author":{"gitId":"-"},"content":"  {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    color: COLOR_TYPE_FUNCTIONALITY_BUG,"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    name: TYPE + \u0027.\u0027 + TYPE_FUNCTIONALITY_BUG"},{"lineNumber":78,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"];"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"dingyuchen"},"content":"export const ALL_REQUIRED_LABELS_ARRAY: {}[] \u003d LabelService.getRequiredLabelsAsArray().map((label: Label) \u003d\u003e {"},{"lineNumber":82,"author":{"gitId":"seanlowjk"},"content":"  return {"},{"lineNumber":83,"author":{"gitId":"seanlowjk"},"content":"    color: label.labelColor,"},{"lineNumber":84,"author":{"gitId":"seanlowjk"},"content":"    name: label.getFormattedName()"},{"lineNumber":85,"author":{"gitId":"seanlowjk"},"content":"  };"},{"lineNumber":86,"author":{"gitId":"seanlowjk"},"content":"});"},{"lineNumber":87,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"// List of labels"},{"lineNumber":89,"author":{"gitId":"dingyuchen"},"content":"export const SEVERITY_LABELS \u003d ["},{"lineNumber":90,"author":{"gitId":"dingyuchen"},"content":"  new Label(SEVERITY, SEVERITY_LOW, COLOR_SEVERITY_LOW),"},{"lineNumber":91,"author":{"gitId":"-"},"content":"  new Label(SEVERITY, SEVERITY_MEDIUM, COLOR_SEVERITY_MEDIUM),"},{"lineNumber":92,"author":{"gitId":"dingyuchen"},"content":"  new Label(SEVERITY, SEVERITY_HIGH, COLOR_SEVERITY_HIGH)"},{"lineNumber":93,"author":{"gitId":"dingyuchen"},"content":"];"}],"authorContributionMap":{"dingyuchen":13,"seanlowjk":15,"-":65}},{"path":"tests/constants/session.constants.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"seanlowjk"},"content":"import { Phase } from \u0027../../src/app/core/models/phase.model\u0027;"},{"lineNumber":2,"author":{"gitId":"seanlowjk"},"content":"import { SessionData } from \u0027../../src/app/core/models/session.model\u0027;"},{"lineNumber":3,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":4,"author":{"gitId":"seanlowjk"},"content":"export const BUG_REPORTING_PHASE_SESSION_DATA: SessionData \u003d {"},{"lineNumber":5,"author":{"gitId":"seanlowjk"},"content":"  openPhases: [Phase.phaseBugReporting],"},{"lineNumber":6,"author":{"gitId":"seanlowjk"},"content":"  [Phase.phaseBugReporting]: \u0027bugreporting\u0027,"},{"lineNumber":7,"author":{"gitId":"seanlowjk"},"content":"  [Phase.phaseTeamResponse]: \u0027pe-results\u0027,"},{"lineNumber":8,"author":{"gitId":"seanlowjk"},"content":"  [Phase.phaseTesterResponse]: \u0027testerresponse\u0027,"},{"lineNumber":9,"author":{"gitId":"seanlowjk"},"content":"  [Phase.phaseModeration]: \u0027pe-evaluation\u0027"},{"lineNumber":10,"author":{"gitId":"seanlowjk"},"content":"};"},{"lineNumber":11,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":12,"author":{"gitId":"seanlowjk"},"content":"export const MODERATION_PHASE_SESSION_DATA: SessionData \u003d {"},{"lineNumber":13,"author":{"gitId":"seanlowjk"},"content":"  ...BUG_REPORTING_PHASE_SESSION_DATA,"},{"lineNumber":14,"author":{"gitId":"seanlowjk"},"content":"  openPhases: [Phase.phaseModeration]"},{"lineNumber":15,"author":{"gitId":"seanlowjk"},"content":"};"},{"lineNumber":16,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":17,"author":{"gitId":"seanlowjk"},"content":"export const NO_OPEN_PHASES_SESSION_DATA: SessionData \u003d {"},{"lineNumber":18,"author":{"gitId":"seanlowjk"},"content":"  ...BUG_REPORTING_PHASE_SESSION_DATA,"},{"lineNumber":19,"author":{"gitId":"seanlowjk"},"content":"  openPhases: []"},{"lineNumber":20,"author":{"gitId":"seanlowjk"},"content":"};"},{"lineNumber":21,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":22,"author":{"gitId":"seanlowjk"},"content":"export const MULTIPLE_OPEN_PHASES_SESSION_DATA: SessionData \u003d {"},{"lineNumber":23,"author":{"gitId":"seanlowjk"},"content":"  ...BUG_REPORTING_PHASE_SESSION_DATA,"},{"lineNumber":24,"author":{"gitId":"dingyuchen"},"content":"  openPhases: [Phase.phaseBugReporting, Phase.phaseTeamResponse, Phase.phaseTesterResponse, Phase.phaseModeration]"},{"lineNumber":25,"author":{"gitId":"seanlowjk"},"content":"};"}],"authorContributionMap":{"dingyuchen":1,"seanlowjk":24}},{"path":"tests/karma.ci.conf.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"let ciProperties;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"let baseConfigs \u003d require(\u0027./karma.conf.js\u0027);"},{"lineNumber":3,"author":{"gitId":"dingyuchen"},"content":"baseConfigs({"},{"lineNumber":4,"author":{"gitId":"dingyuchen"},"content":"  set: function (arg) {"},{"lineNumber":5,"author":{"gitId":"dingyuchen"},"content":"    ciProperties \u003d arg;"},{"lineNumber":6,"author":{"gitId":"dingyuchen"},"content":"  }"},{"lineNumber":7,"author":{"gitId":"dingyuchen"},"content":"});"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"// Set CI specific settings"},{"lineNumber":10,"author":{"gitId":"-"},"content":"// Include Firefox as a testing environment"},{"lineNumber":11,"author":{"gitId":"-"},"content":"ciProperties.plugins.push(require(\u0027karma-firefox-launcher\u0027));"},{"lineNumber":12,"author":{"gitId":"-"},"content":"ciProperties.browsers.push(\u0027FirefoxHeadless\u0027);"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"module.exports \u003d function (config) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  config.set(ciProperties);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"};"}],"authorContributionMap":{"dingyuchen":5,"-":11}},{"path":"tests/karma.conf.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"// Karma configuration file, see link for more information"},{"lineNumber":2,"author":{"gitId":"-"},"content":"// https://karma-runner.github.io/1.0/config/configuration-file.html"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"module.exports \u003d function (config) {"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  config.set({"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    basePath: \u0027\u0027,"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    frameworks: [\u0027jasmine\u0027, \u0027@angular-devkit/build-angular\u0027],"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    plugins: ["},{"lineNumber":9,"author":{"gitId":"-"},"content":"      require(\u0027karma-jasmine\u0027),"},{"lineNumber":10,"author":{"gitId":"-"},"content":"      require(\u0027karma-chrome-launcher\u0027),"},{"lineNumber":11,"author":{"gitId":"-"},"content":"      require(\u0027karma-spec-reporter\u0027),"},{"lineNumber":12,"author":{"gitId":"-"},"content":"      require(\u0027karma-coverage-istanbul-reporter\u0027),"},{"lineNumber":13,"author":{"gitId":"-"},"content":"      require(\u0027@angular-devkit/build-angular/plugins/karma\u0027)"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    ],"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    client: {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      clearContext: false // leave Jasmine Spec Runner output visible in browser"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    coverageIstanbulReporter: {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      dir: require(\u0027path\u0027).join(__dirname, \u0027./coverage/CATcher\u0027),"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      reports: [\u0027html\u0027, \u0027lcovonly\u0027, \u0027text-summary\u0027],"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      fixWebpackSourcePaths: true"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    reporters: [\u0027spec\u0027],"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    specReporter: {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      maxLogLines: 5, // limit number of lines per test"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      suppressErrorSummary: true,"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      suppressPassed: true,"},{"lineNumber":28,"author":{"gitId":"dingyuchen"},"content":"      showSpecTiming: false"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    port: 9876,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    colors: true,"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    logLevel: config.LOG_INFO,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    browsers: [\u0027ChromeHeadless\u0027],"},{"lineNumber":34,"author":{"gitId":"dingyuchen"},"content":"    singleRun: true"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":36,"author":{"gitId":"-"},"content":"};"}],"authorContributionMap":{"dingyuchen":2,"-":34}},{"path":"tests/model/issue.model.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { IssueDispute } from \u0027../../src/app/core/models/issue-dispute.model\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { Issue } from \u0027../../src/app/core/models/issue.model\u0027;"},{"lineNumber":3,"author":{"gitId":"kkangs0226"},"content":"import { TEAM_4 } from \u0027../constants/data.constants\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { TesterResponse } from \u0027../../src/app/core/models/tester-response.model\u0027;"},{"lineNumber":5,"author":{"gitId":"dingyuchen"},"content":"import { Phase } from \u0027../../src/app/core/models/phase.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { ISSUE_WITH_EMPTY_DESCRIPTION, ISSUE_WITH_ASSIGNEES } from \u0027../constants/githubissue.constants\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"describe(\u0027Issue model class\u0027, () \u003d\u003e {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  describe(\u0027.createPhaseBugReportIssue(githubIssue)\u0027, () \u003d\u003e {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    it(\u0027correctly creates a bug reporting issue that has an empty description\u0027, async () \u003d\u003e {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"      const issue \u003d Issue.createPhaseBugReportingIssue(ISSUE_WITH_EMPTY_DESCRIPTION);"},{"lineNumber":13,"author":{"gitId":"-"},"content":"      expect(issue.title).toBe(\u0027App starts to lag when given large amount of input\u0027);"},{"lineNumber":14,"author":{"gitId":"-"},"content":"      expect(issue.description).toBe(\u0027No details provided by bug reporter.\u0027);"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      expect(issue.severity).toBe(\u0027Medium\u0027);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      expect(issue.type).toBe(\u0027FunctionalityBug\u0027);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  describe(\u0027.createPhaseTeamResponseIssue(githubIssue, githubComment)\u0027, () \u003d\u003e {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    it(\u0027correctly creates a team response issue that has an empty team response\u0027, async () \u003d\u003e {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      const dummyTeam \u003d null;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      const issue \u003d Issue.createPhaseTeamResponseIssue(ISSUE_WITH_ASSIGNEES, dummyTeam);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      expect(issue.title).toBe(\u0027Screen freezes\u0027);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      expect(issue.teamResponse).toBe(\u0027No details provided by team.\u0027);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      expect(issue.severity).toBe(\u0027Medium\u0027);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      expect(issue.assignees).toContain(\u0027anubh-v\u0027);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      expect(issue.assignees.length).toBe(1);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  describe(\u0027.updateDescription(description) and .updateTeamResponse(teamResponse)\u0027, () \u003d\u003e {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    it(\u0027correctly clean strings obtained from users\u0027, () \u003d\u003e {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      const noDetailsFromBugReporter \u003d \u0027No details provided by bug reporter.\u0027;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      const noDetailsFromTeam \u003d \u0027No details provided by team.\u0027;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      expect(Issue.updateDescription(\u0027\u0027)).toBe(noDetailsFromBugReporter);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      expect(Issue.updateTeamResponse(\u0027\u0027)).toBe(noDetailsFromTeam);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      expect(Issue.updateDescription(null)).toBe(noDetailsFromBugReporter);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      expect(Issue.updateTeamResponse(undefined)).toBe(noDetailsFromTeam);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"      const typicalDescription \u003d \u0027The app crashes after parsing config files.\u0027;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      const typicalTeamResponse \u003d \u0027Cannot replicate the bug.\u0027;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      expect(Issue.updateDescription(typicalDescription)).toBe(typicalDescription + \u0027\\n\\n\u0027);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      expect(Issue.updateTeamResponse(typicalTeamResponse)).toBe(typicalTeamResponse + \u0027\\n\\n\u0027);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"      const inputWithSpecialChars \u003d \u0027$%^!@\u0026-_test\u0027;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      expect(Issue.updateDescription(inputWithSpecialChars)).toBe(inputWithSpecialChars + \u0027\\n\\n\u0027);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"      expect(Issue.updateTeamResponse(inputWithSpecialChars)).toBe(inputWithSpecialChars + \u0027\\n\\n\u0027);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":49,"author":{"gitId":"-"},"content":"});"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"describe(\u0027Issue\u0027, () \u003d\u003e {"},{"lineNumber":52,"author":{"gitId":"kkangs0226"},"content":"  const dummyTeam \u003d TEAM_4;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  const dummyIssue \u003d Issue.createPhaseBugReportingIssue(ISSUE_WITH_EMPTY_DESCRIPTION);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  const otherDummyIssue \u003d Issue.createPhaseBugReportingIssue(ISSUE_WITH_ASSIGNEES);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  const dummyIssueWithTeam \u003d Issue.createPhaseTeamResponseIssue(ISSUE_WITH_EMPTY_DESCRIPTION, dummyTeam);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"  const noReportedDescriptionString \u003d \u0027No details provided by bug reporter.\\n\u0027;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  const tutorResponseStringHeader \u003d \u0027# Tutor Moderation\\n\\n\u0027;"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"  const newIssueDispute \u003d new IssueDispute(\u0027Cannot Work\u0027, \u0027Help Please\u0027);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  const newTesterResponse \u003d new TesterResponse(\u0027Cannot Work\u0027, \u0027Help Please\u0027, \u0027- [ ] Not Done\u0027, \u0027Reason\u0027);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"  it(\u0027.clone() should intialise the cloned issue with the correct phase and team\u0027, () \u003d\u003e {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    const phaseBugReportingIssue \u003d dummyIssue.clone(Phase.phaseBugReporting);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    expect(phaseBugReportingIssue).toEqual(dummyIssue);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    const phaseTeamResponseIssue \u003d dummyIssueWithTeam.clone(Phase.phaseTeamResponse);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    expect(phaseTeamResponseIssue.githubComments).toEqual(dummyIssueWithTeam.githubComments);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    expect(phaseTeamResponseIssue.teamAssigned).toEqual(dummyTeam);"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    const phaseTesterResponseIssue \u003d dummyIssueWithTeam.clone(Phase.phaseTesterResponse);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    expect(phaseTesterResponseIssue.githubComments).toEqual(dummyIssueWithTeam.githubComments);"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    const phaseModerationIssue \u003d dummyIssueWithTeam.clone(Phase.phaseModeration);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    expect(phaseModerationIssue.githubComments).toEqual(dummyIssueWithTeam.githubComments);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    expect(phaseModerationIssue.teamAssigned).toEqual(dummyTeam);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"  it(\u0027.createGithubIssueDescription() forms the correct GitHub Issue description for the issue\u0027, () \u003d\u003e {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    const phaseBugReportingIssue \u003d dummyIssue.clone(Phase.phaseBugReporting);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    expect(phaseBugReportingIssue.createGithubIssueDescription()).toEqual(noReportedDescriptionString);"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    const phaseBugReportingIssueWithDescription \u003d otherDummyIssue.clone(Phase.phaseBugReporting);"},{"lineNumber":84,"author":{"gitId":"dingyuchen"},"content":"    expect(phaseBugReportingIssueWithDescription.createGithubIssueDescription()).toEqual("},{"lineNumber":85,"author":{"gitId":"dingyuchen"},"content":"      `${phaseBugReportingIssueWithDescription.description}\\n`"},{"lineNumber":86,"author":{"gitId":"dingyuchen"},"content":"    );"},{"lineNumber":87,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"  it(\u0027.createGithubTeamResponse() should be able to get the proper Team Response\u0027, () \u003d\u003e {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    const phaseTeamResponseIssue \u003d dummyIssue.clone(Phase.phaseTeamResponse);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    phaseTeamResponseIssue.teamResponse \u003d \u0027Sample Text\u0027;"},{"lineNumber":92,"author":{"gitId":"dingyuchen"},"content":"    expect(phaseTeamResponseIssue.createGithubTeamResponse()).toEqual("},{"lineNumber":93,"author":{"gitId":"dingyuchen"},"content":"      `# Team\\\u0027s Response\\n${phaseTeamResponseIssue.teamResponse}\\n## Duplicate status (if any):\\n--`"},{"lineNumber":94,"author":{"gitId":"dingyuchen"},"content":"    );"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    const phaseTeamResponseIssue2 \u003d dummyIssue.clone(Phase.phaseTeamResponse);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    phaseTeamResponseIssue2.teamResponse \u003d \u0027Sample Text\u0027;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    phaseTeamResponseIssue2.duplicateOf \u003d 10;"},{"lineNumber":99,"author":{"gitId":"dingyuchen"},"content":"    expect(phaseTeamResponseIssue2.createGithubTeamResponse()).toEqual("},{"lineNumber":100,"author":{"gitId":"dingyuchen"},"content":"      `# Team\\\u0027s Response\\n${phaseTeamResponseIssue2.teamResponse}\\n` +"},{"lineNumber":101,"author":{"gitId":"dingyuchen"},"content":"        `## Duplicate status (if any):\\nDuplicate of #${phaseTeamResponseIssue2.duplicateOf}`"},{"lineNumber":102,"author":{"gitId":"dingyuchen"},"content":"    );"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"  it(\u0027.createGithubTutorResponse() should be able to get the proper Tutor Response\u0027, () \u003d\u003e {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    const phaseModerationIssue \u003d dummyIssueWithTeam.clone(Phase.phaseModeration);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    expect(phaseModerationIssue.createGithubTutorResponse()).toEqual(tutorResponseStringHeader);"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    const phaseModerationIssue2 \u003d dummyIssueWithTeam.clone(Phase.phaseModeration);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    phaseModerationIssue2.issueDisputes \u003d [newIssueDispute];"},{"lineNumber":111,"author":{"gitId":"dingyuchen"},"content":"    expect(phaseModerationIssue2.createGithubTutorResponse()).toEqual(tutorResponseStringHeader + newIssueDispute.toTutorResponseString());"},{"lineNumber":112,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"  it(\u0027.createGithubTesterResponse() should be able to get the proper Tester Response\u0027, () \u003d\u003e {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    const phaseTesterResponseIssue \u003d dummyIssueWithTeam.clone(Phase.phaseTesterResponse);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    phaseTesterResponseIssue.teamResponse \u003d \u0027Sample Text\u0027;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    phaseTesterResponseIssue.testerResponses \u003d [];"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    expect(phaseTesterResponseIssue.createGithubTesterResponse()).toEqual("},{"lineNumber":119,"author":{"gitId":"dingyuchen"},"content":"      `# Team\\\u0027s Response\\n${phaseTesterResponseIssue.teamResponse}\\n` + `# Items for the Tester to Verify\\n${\u0027\u0027}`"},{"lineNumber":120,"author":{"gitId":"dingyuchen"},"content":"    );"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    const phaseTesterResponseIssue2 \u003d dummyIssueWithTeam.clone(Phase.phaseTesterResponse);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    phaseTesterResponseIssue2.teamResponse \u003d \u0027Sample Text\u0027;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    phaseTesterResponseIssue2.testerResponses \u003d [newTesterResponse];"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    expect(phaseTesterResponseIssue2.createGithubTesterResponse()).toEqual("},{"lineNumber":126,"author":{"gitId":"dingyuchen"},"content":"      `# Team\\\u0027s Response\\n${phaseTesterResponseIssue.teamResponse}\\n` + `# Items for the Tester to Verify\\n${newTesterResponse.toString()}`"},{"lineNumber":127,"author":{"gitId":"dingyuchen"},"content":"    );"},{"lineNumber":128,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"  it(\u0027.numOfUnresolvedDisputes() returns the correct number of issue disputes\u0027, () \u003d\u003e {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    const phaseModerationIssue \u003d dummyIssueWithTeam.clone(Phase.phaseModeration);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    expect(phaseModerationIssue.numOfUnresolvedDisputes()).toEqual(0);"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    const phaseModerationIssue2 \u003d dummyIssueWithTeam.clone(Phase.phaseModeration);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    phaseModerationIssue2.issueDisputes \u003d [newIssueDispute];"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    expect(phaseModerationIssue2.numOfUnresolvedDisputes()).toEqual(1);"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    const phaseModerationIssue3 \u003d dummyIssueWithTeam.clone(Phase.phaseModeration);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    phaseModerationIssue3.issueDisputes \u003d [newIssueDispute];"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    newIssueDispute.setIsDone(true);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    expect(phaseModerationIssue3.numOfUnresolvedDisputes()).toEqual(0);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":143,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"kkangs0226":2,"dingyuchen":16,"-":125}},{"path":"tests/model/profile.model.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"dingyuchen"},"content":"import { Profile, isValidProfile } from \u0027../../src/app/core/models/profile.model\u0027;"},{"lineNumber":2,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":3,"author":{"gitId":"dingyuchen"},"content":"describe(\u0027isValidProfile\u0027, () \u003d\u003e {"},{"lineNumber":4,"author":{"gitId":"dingyuchen"},"content":"  it(\u0027returns false for a profile with no encodedText field\u0027, () \u003d\u003e {"},{"lineNumber":5,"author":{"gitId":"dingyuchen"},"content":"    const profile \u003d { profileName: \u0027CATcher-org\u0027 };"},{"lineNumber":6,"author":{"gitId":"dingyuchen"},"content":"    expect(isValidProfile(profile as Profile)).toBe(false);"},{"lineNumber":7,"author":{"gitId":"dingyuchen"},"content":"  });"},{"lineNumber":8,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":9,"author":{"gitId":"dingyuchen"},"content":"  it(\u0027returns false for a profile with an empty encodedText field\u0027, () \u003d\u003e {"},{"lineNumber":10,"author":{"gitId":"dingyuchen"},"content":"    const profile \u003d { profileName: \u0027CATcher-org\u0027, encodedText: \u0027\u0027 };"},{"lineNumber":11,"author":{"gitId":"dingyuchen"},"content":"    expect(isValidProfile(profile as Profile)).toBe(false);"},{"lineNumber":12,"author":{"gitId":"dingyuchen"},"content":"  });"},{"lineNumber":13,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":14,"author":{"gitId":"dingyuchen"},"content":"  it(\u0027returns false for a profile with a malformed encodedText field\u0027, () \u003d\u003e {"},{"lineNumber":15,"author":{"gitId":"dingyuchen"},"content":"    const profile \u003d { profileName: \u0027CATcher-org\u0027, encodedText: \u0027somestring\u0027 };"},{"lineNumber":16,"author":{"gitId":"dingyuchen"},"content":"    expect(isValidProfile(profile as Profile)).toBe(false);"},{"lineNumber":17,"author":{"gitId":"dingyuchen"},"content":"  });"},{"lineNumber":18,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":19,"author":{"gitId":"dingyuchen"},"content":"  it(\u0027returns false for a profile with no profileName field\u0027, () \u003d\u003e {"},{"lineNumber":20,"author":{"gitId":"dingyuchen"},"content":"    const profile \u003d { encodedText: \u0027public\u0027 };"},{"lineNumber":21,"author":{"gitId":"dingyuchen"},"content":"    expect(isValidProfile(profile as Profile)).toBe(false);"},{"lineNumber":22,"author":{"gitId":"dingyuchen"},"content":"  });"},{"lineNumber":23,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":24,"author":{"gitId":"dingyuchen"},"content":"  it(\u0027returns false for a profile with an empty profileName field\u0027, () \u003d\u003e {"},{"lineNumber":25,"author":{"gitId":"dingyuchen"},"content":"    const profile \u003d { profileName: \u0027\u0027, encodedText: \u0027public\u0027 };"},{"lineNumber":26,"author":{"gitId":"dingyuchen"},"content":"    expect(isValidProfile(profile as Profile)).toBe(false);"},{"lineNumber":27,"author":{"gitId":"dingyuchen"},"content":"  });"},{"lineNumber":28,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":29,"author":{"gitId":"dingyuchen"},"content":"  it(\u0027returns true for a valid profile with profileName and encodedText fields\u0027, () \u003d\u003e {"},{"lineNumber":30,"author":{"gitId":"dingyuchen"},"content":"    const profile \u003d { profileName: \u0027CATcher-org\u0027, encodedText: \u0027CATcher/public\u0027 };"},{"lineNumber":31,"author":{"gitId":"dingyuchen"},"content":"    expect(isValidProfile(profile as Profile)).toBe(true);"},{"lineNumber":32,"author":{"gitId":"dingyuchen"},"content":"  });"},{"lineNumber":33,"author":{"gitId":"dingyuchen"},"content":"});"}],"authorContributionMap":{"dingyuchen":33}},{"path":"tests/services/application.service.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { ApplicationService } from \u0027../../src/app/core/services/application.service\u0027;"},{"lineNumber":2,"author":{"gitId":"dingyuchen"},"content":"import { GithubService } from \u0027../../src/app/core/services/github.service\u0027;"},{"lineNumber":3,"author":{"gitId":"dingyuchen"},"content":"import { of } from \u0027rxjs\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"const currentVersion \u003d \u00273.2.5\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"dingyuchen"},"content":"class ApplicationServiceStub extends ApplicationService {"},{"lineNumber":8,"author":{"gitId":"dingyuchen"},"content":"  readonly currentVersion: string;"},{"lineNumber":9,"author":{"gitId":"dingyuchen"},"content":"  constructor(githubService: GithubService, currentVersion: string) {"},{"lineNumber":10,"author":{"gitId":"dingyuchen"},"content":"    super(githubService);"},{"lineNumber":11,"author":{"gitId":"dingyuchen"},"content":"    this.currentVersion \u003d currentVersion;"},{"lineNumber":12,"author":{"gitId":"dingyuchen"},"content":"  }"},{"lineNumber":13,"author":{"gitId":"dingyuchen"},"content":"}"},{"lineNumber":14,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":15,"author":{"gitId":"dingyuchen"},"content":"describe(\u0027ApplicationService#isApplicationOutdated\u0027, () \u003d\u003e {"},{"lineNumber":16,"author":{"gitId":"dingyuchen"},"content":"  const githubService \u003d jasmine.createSpyObj(\u0027GithubService\u0027, [\u0027fetchLatestRelease\u0027]);"},{"lineNumber":17,"author":{"gitId":"dingyuchen"},"content":"  it(\u0027should return the appropriate Observable if the ApplicationService is outdated\u0027, () \u003d\u003e {"},{"lineNumber":18,"author":{"gitId":"dingyuchen"},"content":"    githubService.fetchLatestRelease.and.returnValue(of({ tag_name: \u0027v2.2.5\u0027 }));"},{"lineNumber":19,"author":{"gitId":"dingyuchen"},"content":"    const outdatedAppService1 \u003d new ApplicationServiceStub(githubService, currentVersion);"},{"lineNumber":20,"author":{"gitId":"dingyuchen"},"content":"    outdatedAppService1.isApplicationOutdated().subscribe((bool) \u003d\u003e expect(bool).toBe(false));"},{"lineNumber":21,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":22,"author":{"gitId":"dingyuchen"},"content":"    githubService.fetchLatestRelease.and.returnValue(of({ tag_name: \u0027v3.1\u0027 }));"},{"lineNumber":23,"author":{"gitId":"dingyuchen"},"content":"    const outdatedAppService2 \u003d new ApplicationServiceStub(githubService, currentVersion);"},{"lineNumber":24,"author":{"gitId":"dingyuchen"},"content":"    outdatedAppService2.isApplicationOutdated().subscribe((bool) \u003d\u003e expect(bool).toBe(false));"},{"lineNumber":25,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":26,"author":{"gitId":"dingyuchen"},"content":"    githubService.fetchLatestRelease.and.returnValue(of({ tag_name: \u0027v3.2.4\u0027 }));"},{"lineNumber":27,"author":{"gitId":"dingyuchen"},"content":"    const outdatedAppService3 \u003d new ApplicationServiceStub(githubService, currentVersion);"},{"lineNumber":28,"author":{"gitId":"dingyuchen"},"content":"    outdatedAppService3.isApplicationOutdated().subscribe((bool) \u003d\u003e expect(bool).toBe(false));"},{"lineNumber":29,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":30,"author":{"gitId":"dingyuchen"},"content":"    githubService.fetchLatestRelease.and.returnValue(of({ tag_name: \u0027v3.2.4.8.9\u0027 }));"},{"lineNumber":31,"author":{"gitId":"dingyuchen"},"content":"    const longVersionedAppService \u003d new ApplicationServiceStub(githubService, currentVersion);"},{"lineNumber":32,"author":{"gitId":"dingyuchen"},"content":"    longVersionedAppService.isApplicationOutdated().subscribe((bool) \u003d\u003e expect(bool).toBe(false));"},{"lineNumber":33,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":34,"author":{"gitId":"dingyuchen"},"content":"    githubService.fetchLatestRelease.and.returnValue(of({ tag_name: \u0027v3.2.5\u0027 }));"},{"lineNumber":35,"author":{"gitId":"dingyuchen"},"content":"    const latestApplicationService \u003d new ApplicationServiceStub(githubService, currentVersion);"},{"lineNumber":36,"author":{"gitId":"dingyuchen"},"content":"    latestApplicationService.isApplicationOutdated().subscribe((bool) \u003d\u003e expect(bool).toBe(false));"},{"lineNumber":37,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":38,"author":{"gitId":"dingyuchen"},"content":"    githubService.fetchLatestRelease.and.returnValue(of({ tag_name: \u0027v3.2.5.0\u0027 }));"},{"lineNumber":39,"author":{"gitId":"dingyuchen"},"content":"    const upToDateAppService1 \u003d new ApplicationServiceStub(githubService, currentVersion);"},{"lineNumber":40,"author":{"gitId":"dingyuchen"},"content":"    upToDateAppService1.isApplicationOutdated().subscribe((bool) \u003d\u003e expect(bool).toBe(true));"},{"lineNumber":41,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":42,"author":{"gitId":"dingyuchen"},"content":"    githubService.fetchLatestRelease.and.returnValue(of({ tag_name: \u0027v3.2.5.5\u0027 }));"},{"lineNumber":43,"author":{"gitId":"dingyuchen"},"content":"    const upToDateAppService2 \u003d new ApplicationServiceStub(githubService, currentVersion);"},{"lineNumber":44,"author":{"gitId":"dingyuchen"},"content":"    upToDateAppService2.isApplicationOutdated().subscribe((bool) \u003d\u003e expect(bool).toBe(true));"},{"lineNumber":45,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":46,"author":{"gitId":"dingyuchen"},"content":"    githubService.fetchLatestRelease.and.returnValue(of({ tag_name: \u0027v3.2.6\u0027 }));"},{"lineNumber":47,"author":{"gitId":"dingyuchen"},"content":"    const upToDateAppService3 \u003d new ApplicationServiceStub(githubService, currentVersion);"},{"lineNumber":48,"author":{"gitId":"dingyuchen"},"content":"    upToDateAppService3.isApplicationOutdated().subscribe((bool) \u003d\u003e expect(bool).toBe(true));"},{"lineNumber":49,"author":{"gitId":"dingyuchen"},"content":""},{"lineNumber":50,"author":{"gitId":"dingyuchen"},"content":"    githubService.fetchLatestRelease.and.returnValue(of({ tag_name: \u0027v10\u0027 }));"},{"lineNumber":51,"author":{"gitId":"dingyuchen"},"content":"    const upToDateAppService4 \u003d new ApplicationServiceStub(githubService, currentVersion);"},{"lineNumber":52,"author":{"gitId":"dingyuchen"},"content":"    upToDateAppService4.isApplicationOutdated().subscribe((bool) \u003d\u003e expect(bool).toBe(true));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":54,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"dingyuchen":48,"-":6}},{"path":"tests/services/data.service.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { of } from \u0027rxjs\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { DataService } from \u0027../../src/app/core/services/data.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027../../src/app/core/services/github.service\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { autoSpy } from \u0027../auto-spy\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { csvString, jsonData, dataFileTeamStructure } from \u0027../constants/data.constants\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"describe(\u0027DataService\u0027, () \u003d\u003e {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  describe(\u0027.getDataFile()\u0027, () \u003d\u003e {"},{"lineNumber":9,"author":{"gitId":"dingyuchen"},"content":"    it(\"returns a json representation of the repo\u0027s data csv\", (done) \u003d\u003e {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"      const { build, githubService } \u003d setup();"},{"lineNumber":11,"author":{"gitId":"-"},"content":"      const dataService \u003d build();"},{"lineNumber":12,"author":{"gitId":"dingyuchen"},"content":"      githubService.fetchDataFile.and.returnValue(of({ data: csvString }));"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"dingyuchen"},"content":"      dataService.getDataFile().subscribe((actual) \u003d\u003e {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        expect(actual).toEqual(jsonData);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        done();"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"dingyuchen"},"content":"    it(\u0027initializes an internal data structure that maps teamIds to Team objects\u0027, (done) \u003d\u003e {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      const { build, githubService } \u003d setup();"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      const dataService \u003d build();"},{"lineNumber":23,"author":{"gitId":"dingyuchen"},"content":"      githubService.fetchDataFile.and.returnValue(of({ data: csvString }));"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"dingyuchen"},"content":"      dataService.getDataFile().subscribe((actual) \u003d\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        expect(dataService.dataFile).toEqual(dataFileTeamStructure);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        done();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"  describe(\u0027.getTeam(teamId)\u0027, () \u003d\u003e {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    it(\u0027returns the Team object corresponding to the given teamId\u0027, () \u003d\u003e {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      // arrange"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      const { build } \u003d setup();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      const dataService \u003d build();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      spyOn(dataService, \u0027getDataFile\u0027).and.callFake(() \u003d\u003e {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        dataService.dataFile \u003d dataFileTeamStructure;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return of({});"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      // act"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      dataService.getDataFile();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      // assert"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      expect(dataService.getTeam(\u0027CS2103T-W12-3\u0027)).toEqual(dataFileTeamStructure.teamStructure.get(\u0027CS2103T-W12-3\u0027));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      expect(dataService.getTeam(\u0027CS2103T-W12-4\u0027)).toEqual(dataFileTeamStructure.teamStructure.get(\u0027CS2103T-W12-4\u0027));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"      expect(dataService.getTeam(\u0027CS2103T-W12-1\u0027)).toBeUndefined();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"      expect(dataService.getTeam(\u0027CS2103T-W12-2\u0027)).toBeUndefined();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"  describe(\u0027.getTeams()\u0027, () \u003d\u003e {"},{"lineNumber":52,"author":{"gitId":"dingyuchen"},"content":"    it(\"returns an array containing ids of the teams in the repo\u0027s data csv\", () \u003d\u003e {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      // arrange"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      const { build } \u003d setup();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      const dataService \u003d build();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      spyOn(dataService, \u0027getDataFile\u0027).and.callFake(() \u003d\u003e {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        dataService.dataFile \u003d dataFileTeamStructure;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return of({});"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":60,"author":{"gitId":"dingyuchen"},"content":"      const teams \u003d [\u0027CS2103T-W12-3\u0027, \u0027CS2103T-W12-4\u0027];"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      // act"},{"lineNumber":62,"author":{"gitId":"-"},"content":"      dataService.getDataFile();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"      const actual \u003d dataService.getTeams();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"      // assert"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      expect(actual).toEqual(teams);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"  describe(\u0027.reset()\u0027, () \u003d\u003e {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    it(\u0027clears the internal state of the DataService\u0027, () \u003d\u003e {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      // arrange"},{"lineNumber":72,"author":{"gitId":"-"},"content":"      const { build } \u003d setup();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      const dataService \u003d build();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"      spyOn(dataService, \u0027getDataFile\u0027).and.callFake(() \u003d\u003e {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        dataService.dataFile \u003d dataFileTeamStructure;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return of({});"},{"lineNumber":77,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":78,"author":{"gitId":"-"},"content":"      // assert"},{"lineNumber":79,"author":{"gitId":"-"},"content":"      dataService.getDataFile();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      expect(dataService.dataFile).toBeDefined();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"      dataService.reset();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"      expect(dataService.dataFile).toBeUndefined();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":84,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":85,"author":{"gitId":"-"},"content":"});"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"function setup() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"  const githubService \u003d autoSpy(GithubService);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"  const builder \u003d {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    githubService,"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    build() {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"      return new DataService(githubService);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"  return builder;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dingyuchen":8,"-":89}},{"path":"tests/services/githubevent.service.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { GithubEventService } from \u0027../../src/app/core/services/githubevent.service\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { of } from \u0027rxjs\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { EVENTS, ADD_LABEL_EVENT, CHANGE_TITLE_EVENT } from \u0027../constants/githubevent.constants\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"let githubService: any;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"let issueService: any;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"describe(\u0027GithubEventService\u0027, () \u003d\u003e {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  beforeAll(() \u003d\u003e {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    githubService \u003d jasmine.createSpyObj(\u0027GithubService\u0027, [\u0027fetchEventsForRepo\u0027]);"},{"lineNumber":11,"author":{"gitId":"seanlowjk"},"content":"    issueService \u003d jasmine.createSpyObj(\u0027IssueService\u0027, [\u0027reloadAllIssues\u0027]);"},{"lineNumber":12,"author":{"gitId":"seanlowjk"},"content":"    issueService.reloadAllIssues.and.returnValue(of([]));"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"  describe(\u0027.setLatestChangeEvent()\u0027, () \u003d\u003e {"},{"lineNumber":16,"author":{"gitId":"dingyuchen"},"content":"    it(\u0027stores the time of the most recent issue event and most recent issue update.\u0027, async () \u003d\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      githubService.fetchEventsForRepo.and.returnValue(of(EVENTS));"},{"lineNumber":18,"author":{"gitId":"seanlowjk"},"content":"      const githubEventService: GithubEventService \u003d new GithubEventService(githubService, issueService);"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      await githubEventService.setLatestChangeEvent().toPromise();"},{"lineNumber":20,"author":{"gitId":"dingyuchen"},"content":"      githubEventService.reloadPage().subscribe((result) \u003d\u003e expect(result).toBe(false));"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"  describe(\u0027.reloadPage()\u0027, () \u003d\u003e {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    afterEach(() \u003d\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      issueService.reloadAllIssues.calls.reset();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    it(\u0027triggers the IssueService to re-initialise the issue list if there are new events\u0027, async () \u003d\u003e {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      const FIRST_EVENT \u003d [ADD_LABEL_EVENT];"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      const SECOND_EVENT \u003d [CHANGE_TITLE_EVENT];"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      githubService.fetchEventsForRepo.and.returnValue(of(FIRST_EVENT));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      const githubEventService: GithubEventService \u003d new GithubEventService(githubService, issueService);"},{"lineNumber":34,"author":{"gitId":"dingyuchen"},"content":"      githubEventService.reloadPage().subscribe((result) \u003d\u003e expect(result).toBe(true));"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"      githubService.fetchEventsForRepo.and.returnValue(of(SECOND_EVENT));"},{"lineNumber":37,"author":{"gitId":"dingyuchen"},"content":"      githubEventService.reloadPage().subscribe((result) \u003d\u003e expect(result).toBe(true));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"seanlowjk"},"content":"    it(\u0027does not trigger the IssueService to re-initialise the issue list, if there are no new events\u0027, () \u003d\u003e {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      githubService.fetchEventsForRepo.and.returnValue(of(EVENTS));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      const githubEventService: GithubEventService \u003d new GithubEventService(githubService, issueService);"},{"lineNumber":43,"author":{"gitId":"dingyuchen"},"content":"      githubEventService.reloadPage().subscribe((result) \u003d\u003e expect(result).toBe(true));"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"      // issueService.reloadAllIssues must not have been called again"},{"lineNumber":46,"author":{"gitId":"dingyuchen"},"content":"      githubEventService.reloadPage().subscribe((result) \u003d\u003e expect(result).toBe(false));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"  describe(\u0027.reset()\u0027, () \u003d\u003e {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    it(\u0027clears the details of the most recent event\u0027, async () \u003d\u003e {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      githubService.fetchEventsForRepo.and.returnValue(of(EVENTS));"},{"lineNumber":53,"author":{"gitId":"seanlowjk"},"content":"      const githubEventService: GithubEventService \u003d new GithubEventService(githubService, issueService);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      await githubEventService.setLatestChangeEvent().toPromise();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      githubEventService.reset();"},{"lineNumber":56,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":57,"author":{"gitId":"seanlowjk"},"content":"      // reloadPage should return an Observable of true due to reset()"},{"lineNumber":58,"author":{"gitId":"dingyuchen"},"content":"      githubEventService.reloadPage().subscribe((result) \u003d\u003e expect(result).toBe(true));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":61,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"dingyuchen":7,"seanlowjk":7,"-":47}},{"path":"tests/services/label.service.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { LabelService } from \u0027../../src/app/core/services/label.service\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { Label } from \u0027../../src/app/core/models/label.model\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import * as LabelConstant from \u0027../constants/label.constants\u0027;"},{"lineNumber":4,"author":{"gitId":"seanlowjk"},"content":"import { of } from \u0027rxjs\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"let labelService: LabelService;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"let labelList: Label[];"},{"lineNumber":8,"author":{"gitId":"seanlowjk"},"content":"let githubService: any;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"seanlowjk"},"content":"describe(\u0027LabelService\u0027, () \u003d\u003e {"},{"lineNumber":11,"author":{"gitId":"seanlowjk"},"content":"  beforeEach(() \u003d\u003e {"},{"lineNumber":12,"author":{"gitId":"seanlowjk"},"content":"    githubService \u003d jasmine.createSpyObj(\u0027GithubService\u0027, [\u0027fetchAllLabels\u0027, \u0027createLabel\u0027]);"},{"lineNumber":13,"author":{"gitId":"seanlowjk"},"content":"    labelService \u003d new LabelService(githubService);"},{"lineNumber":14,"author":{"gitId":"seanlowjk"},"content":"  });"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"seanlowjk"},"content":"  describe(\u0027.syncLabels()\u0027, () \u003d\u003e {"},{"lineNumber":17,"author":{"gitId":"seanlowjk"},"content":"    it(\u0027should create all required labels if no required labels are fetched\u0027, () \u003d\u003e {"},{"lineNumber":18,"author":{"gitId":"seanlowjk"},"content":"      githubService.fetchAllLabels.and.callFake(() \u003d\u003e of([]));"},{"lineNumber":19,"author":{"gitId":"dingyuchen"},"content":"      of(true).pipe(labelService.syncLabels()).subscribe();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"seanlowjk"},"content":"      assertLabelCreated(githubService, LabelConstant.SEVERITY_LOW_LABEL);"},{"lineNumber":22,"author":{"gitId":"seanlowjk"},"content":"      assertLabelCreated(githubService, LabelConstant.RESPONSE_REJECTED_LABEL);"},{"lineNumber":23,"author":{"gitId":"seanlowjk"},"content":"      assertLabelCreated(githubService, LabelConstant.STATUS_DONE_LABEL);"},{"lineNumber":24,"author":{"gitId":"seanlowjk"},"content":"      assertLabelCreated(githubService, LabelConstant.TYPE_DOCUMENTATION_BUG_LABEL);"},{"lineNumber":25,"author":{"gitId":"seanlowjk"},"content":"      expect(githubService.createLabel).toHaveBeenCalledTimes(LabelService.getRequiredLabelsAsArray().length);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"seanlowjk"},"content":"    it(\u0027should create missing required labels if some required labels are fetched\u0027, () \u003d\u003e {"},{"lineNumber":29,"author":{"gitId":"seanlowjk"},"content":"      githubService.fetchAllLabels.and.callFake(() \u003d\u003e of(LabelConstant.LABEL_ARRAY));"},{"lineNumber":30,"author":{"gitId":"dingyuchen"},"content":"      of(true).pipe(labelService.syncLabels()).subscribe();"},{"lineNumber":31,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":32,"author":{"gitId":"seanlowjk"},"content":"      assertLabelNotCreated(githubService, LabelConstant.SEVERITY_LOW_LABEL);"},{"lineNumber":33,"author":{"gitId":"seanlowjk"},"content":"      assertLabelCreated(githubService, LabelConstant.RESPONSE_REJECTED_LABEL);"},{"lineNumber":34,"author":{"gitId":"seanlowjk"},"content":"      assertLabelCreated(githubService, LabelConstant.STATUS_DONE_LABEL);"},{"lineNumber":35,"author":{"gitId":"seanlowjk"},"content":"      assertLabelCreated(githubService, LabelConstant.TYPE_DOCUMENTATION_BUG_LABEL);"},{"lineNumber":36,"author":{"gitId":"dingyuchen"},"content":"      expect(githubService.createLabel).toHaveBeenCalledTimes("},{"lineNumber":37,"author":{"gitId":"dingyuchen"},"content":"        LabelService.getRequiredLabelsAsArray().length - LabelConstant.LABEL_ARRAY.length"},{"lineNumber":38,"author":{"gitId":"dingyuchen"},"content":"      );"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"seanlowjk"},"content":"    it(\u0027should not need to create any required labels if all required labels are fetched\u0027, () \u003d\u003e {"},{"lineNumber":42,"author":{"gitId":"seanlowjk"},"content":"      githubService.fetchAllLabels.and.callFake(() \u003d\u003e of(LabelConstant.ALL_REQUIRED_LABELS_ARRAY));"},{"lineNumber":43,"author":{"gitId":"dingyuchen"},"content":"      of(true).pipe(labelService.syncLabels()).subscribe();"},{"lineNumber":44,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":45,"author":{"gitId":"seanlowjk"},"content":"      expect(githubService.createLabel).toHaveBeenCalledTimes(0);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":47,"author":{"gitId":"seanlowjk"},"content":"  });"},{"lineNumber":48,"author":{"gitId":"seanlowjk"},"content":"});"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"describe(\u0027LabelService: parseLabelData()\u0027, () \u003d\u003e {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  beforeAll(() \u003d\u003e {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    labelService \u003d new LabelService(null);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    labelList \u003d labelService.parseLabelData(LabelConstant.LABEL_ARRAY);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"  afterAll(() \u003d\u003e {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    labelService \u003d null;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"  it(\u0027should be response.Accepted label\u0027, () \u003d\u003e {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    expect(labelList[0].labelCategory).toBe(LabelConstant.RESPONSE);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    expect(labelList[0].labelValue).toBe(LabelConstant.RESPONSE_ACCEPTED);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    expect(labelList[0].labelColor).toBe(LabelConstant.COLOR_RESPONSE_ACCEPTED);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"  it(\u0027should be severity.Low\u0027, () \u003d\u003e {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    expect(labelList[1].labelCategory).toBe(LabelConstant.SEVERITY);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    expect(labelList[1].labelValue).toBe(LabelConstant.SEVERITY_LOW);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    expect(labelList[1].labelColor).toBe(LabelConstant.COLOR_SEVERITY_LOW);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"  it(\u0027should be type.FunctionalityBug\u0027, () \u003d\u003e {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    expect(labelList[2].labelCategory).toBe(LabelConstant.TYPE);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    expect(labelList[2].labelValue).toBe(LabelConstant.TYPE_FUNCTIONALITY_BUG);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    expect(labelList[2].labelColor).toBe(LabelConstant.COLOR_TYPE_FUNCTIONALITY_BUG);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":77,"author":{"gitId":"-"},"content":"});"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"describe(\u0027LabelService: isDarkColor()\u0027, () \u003d\u003e {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"  beforeEach(() \u003d\u003e {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    labelService \u003d new LabelService(null);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"  afterEach(() \u003d\u003e {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    labelService \u003d null;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"  it(\u0027should be true for dark color\u0027, () \u003d\u003e {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    expect(labelService.isDarkColor(LabelConstant.COLOR_BLACK)).toBeTruthy();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"  it(\u0027should be false for light color\u0027, () \u003d\u003e {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    expect(labelService.isDarkColor(LabelConstant.COLOR_WHITE)).toBeFalsy();"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":95,"author":{"gitId":"-"},"content":"});"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"describe(\u0027LabelService: setLabelStyle()\u0027, () \u003d\u003e {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"  beforeEach(() \u003d\u003e {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    labelService \u003d new LabelService(null);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"  afterEach(() \u003d\u003e {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    labelService \u003d null;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"  it(\u0027should be dark color background with light color text\u0027, () \u003d\u003e {"},{"lineNumber":107,"author":{"gitId":"dingyuchen"},"content":"    expect(labelService.setLabelStyle(LabelConstant.COLOR_BLACK)).toEqual(LabelConstant.DARK_BG_LIGHT_TEXT);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"  it(\u0027should be light color background with dark color text\u0027, () \u003d\u003e {"},{"lineNumber":111,"author":{"gitId":"dingyuchen"},"content":"    expect(labelService.setLabelStyle(LabelConstant.COLOR_WHITE)).toEqual(LabelConstant.LIGHT_BG_DARK_TEXT);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":113,"author":{"gitId":"-"},"content":"});"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"describe(\u0027LabelService: getColorOfLabel()\u0027, () \u003d\u003e {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  beforeEach(() \u003d\u003e {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    labelService \u003d new LabelService(null);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"  afterEach(() \u003d\u003e {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    labelService \u003d null;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"  it(\u0027should be correct label color for Severity.Low\u0027, () \u003d\u003e {"},{"lineNumber":125,"author":{"gitId":"dingyuchen"},"content":"    expect(labelService.getColorOfLabel(LabelConstant.SEVERITY_LOW)).toEqual(LabelConstant.COLOR_SEVERITY_LOW);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"  it(\u0027should be white color for invalid inputs\u0027, () \u003d\u003e {"},{"lineNumber":129,"author":{"gitId":"dingyuchen"},"content":"    expect(labelService.getColorOfLabel(null)).toEqual(LabelConstant.COLOR_WHITE.toLowerCase());"},{"lineNumber":130,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":131,"author":{"gitId":"-"},"content":"});"},{"lineNumber":132,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":133,"author":{"gitId":"seanlowjk"},"content":"function assertLabelCreated(githubService: any, label: Label) {"},{"lineNumber":134,"author":{"gitId":"seanlowjk"},"content":"  expect(githubService.createLabel).toHaveBeenCalledWith(label.getFormattedName(), label.labelColor);"},{"lineNumber":135,"author":{"gitId":"seanlowjk"},"content":"}"},{"lineNumber":136,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":137,"author":{"gitId":"seanlowjk"},"content":"function assertLabelNotCreated(githubService: any, label: Label) {"},{"lineNumber":138,"author":{"gitId":"seanlowjk"},"content":"  expect(githubService.createLabel).not.toHaveBeenCalledWith(label.getFormattedName(), label.labelColor);"},{"lineNumber":139,"author":{"gitId":"seanlowjk"},"content":"}"}],"authorContributionMap":{"dingyuchen":10,"seanlowjk":36,"-":93}},{"path":"tests/services/logging.service.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"ptvrajsk"},"content":"import { LoggingService } from \u0027../../src/app/core/services/logging.service\u0027;"},{"lineNumber":2,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":3,"author":{"gitId":"ptvrajsk"},"content":"let loggingService: LoggingService;"},{"lineNumber":4,"author":{"gitId":"ptvrajsk"},"content":"const getFilteredLogCount: (currentLog: string, predicate: (line: string) \u003d\u003e boolean) \u003d\u003e number \u003d ("},{"lineNumber":5,"author":{"gitId":"ptvrajsk"},"content":"  currentLog: string,"},{"lineNumber":6,"author":{"gitId":"ptvrajsk"},"content":"  predicate: (line: string) \u003d\u003e boolean"},{"lineNumber":7,"author":{"gitId":"ptvrajsk"},"content":") \u003d\u003e"},{"lineNumber":8,"author":{"gitId":"ptvrajsk"},"content":"  loggingService"},{"lineNumber":9,"author":{"gitId":"ptvrajsk"},"content":"    .getTrimmedLogCache(currentLog, loggingService.LOG_COUNT_LIMIT)"},{"lineNumber":10,"author":{"gitId":"ptvrajsk"},"content":"    .split(\u0027\\n\u0027)"},{"lineNumber":11,"author":{"gitId":"ptvrajsk"},"content":"    .filter((line: string) \u003d\u003e predicate(line)).length;"},{"lineNumber":12,"author":{"gitId":"ptvrajsk"},"content":"const oldLogIdentifier \u003d \u0027Old Log\u0027;"},{"lineNumber":13,"author":{"gitId":"ptvrajsk"},"content":"const repeatOldLogStartHeader: (numberOfRepitions: number) \u003d\u003e string \u003d (numberofRepitions: number) \u003d\u003e {"},{"lineNumber":14,"author":{"gitId":"ptvrajsk"},"content":"  return `${loggingService.LOG_START_HEADER}\\n${oldLogIdentifier}\\n`.repeat(numberofRepitions);"},{"lineNumber":15,"author":{"gitId":"ptvrajsk"},"content":"};"},{"lineNumber":16,"author":{"gitId":"ptvrajsk"},"content":"const logHeaderFilter: (line: string) \u003d\u003e boolean \u003d (line: string) \u003d\u003e line \u003d\u003d\u003d loggingService.LOG_START_HEADER;"},{"lineNumber":17,"author":{"gitId":"ptvrajsk"},"content":"const oldLogFilter: (line: string) \u003d\u003e boolean \u003d (line: string) \u003d\u003e line \u003d\u003d\u003d oldLogIdentifier;"},{"lineNumber":18,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":19,"author":{"gitId":"ptvrajsk"},"content":"describe(\u0027LoggingService\u0027, () \u003d\u003e {"},{"lineNumber":20,"author":{"gitId":"ptvrajsk"},"content":"  beforeAll(() \u003d\u003e {"},{"lineNumber":21,"author":{"gitId":"ptvrajsk"},"content":"    const electronService \u003d jasmine.createSpyObj(\u0027ElectronService\u0027, [\u0027isElectron\u0027]);"},{"lineNumber":22,"author":{"gitId":"ptvrajsk"},"content":"    electronService.isElectron \u003d jasmine.createSpy(\u0027isElectron\u0027, () \u003d\u003e false);"},{"lineNumber":23,"author":{"gitId":"ptvrajsk"},"content":"    loggingService \u003d new LoggingService(electronService);"},{"lineNumber":24,"author":{"gitId":"ptvrajsk"},"content":"  });"},{"lineNumber":25,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":26,"author":{"gitId":"ptvrajsk"},"content":"  describe(\u0027.getTrimmedLogCache()\u0027, () \u003d\u003e {"},{"lineNumber":27,"author":{"gitId":"ptvrajsk"},"content":"    it(\u0027should return 1 new log if cache does not contain existing log\u0027, () \u003d\u003e {"},{"lineNumber":28,"author":{"gitId":"ptvrajsk"},"content":"      expect(getFilteredLogCount(undefined, logHeaderFilter)).toEqual(1);"},{"lineNumber":29,"author":{"gitId":"ptvrajsk"},"content":"      expect(getFilteredLogCount(\u0027\u0027, logHeaderFilter)).toEqual(1);"},{"lineNumber":30,"author":{"gitId":"ptvrajsk"},"content":"      expect(getFilteredLogCount(\u0027gibberish\u0027, logHeaderFilter)).toEqual(1);"},{"lineNumber":31,"author":{"gitId":"ptvrajsk"},"content":"    });"},{"lineNumber":32,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":33,"author":{"gitId":"ptvrajsk"},"content":"    it(\u0027should return additional logs if cache contains existing log\u0027, () \u003d\u003e {"},{"lineNumber":34,"author":{"gitId":"ptvrajsk"},"content":"      let logCounter \u003d 1;"},{"lineNumber":35,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":36,"author":{"gitId":"ptvrajsk"},"content":"      while (logCounter \u003c loggingService.LOG_COUNT_LIMIT) {"},{"lineNumber":37,"author":{"gitId":"ptvrajsk"},"content":"        expect(getFilteredLogCount(repeatOldLogStartHeader(logCounter), logHeaderFilter)).toEqual(logCounter + 1);"},{"lineNumber":38,"author":{"gitId":"ptvrajsk"},"content":"        logCounter +\u003d 1;"},{"lineNumber":39,"author":{"gitId":"ptvrajsk"},"content":"      }"},{"lineNumber":40,"author":{"gitId":"ptvrajsk"},"content":"    });"},{"lineNumber":41,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":42,"author":{"gitId":"ptvrajsk"},"content":"    it(\u0027should return updated log if log in cache contains max number of sessions\u0027, () \u003d\u003e {"},{"lineNumber":43,"author":{"gitId":"ptvrajsk"},"content":"      // Number of logs must stay the same"},{"lineNumber":44,"author":{"gitId":"ptvrajsk"},"content":"      expect(getFilteredLogCount(repeatOldLogStartHeader(loggingService.LOG_COUNT_LIMIT), logHeaderFilter)).toEqual("},{"lineNumber":45,"author":{"gitId":"ptvrajsk"},"content":"        loggingService.LOG_COUNT_LIMIT"},{"lineNumber":46,"author":{"gitId":"ptvrajsk"},"content":"      );"},{"lineNumber":47,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":48,"author":{"gitId":"ptvrajsk"},"content":"      // Number of Old Logs must be reduced by 1 (To make way for the new session log)"},{"lineNumber":49,"author":{"gitId":"ptvrajsk"},"content":"      expect(getFilteredLogCount(repeatOldLogStartHeader(loggingService.LOG_COUNT_LIMIT), oldLogFilter)).toEqual("},{"lineNumber":50,"author":{"gitId":"ptvrajsk"},"content":"        loggingService.LOG_COUNT_LIMIT - 1"},{"lineNumber":51,"author":{"gitId":"ptvrajsk"},"content":"      );"},{"lineNumber":52,"author":{"gitId":"ptvrajsk"},"content":"    });"},{"lineNumber":53,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":54,"author":{"gitId":"ptvrajsk"},"content":"    it(\u0027should return trimmed and updated log if log in cache exceeds max number of sessions\u0027, () \u003d\u003e {"},{"lineNumber":55,"author":{"gitId":"ptvrajsk"},"content":"      const exceededSessionCount \u003d loggingService.LOG_COUNT_LIMIT + 10; // Arbitrary Exceed Count"},{"lineNumber":56,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":57,"author":{"gitId":"ptvrajsk"},"content":"      // Number of logs must be at max number"},{"lineNumber":58,"author":{"gitId":"ptvrajsk"},"content":"      expect(getFilteredLogCount(repeatOldLogStartHeader(exceededSessionCount), logHeaderFilter)).toEqual(loggingService.LOG_COUNT_LIMIT);"},{"lineNumber":59,"author":{"gitId":"ptvrajsk"},"content":""},{"lineNumber":60,"author":{"gitId":"ptvrajsk"},"content":"      // Number of Old Logs must be Max - 1 (To make way for the new session log)"},{"lineNumber":61,"author":{"gitId":"ptvrajsk"},"content":"      expect(getFilteredLogCount(repeatOldLogStartHeader(exceededSessionCount), oldLogFilter)).toEqual(loggingService.LOG_COUNT_LIMIT - 1);"},{"lineNumber":62,"author":{"gitId":"ptvrajsk"},"content":"    });"},{"lineNumber":63,"author":{"gitId":"ptvrajsk"},"content":"  });"},{"lineNumber":64,"author":{"gitId":"ptvrajsk"},"content":"});"}],"authorContributionMap":{"ptvrajsk":64}},{"path":"tests/services/permissions.service.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { PermissionService } from \u0027../../src/app/core/services/permission.service\u0027;"},{"lineNumber":2,"author":{"gitId":"dingyuchen"},"content":"import { PhaseService } from \u0027../../src/app/core/services/phase.service\u0027;"},{"lineNumber":3,"author":{"gitId":"dingyuchen"},"content":"import { Phase } from \u0027../../src/app/core/models/phase.model\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../../src/app/core/services/user.service\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { UserRole } from \u0027../../src/app/core/models/user.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"const testStudent \u003d {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  loginId: \u0027testStudent\u0027,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  role: UserRole.Student"},{"lineNumber":10,"author":{"gitId":"-"},"content":"};"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"const testTutor \u003d {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  loginId: \u0027testTutor\u0027,"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  role: UserRole.Tutor"},{"lineNumber":15,"author":{"gitId":"-"},"content":"};"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"const testAdmin \u003d {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  loginId: \u0027testAdmin\u0027,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  role: UserRole.Admin"},{"lineNumber":20,"author":{"gitId":"-"},"content":"};"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"const mockUserService \u003d new UserService(null, null);"},{"lineNumber":23,"author":{"gitId":"seanlowjk"},"content":"const mockPhaseService \u003d new PhaseService(null, null, null, null, null, null);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"const permissionService \u003d new PermissionService(null, mockUserService, mockPhaseService);"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"describe(\u0027Test a few permissions for each role in each phase\u0027, () \u003d\u003e {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  it(\u0027Test a few permissions for UserRole.Student\u0027, () \u003d\u003e {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    mockPhaseService.currentPhase \u003d Phase.phaseBugReporting;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    mockUserService.currentUser \u003d testStudent;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueCreatable()).toBe(true);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    expect(permissionService.isTutorResponseEditable()).toBe(false);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    mockPhaseService.currentPhase \u003d Phase.phaseTeamResponse;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueLabelsEditable()).toBe(true);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    expect(permissionService.isTeamResponseEditable()).toBe(true);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    mockPhaseService.currentPhase \u003d Phase.phaseTesterResponse;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueEditable()).toBe(true);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueDescriptionEditable()).toBe(false);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    mockPhaseService.currentPhase \u003d Phase.phaseModeration;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueDeletable()).toBe(false);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueTitleEditable()).toBe(false);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"  it(\u0027Test a few permissions for UserRole.Tutor\u0027, () \u003d\u003e {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    mockPhaseService.currentPhase \u003d Phase.phaseBugReporting;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    mockUserService.currentUser \u003d testTutor;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueCreatable()).toBe(false);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueTitleEditable()).toBe(false);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    mockPhaseService.currentPhase \u003d Phase.phaseTeamResponse;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueLabelsEditable()).toBe(false);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    expect(permissionService.isTeamResponseEditable()).toBe(false);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    mockPhaseService.currentPhase \u003d Phase.phaseTesterResponse;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueEditable()).toBe(false);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueDescriptionEditable()).toBe(false);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    mockPhaseService.currentPhase \u003d Phase.phaseModeration;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    expect(permissionService.isTutorResponseEditable()).toBe(true);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueDeletable()).toBe(false);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"  it(\u0027Test a few permissions for UserRole.Admin\u0027, () \u003d\u003e {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    mockPhaseService.currentPhase \u003d Phase.phaseBugReporting;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    mockUserService.currentUser \u003d testAdmin;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueCreatable()).toBe(true);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    expect(permissionService.isTutorResponseEditable()).toBe(false);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    mockPhaseService.currentPhase \u003d Phase.phaseTeamResponse;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueLabelsEditable()).toBe(true);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    expect(permissionService.isTeamResponseEditable()).toBe(true);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    mockPhaseService.currentPhase \u003d Phase.phaseTesterResponse;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueEditable()).toBe(true);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueDescriptionEditable()).toBe(true);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    mockPhaseService.currentPhase \u003d Phase.phaseModeration;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueDeletable()).toBe(false);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueTitleEditable()).toBe(false);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":74,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"dingyuchen":2,"seanlowjk":1,"-":71}},{"path":"tests/services/phase.service.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"seanlowjk"},"content":"import { of } from \u0027rxjs\u0027;"},{"lineNumber":2,"author":{"gitId":"seanlowjk"},"content":"import { NO_ACCESSIBLE_PHASES } from \u0027../../src/app/core/models/session.model\u0027;"},{"lineNumber":3,"author":{"gitId":"dingyuchen"},"content":"import { PhaseService } from \u0027../../src/app/core/services/phase.service\u0027;"},{"lineNumber":4,"author":{"gitId":"dingyuchen"},"content":"import { Phase } from \u0027../../src/app/core/models/phase.model\u0027;"},{"lineNumber":5,"author":{"gitId":"seanlowjk"},"content":"import {"},{"lineNumber":6,"author":{"gitId":"seanlowjk"},"content":"  BUG_REPORTING_PHASE_SESSION_DATA,"},{"lineNumber":7,"author":{"gitId":"seanlowjk"},"content":"  MODERATION_PHASE_SESSION_DATA,"},{"lineNumber":8,"author":{"gitId":"seanlowjk"},"content":"  MULTIPLE_OPEN_PHASES_SESSION_DATA,"},{"lineNumber":9,"author":{"gitId":"seanlowjk"},"content":"  NO_OPEN_PHASES_SESSION_DATA"},{"lineNumber":10,"author":{"gitId":"seanlowjk"},"content":"} from \u0027../constants/session.constants\u0027;"},{"lineNumber":11,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":12,"author":{"gitId":"seanlowjk"},"content":"let phaseService: PhaseService;"},{"lineNumber":13,"author":{"gitId":"seanlowjk"},"content":"let githubService: any;"},{"lineNumber":14,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":15,"author":{"gitId":"seanlowjk"},"content":"describe(\u0027PhaseService\u0027, () \u003d\u003e {"},{"lineNumber":16,"author":{"gitId":"seanlowjk"},"content":"  beforeEach(() \u003d\u003e {"},{"lineNumber":17,"author":{"gitId":"dingyuchen"},"content":"    githubService \u003d jasmine.createSpyObj(\u0027GithubService\u0027, [\u0027fetchSettingsFile\u0027, \u0027storePhaseDetails\u0027]);"},{"lineNumber":18,"author":{"gitId":"seanlowjk"},"content":"    phaseService \u003d new PhaseService(null, githubService, null, null, null, null);"},{"lineNumber":19,"author":{"gitId":"seanlowjk"},"content":"  });"},{"lineNumber":20,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":21,"author":{"gitId":"seanlowjk"},"content":"  describe(\u0027.storeSessionData()\u0027, () \u003d\u003e {"},{"lineNumber":22,"author":{"gitId":"seanlowjk"},"content":"    it(\u0027should return an Observable of true if an openPhase is defined\u0027, () \u003d\u003e {"},{"lineNumber":23,"author":{"gitId":"seanlowjk"},"content":"      githubService.fetchSettingsFile.and.returnValue(of(BUG_REPORTING_PHASE_SESSION_DATA));"},{"lineNumber":24,"author":{"gitId":"seanlowjk"},"content":"      phaseService.storeSessionData().subscribe((result: boolean) \u003d\u003e {"},{"lineNumber":25,"author":{"gitId":"seanlowjk"},"content":"        expect(result).toBeTrue();"},{"lineNumber":26,"author":{"gitId":"seanlowjk"},"content":"      });"},{"lineNumber":27,"author":{"gitId":"seanlowjk"},"content":"    });"},{"lineNumber":28,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":29,"author":{"gitId":"seanlowjk"},"content":"    it(\u0027should return an Observable of true if multiple openPhases are defined\u0027, () \u003d\u003e {"},{"lineNumber":30,"author":{"gitId":"seanlowjk"},"content":"      githubService.fetchSettingsFile.and.returnValue(of(MULTIPLE_OPEN_PHASES_SESSION_DATA));"},{"lineNumber":31,"author":{"gitId":"seanlowjk"},"content":"      phaseService.storeSessionData().subscribe((result: boolean) \u003d\u003e {"},{"lineNumber":32,"author":{"gitId":"seanlowjk"},"content":"        expect(result).toBeTrue();"},{"lineNumber":33,"author":{"gitId":"seanlowjk"},"content":"      });"},{"lineNumber":34,"author":{"gitId":"seanlowjk"},"content":"    });"},{"lineNumber":35,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":36,"author":{"gitId":"ptvrajsk"},"content":"    it(\u0027should throw an error if no openPhases are defined\u0027, () \u003d\u003e {"},{"lineNumber":37,"author":{"gitId":"seanlowjk"},"content":"      githubService.fetchSettingsFile.and.returnValue(of(NO_OPEN_PHASES_SESSION_DATA));"},{"lineNumber":38,"author":{"gitId":"ptvrajsk"},"content":"      phaseService.storeSessionData().subscribe({"},{"lineNumber":39,"author":{"gitId":"ptvrajsk"},"content":"        next: () \u003d\u003e fail(),"},{"lineNumber":40,"author":{"gitId":"ptvrajsk"},"content":"        error: (err) \u003d\u003e expect(err).toEqual(new Error(NO_ACCESSIBLE_PHASES))"},{"lineNumber":41,"author":{"gitId":"seanlowjk"},"content":"      });"},{"lineNumber":42,"author":{"gitId":"seanlowjk"},"content":"    });"},{"lineNumber":43,"author":{"gitId":"seanlowjk"},"content":"  });"},{"lineNumber":44,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":45,"author":{"gitId":"seanlowjk"},"content":"  describe(\u0027.githubRepoPermissionLevel()\u0027, () \u003d\u003e {"},{"lineNumber":46,"author":{"gitId":"seanlowjk"},"content":"    it(\u0027should return \"repo\" if phaseModeration is included in openPhases\u0027, () \u003d\u003e {"},{"lineNumber":47,"author":{"gitId":"seanlowjk"},"content":"      phaseService.sessionData \u003d MODERATION_PHASE_SESSION_DATA;"},{"lineNumber":48,"author":{"gitId":"seanlowjk"},"content":"      expect(phaseService.sessionData.openPhases).toContain(Phase.phaseModeration);"},{"lineNumber":49,"author":{"gitId":"seanlowjk"},"content":"      expect(phaseService.githubRepoPermissionLevel()).toEqual(\u0027repo\u0027);"},{"lineNumber":50,"author":{"gitId":"seanlowjk"},"content":"    });"},{"lineNumber":51,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":52,"author":{"gitId":"seanlowjk"},"content":"    it(\u0027should return \"public_repo\" if phaseModeration is not included in openPhases\u0027, () \u003d\u003e {"},{"lineNumber":53,"author":{"gitId":"seanlowjk"},"content":"      phaseService.sessionData \u003d NO_OPEN_PHASES_SESSION_DATA;"},{"lineNumber":54,"author":{"gitId":"seanlowjk"},"content":"      expect(phaseService.sessionData.openPhases).not.toContain(Phase.phaseModeration);"},{"lineNumber":55,"author":{"gitId":"seanlowjk"},"content":"      expect(phaseService.githubRepoPermissionLevel()).toEqual(\u0027public_repo\u0027);"},{"lineNumber":56,"author":{"gitId":"seanlowjk"},"content":"    });"},{"lineNumber":57,"author":{"gitId":"seanlowjk"},"content":"  });"},{"lineNumber":58,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":59,"author":{"gitId":"seanlowjk"},"content":"  describe(\u0027.reset()\u0027, () \u003d\u003e {"},{"lineNumber":60,"author":{"gitId":"seanlowjk"},"content":"    it(\u0027should reset the currentPhase of the PhaseService\u0027, () \u003d\u003e {"},{"lineNumber":61,"author":{"gitId":"seanlowjk"},"content":"      phaseService.currentPhase \u003d Phase.phaseBugReporting;"},{"lineNumber":62,"author":{"gitId":"seanlowjk"},"content":"      phaseService.reset();"},{"lineNumber":63,"author":{"gitId":"seanlowjk"},"content":"      expect(phaseService.currentPhase).toBeNull();"},{"lineNumber":64,"author":{"gitId":"seanlowjk"},"content":"    });"},{"lineNumber":65,"author":{"gitId":"seanlowjk"},"content":"  });"},{"lineNumber":66,"author":{"gitId":"seanlowjk"},"content":"});"}],"authorContributionMap":{"dingyuchen":3,"ptvrajsk":4,"seanlowjk":59}},{"path":"tests/services/repo-creator.service.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"seanlowjk"},"content":"import {"},{"lineNumber":2,"author":{"gitId":"seanlowjk"},"content":"  BUG_REPORTING_INVALID_ROLE,"},{"lineNumber":3,"author":{"gitId":"seanlowjk"},"content":"  CURRENT_PHASE_REPO_CLOSED,"},{"lineNumber":4,"author":{"gitId":"seanlowjk"},"content":"  MISSING_REQUIRED_REPO,"},{"lineNumber":5,"author":{"gitId":"seanlowjk"},"content":"  RepoCreatorService"},{"lineNumber":6,"author":{"gitId":"seanlowjk"},"content":"} from \u0027../../src/app/core/services/repo-creator.service\u0027;"},{"lineNumber":7,"author":{"gitId":"seanlowjk"},"content":"import { of } from \u0027rxjs\u0027;"},{"lineNumber":8,"author":{"gitId":"seanlowjk"},"content":"import { UserService } from \u0027../../src/app/core/services/user.service\u0027;"},{"lineNumber":9,"author":{"gitId":"seanlowjk"},"content":"import { Phase } from \u0027../../src/app/core/models/phase.model\u0027;"},{"lineNumber":10,"author":{"gitId":"seanlowjk"},"content":"import { USER_JUNWEI, USER_Q } from \u0027../constants/data.constants\u0027;"},{"lineNumber":11,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":12,"author":{"gitId":"seanlowjk"},"content":"const PHASE_OWNER \u003d \u0027CATcher-org\u0027;"},{"lineNumber":13,"author":{"gitId":"seanlowjk"},"content":"const PHASE_REPO \u003d \u0027bugreporting\u0027;"},{"lineNumber":14,"author":{"gitId":"seanlowjk"},"content":"let repoCreatorService: RepoCreatorService;"},{"lineNumber":15,"author":{"gitId":"seanlowjk"},"content":"let githubService: any;"},{"lineNumber":16,"author":{"gitId":"seanlowjk"},"content":"let userService: UserService;"},{"lineNumber":17,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":18,"author":{"gitId":"seanlowjk"},"content":"describe(\u0027RepoCreatorService\u0027, () \u003d\u003e {"},{"lineNumber":19,"author":{"gitId":"seanlowjk"},"content":"  beforeEach(() \u003d\u003e {"},{"lineNumber":20,"author":{"gitId":"seanlowjk"},"content":"    userService \u003d new UserService(null, null);"},{"lineNumber":21,"author":{"gitId":"seanlowjk"},"content":"    githubService \u003d jasmine.createSpyObj(\u0027GithubService\u0027, [\u0027isRepositoryPresent\u0027, \u0027createRepository\u0027]);"},{"lineNumber":22,"author":{"gitId":"seanlowjk"},"content":"    repoCreatorService \u003d new RepoCreatorService(githubService, userService);"},{"lineNumber":23,"author":{"gitId":"seanlowjk"},"content":"  });"},{"lineNumber":24,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":25,"author":{"gitId":"seanlowjk"},"content":"  describe(\u0027.verifyRepoCreation()\u0027, () \u003d\u003e {"},{"lineNumber":26,"author":{"gitId":"seanlowjk"},"content":"    it(\u0027should not need to check the presence of the repository if no fix was done\u0027, () \u003d\u003e {"},{"lineNumber":27,"author":{"gitId":"seanlowjk"},"content":"      of(null).pipe(repoCreatorService.verifyRepoCreation(PHASE_OWNER, PHASE_REPO)).subscribe();"},{"lineNumber":28,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":29,"author":{"gitId":"seanlowjk"},"content":"      expect(githubService.isRepositoryPresent).not.toHaveBeenCalled();"},{"lineNumber":30,"author":{"gitId":"seanlowjk"},"content":"    });"},{"lineNumber":31,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":32,"author":{"gitId":"seanlowjk"},"content":"    it(\u0027should check the presence of the repository if a fix was done\u0027, () \u003d\u003e {"},{"lineNumber":33,"author":{"gitId":"seanlowjk"},"content":"      githubService.isRepositoryPresent.and.callFake(() \u003d\u003e of(true));"},{"lineNumber":34,"author":{"gitId":"seanlowjk"},"content":"      of(true).pipe(repoCreatorService.verifyRepoCreation(PHASE_OWNER, PHASE_REPO)).subscribe();"},{"lineNumber":35,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":36,"author":{"gitId":"seanlowjk"},"content":"      expect(githubService.isRepositoryPresent).toHaveBeenCalledWith(PHASE_OWNER, PHASE_REPO);"},{"lineNumber":37,"author":{"gitId":"seanlowjk"},"content":"    });"},{"lineNumber":38,"author":{"gitId":"seanlowjk"},"content":"  });"},{"lineNumber":39,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":40,"author":{"gitId":"seanlowjk"},"content":"  describe(\u0027verifyRepoCreationPermissions()\u0027, () \u003d\u003e {"},{"lineNumber":41,"author":{"gitId":"seanlowjk"},"content":"    it(\u0027should return the original permissions if repo creation was not needed\u0027, () \u003d\u003e {"},{"lineNumber":42,"author":{"gitId":"seanlowjk"},"content":"      userService.currentUser \u003d USER_JUNWEI;"},{"lineNumber":43,"author":{"gitId":"seanlowjk"},"content":"      of(null)"},{"lineNumber":44,"author":{"gitId":"seanlowjk"},"content":"        .pipe(repoCreatorService.verifyRepoCreationPermissions(Phase.phaseBugReporting))"},{"lineNumber":45,"author":{"gitId":"seanlowjk"},"content":"        .subscribe((repoCreationPermission: boolean | null) \u003d\u003e expect(repoCreationPermission).toBe(null));"},{"lineNumber":46,"author":{"gitId":"seanlowjk"},"content":"    });"},{"lineNumber":47,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":48,"author":{"gitId":"seanlowjk"},"content":"    it(\u0027should return the original permissions if permissions were given\u0027, () \u003d\u003e {"},{"lineNumber":49,"author":{"gitId":"seanlowjk"},"content":"      userService.currentUser \u003d USER_JUNWEI;"},{"lineNumber":50,"author":{"gitId":"seanlowjk"},"content":"      of(true)"},{"lineNumber":51,"author":{"gitId":"seanlowjk"},"content":"        .pipe(repoCreatorService.verifyRepoCreationPermissions(Phase.phaseBugReporting))"},{"lineNumber":52,"author":{"gitId":"seanlowjk"},"content":"        .subscribe((repoCreationPermission: boolean | null) \u003d\u003e expect(repoCreationPermission).toBe(true));"},{"lineNumber":53,"author":{"gitId":"seanlowjk"},"content":"    });"},{"lineNumber":54,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":55,"author":{"gitId":"seanlowjk"},"content":"    it(\u0027should throw an error if no permissions were given\u0027, () \u003d\u003e {"},{"lineNumber":56,"author":{"gitId":"seanlowjk"},"content":"      of(false)"},{"lineNumber":57,"author":{"gitId":"seanlowjk"},"content":"        .pipe(repoCreatorService.verifyRepoCreationPermissions(Phase.phaseBugReporting))"},{"lineNumber":58,"author":{"gitId":"seanlowjk"},"content":"        .subscribe({"},{"lineNumber":59,"author":{"gitId":"seanlowjk"},"content":"          next: () \u003d\u003e fail(),"},{"lineNumber":60,"author":{"gitId":"seanlowjk"},"content":"          error: (err) \u003d\u003e expect(err).toEqual(new Error(MISSING_REQUIRED_REPO))"},{"lineNumber":61,"author":{"gitId":"seanlowjk"},"content":"        });"},{"lineNumber":62,"author":{"gitId":"seanlowjk"},"content":"    });"},{"lineNumber":63,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":64,"author":{"gitId":"seanlowjk"},"content":"    it(\u0027should throw an error if the wrong phase were given\u0027, () \u003d\u003e {"},{"lineNumber":65,"author":{"gitId":"seanlowjk"},"content":"      of(true)"},{"lineNumber":66,"author":{"gitId":"seanlowjk"},"content":"        .pipe(repoCreatorService.verifyRepoCreationPermissions(Phase.phaseModeration))"},{"lineNumber":67,"author":{"gitId":"seanlowjk"},"content":"        .subscribe({"},{"lineNumber":68,"author":{"gitId":"seanlowjk"},"content":"          next: () \u003d\u003e fail(),"},{"lineNumber":69,"author":{"gitId":"seanlowjk"},"content":"          error: (err) \u003d\u003e expect(err).toEqual(new Error(CURRENT_PHASE_REPO_CLOSED))"},{"lineNumber":70,"author":{"gitId":"seanlowjk"},"content":"        });"},{"lineNumber":71,"author":{"gitId":"seanlowjk"},"content":"    });"},{"lineNumber":72,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":73,"author":{"gitId":"seanlowjk"},"content":"    it(\u0027should throw an error if permissions, correct phase, but wrong user role were given\u0027, () \u003d\u003e {"},{"lineNumber":74,"author":{"gitId":"seanlowjk"},"content":"      userService.currentUser \u003d USER_Q;"},{"lineNumber":75,"author":{"gitId":"seanlowjk"},"content":"      of(true)"},{"lineNumber":76,"author":{"gitId":"seanlowjk"},"content":"        .pipe(repoCreatorService.verifyRepoCreationPermissions(Phase.phaseBugReporting))"},{"lineNumber":77,"author":{"gitId":"seanlowjk"},"content":"        .subscribe({"},{"lineNumber":78,"author":{"gitId":"seanlowjk"},"content":"          next: () \u003d\u003e fail(),"},{"lineNumber":79,"author":{"gitId":"seanlowjk"},"content":"          error: (err) \u003d\u003e expect(err).toEqual(new Error(BUG_REPORTING_INVALID_ROLE))"},{"lineNumber":80,"author":{"gitId":"seanlowjk"},"content":"        });"},{"lineNumber":81,"author":{"gitId":"seanlowjk"},"content":"    });"},{"lineNumber":82,"author":{"gitId":"seanlowjk"},"content":"  });"},{"lineNumber":83,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":84,"author":{"gitId":"seanlowjk"},"content":"  describe(\u0027.attemptRepoCreation()\u0027, () \u003d\u003e {"},{"lineNumber":85,"author":{"gitId":"seanlowjk"},"content":"    it(\u0027should not create the repository if repo creation is not needed\u0027, () \u003d\u003e {"},{"lineNumber":86,"author":{"gitId":"seanlowjk"},"content":"      of(null).pipe(repoCreatorService.attemptRepoCreation(PHASE_REPO)).subscribe();"},{"lineNumber":87,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":88,"author":{"gitId":"seanlowjk"},"content":"      expect(githubService.createRepository).not.toHaveBeenCalled();"},{"lineNumber":89,"author":{"gitId":"seanlowjk"},"content":"    });"},{"lineNumber":90,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":91,"author":{"gitId":"seanlowjk"},"content":"    it(\u0027should create the repository if permissions, correct phase and correct user role were given\u0027, () \u003d\u003e {"},{"lineNumber":92,"author":{"gitId":"seanlowjk"},"content":"      userService.currentUser \u003d USER_JUNWEI;"},{"lineNumber":93,"author":{"gitId":"seanlowjk"},"content":"      githubService.createRepository.and.callFake(() \u003d\u003e of(true));"},{"lineNumber":94,"author":{"gitId":"seanlowjk"},"content":"      of(true).pipe(repoCreatorService.attemptRepoCreation(PHASE_REPO)).subscribe();"},{"lineNumber":95,"author":{"gitId":"seanlowjk"},"content":""},{"lineNumber":96,"author":{"gitId":"seanlowjk"},"content":"      expect(githubService.createRepository).toHaveBeenCalledWith(PHASE_REPO);"},{"lineNumber":97,"author":{"gitId":"seanlowjk"},"content":"    });"},{"lineNumber":98,"author":{"gitId":"seanlowjk"},"content":"  });"},{"lineNumber":99,"author":{"gitId":"seanlowjk"},"content":"});"}],"authorContributionMap":{"seanlowjk":99}},{"path":"tests/services/upload.service.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { UploadService, SUPPORTED_FILE_TYPES, FILE_TYPE_SUPPORT_ERROR } from \u0027../../src/app/core/services/upload.service\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"const PERIOD \u003d \u0027.\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"describe(\u0027UploadService\u0027, () \u003d\u003e {"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  describe(\u0027.isSupportedFileType(fileName)\u0027, () \u003d\u003e {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    it(\u0027can distinguish valid / invalid filetypes\u0027, () \u003d\u003e {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      const uploadService \u003d new UploadService(null);"},{"lineNumber":9,"author":{"gitId":"-"},"content":"      for (const validFileType of SUPPORTED_FILE_TYPES) {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        const validFileName \u003d \u0027testFile\u0027 + PERIOD + validFileType;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        expect(uploadService.isSupportedFileType(validFileName)).toBe(true);"},{"lineNumber":12,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":13,"author":{"gitId":"-"},"content":"      const invalidFileName \u003d \u0027testFile\u0027 + PERIOD + \u0027java\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"      expect(uploadService.isSupportedFileType(invalidFileName)).toBe(false);"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    it(\u0027is case insensitive\u0027, () \u003d\u003e {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      const uploadService \u003d new UploadService(null);"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      const invalidFileName \u003d \u0027TESTfile\u0027 + PERIOD + \u0027JS\u0027;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      expect(uploadService.isSupportedFileType(invalidFileName)).toBe(false);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    it(\u0027returns false for filenames that do not have a file extension\u0027, () \u003d\u003e {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      const uploadService \u003d new UploadService(null);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      for (const validFileType of SUPPORTED_FILE_TYPES) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        const fileNameWithoutFileExtension \u003d \u0027testFile\u0027 + validFileType;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        expect(uploadService.isSupportedFileType(fileNameWithoutFileExtension)).toBe(false);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"  describe(\u0027.uploadFile(fileData, fileName)\u0027, () \u003d\u003e {"},{"lineNumber":33,"author":{"gitId":"dingyuchen"},"content":"    it(\u0027throws an error if an invalid filetype is uploaded\u0027, (done) \u003d\u003e {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      const uploadService \u003d new UploadService(null);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      uploadService.uploadFile(\u0027testdata\u0027, \u0027testFile.java\u0027).subscribe("},{"lineNumber":36,"author":{"gitId":"dingyuchen"},"content":"        (val) \u003d\u003e {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"          fail(\u0027This test case should fail.\u0027);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"          done();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":40,"author":{"gitId":"dingyuchen"},"content":"        (error) \u003d\u003e {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"          expect(error).toBe(FILE_TYPE_SUPPORT_ERROR);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"          done();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":47,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"dingyuchen":3,"-":44}},{"path":"tests/services/user.service.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { jsonData, USER_JUNWEI, USER_Q, USER_SHUMING, USER_WITH_TWO_ROLES } from \u0027../constants/data.constants\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../../src/app/core/services/user.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { User, UserRole } from \u0027../../src/app/core/models/user.model\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { of } from \u0027rxjs\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"let dataService: any;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"describe(\u0027UserService\u0027, () \u003d\u003e {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  describe(\u0027.createUserModel(loginId)\u0027, () \u003d\u003e {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    beforeAll(() \u003d\u003e {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"      dataService \u003d jasmine.createSpyObj(\u0027DataService\u0027, [\u0027getDataFile\u0027]);"},{"lineNumber":12,"author":{"gitId":"-"},"content":"      dataService.getDataFile.and.returnValue(of(jsonData));"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    it(\u0027creates a Student user correctly\u0027, async () \u003d\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      await createAndVerifyUser(USER_JUNWEI.loginId, USER_JUNWEI);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    it(\u0027creates a Tutor user correctly when loginId is very short\u0027, async () \u003d\u003e {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      await createAndVerifyUser(USER_Q.loginId, USER_Q);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    it(\u0027creates an Admin user correctly\u0027, async () \u003d\u003e {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      await createAndVerifyUser(USER_SHUMING.loginId, USER_SHUMING);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    it(\u0027treats the loginId in a case insensitive manner\u0027, async () \u003d\u003e {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      await createAndVerifyUser(\u0027JUNWEi96\u0027, USER_JUNWEI);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    it(\u0027assigns highest possible role to a user who has multiple roles in data.csv\u0027, async () \u003d\u003e {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      await createAndVerifyUser(USER_WITH_TWO_ROLES.loginId, USER_WITH_TWO_ROLES);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    it(\u0027throws an error if the user is unauthorized\u0027, (done) \u003d\u003e {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      const userService \u003d new UserService(null, dataService);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      userService.createUserModel(\u0027RandomUser\u0027).subscribe("},{"lineNumber":38,"author":{"gitId":"dingyuchen"},"content":"        (user) \u003d\u003e {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          fail(\u0027This test case should have failed.\u0027);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"          done();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":42,"author":{"gitId":"dingyuchen"},"content":"        (error) \u003d\u003e {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"          expect(error).toEqual(new Error(\u0027Unauthorized user.\u0027));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"          done();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":49,"author":{"gitId":"-"},"content":"});"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"async function createAndVerifyUser(loginId: string, expectedUser: User) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  const userService \u003d new UserService(null, dataService);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  const actualUser \u003d await userService.createUserModel(loginId).toPromise();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  expect(actualUser).toEqual(expectedUser);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dingyuchen":2,"-":53}}]
